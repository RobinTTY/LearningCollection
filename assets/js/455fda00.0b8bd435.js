"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[7478],{4195:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=t(4848),s=t(8453);const r={id:"types",title:"Types",sidebar_position:1},o=void 0,a={id:"web/typescript/core-concepts/types",title:"Types",description:"Static types systems describe the shapes and behaviors of what our values will be when we run our programs. A type-checker like TypeScript uses that information and tells us when things might be going off the rails.",source:"@site/docs/web/typescript/core-concepts/types.md",sourceDirName:"web/typescript/core-concepts",slug:"/web/typescript/core-concepts/types",permalink:"/LearningCollection/web/typescript/core-concepts/types",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/core-concepts/types.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"types",title:"Types",sidebar_position:1},sidebar:"docs",previous:{title:"Typescript",permalink:"/LearningCollection/web/typescript/"},next:{title:"Enums",permalink:"/LearningCollection/web/typescript/core-concepts/enums"}},c={},l=[{value:"Primitive Types",id:"primitive-types",level:2},{value:"Object Types",id:"object-types",level:2},{value:"Optional Properties",id:"optional-properties",level:3},{value:"Arrays",id:"arrays",level:2},{value:"any",id:"any",level:2},{value:"Tuple Types",id:"tuple-types",level:2},{value:"Union Types",id:"union-types",level:2},{value:"Literal Types",id:"literal-types",level:2},{value:"Type Aliases",id:"type-aliases",level:2},{value:"void",id:"void",level:2},{value:"object",id:"object",level:2},{value:"unknown",id:"unknown",level:2},{value:"never",id:"never",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Static types systems describe the shapes and behaviors of what our values will be when we run our programs. A type-checker like TypeScript uses that information and tells us when things might be going off the rails."}),"\n",(0,i.jsx)(n.p,{children:"While we could write a function in JavaScript that looks like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"title=add.js",children:"function add(num1, num2) {\n  return num1 + num2;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"With Typescript we can add parameter type annotations so that we immediately get an error if we supply the function with the wrong argument type:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"title=add.ts",children:"function add(num1: number, num2: number) {\n  return num1 + num2;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"primitive-types",children:"Primitive Types"}),"\n",(0,i.jsxs)(n.p,{children:["JavaScript has three very commonly used primitives: ",(0,i.jsx)(n.code,{children:"string"}),", ",(0,i.jsx)(n.code,{children:"number"}),", and ",(0,i.jsx)(n.code,{children:"boolean"}),". Each has a corresponding type in TypeScript."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The type names String, Number, and Boolean (starting with capital letters) are legal, but refer to some special built-in types that will very rarely appear in your code. Always use string, number, or boolean for types."})}),"\n",(0,i.jsx)(n.h2,{id:"object-types",children:"Object Types"}),"\n",(0,i.jsx)(n.p,{children:"Apart from primitives, the most common sort of type you\u2019ll encounter is an object type. This refers to any JavaScript value with properties, which is almost all of them! To define an object type, we simply list its properties and their types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"{2}",children:'// The parameter\'s type annotation is an object type\nfunction printCoord(pt: { x: number; y: number }) {\n  console.log("The coordinate\'s x value is " + pt.x);\n  console.log("The coordinate\'s y value is " + pt.y);\n}\nprintCoord({ x: 3, y: 7 });\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here, we annotated the parameter with a type with two properties - ",(0,i.jsx)(n.code,{children:"x"})," and ",(0,i.jsx)(n.code,{children:"y"})," - which are both of type number. You can use ",(0,i.jsx)(n.code,{children:","})," or ",(0,i.jsx)(n.code,{children:";"})," to separate the properties, and the last separator is optional either way."]}),"\n",(0,i.jsx)(n.h3,{id:"optional-properties",children:"Optional Properties"}),"\n",(0,i.jsxs)(n.p,{children:["Object types can also specify that some or all of their properties are optional. To do this, add a ",(0,i.jsx)(n.code,{children:"?"})," after the property name:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'function printName(obj: { first: string; last?: string }) {\n  // ...\n}\n// Both OK\nprintName({ first: "Bob" });\nprintName({ first: "Alice", last: "Alisson" });\n'})}),"\n",(0,i.jsx)(n.h2,{id:"arrays",children:"Arrays"}),"\n",(0,i.jsxs)(n.p,{children:["To specify the type of an array like ",(0,i.jsx)(n.code,{children:"[1, 2, 3]"}),", you can use the syntax ",(0,i.jsx)(n.code,{children:"number[];"}),". You may also see this written as ",(0,i.jsx)(n.code,{children:"Array<number>"}),", which means the same thing."]}),"\n",(0,i.jsx)(n.h2,{id:"any",children:"any"}),"\n",(0,i.jsxs)(n.p,{children:["TypeScript also has a special type, ",(0,i.jsx)(n.code,{children:"any"}),", that you can use whenever you don\u2019t want a particular value to cause typechecking errors. When a value is of type any, you can access any properties of it (which will in turn be of type ",(0,i.jsx)(n.code,{children:"any"}),"), call it like a function, assign it to (or from) a value of any type, or pretty much anything else that\u2019s syntactically legal:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'let obj: any = { x: 0 };\n// None of the following lines of code will throw compiler errors.\n// Using `any` disables all further type checking, and it is assumed\n// you know the environment better than TypeScript.\nobj.foo();\nobj();\nobj.bar = 100;\nobj = "hello";\nconst n: number = obj;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The any type is useful when you don\u2019t want to write out a long type just to convince TypeScript that a particular line of code is okay. When you don\u2019t specify a type, and TypeScript can\u2019t infer it from context, the compiler will typically default to ",(0,i.jsx)(n.code,{children:"any"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You usually want to avoid this, though, because any isn\u2019t type-checked. Use the compiler flag ",(0,i.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#noImplicitAny",children:(0,i.jsx)(n.code,{children:"noImplicitAny"})})," to flag any implicit any as an error."]}),"\n",(0,i.jsx)(n.h2,{id:"tuple-types",children:"Tuple Types"}),"\n",(0,i.jsxs)(n.p,{children:["A tuple type is another sort of ",(0,i.jsx)(n.code,{children:"Array"})," type that knows exactly how many elements it contains, and exactly which types it contains at specific positions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type StringNumberPair = [string, number];\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"StringNumberPair"})," is a tuple type of ",(0,i.jsx)(n.code,{children:"string"})," and ",(0,i.jsx)(n.code,{children:"number"}),". To the type system, ",(0,i.jsx)(n.code,{children:"StringNumberPair"})," describes arrays whose 0 index contains a ",(0,i.jsx)(n.code,{children:"string"})," and whose 1 index contains a ",(0,i.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"union-types",children:"Union Types"}),"\n",(0,i.jsx)(n.p,{children:"A union type is a type formed from two or more other types, representing values that may be any one of those types. We refer to each of these types as the union's members."}),"\n",(0,i.jsx)(n.p,{children:"Example of a function that can operate on strings or numbers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'function printId(id: number | string) {\n  console.log("Your ID is: " + id);\n}\n// OK\nprintId(101);\n// OK\nprintId("202");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"literal-types",children:"Literal Types"}),"\n",(0,i.jsx)(n.p,{children:"In addition to the general types string and number, we can refer to specific strings and numbers in type positions. This is reflected in how TypeScript creates types for literals:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"type-literals-02",src:t(6838).A+"",width:"541",height:"155"})}),"\n",(0,i.jsx)(n.p,{children:"It\u2019s not much use to have a variable that can only have one value! But by combining literals into unions, you can express a much more useful concept - for example, functions that only accept a certain set of known values:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'function printText(s: string, alignment: "left" | "right" | "center") {\n  // ...\n}\nprintText("Hello, world", "left");\n// Argument of type \'"centre"\' is not assignable to parameter of type \'"left" | "right" | "center"\'\nprintText("G\'day, mate", "centre");\n'})}),"\n",(0,i.jsx)(n.p,{children:"Numeric literal types work the same way:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"function compare(a: string, b: string): -1 | 0 | 1 {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"type-aliases",children:"Type Aliases"}),"\n",(0,i.jsx)(n.p,{children:"We\u2019ve been using object types and union types by writing them directly in type annotations. This is convenient, but it\u2019s common to want to use the same type more than once and refer to it by a single name."}),"\n",(0,i.jsx)(n.p,{children:"A type alias is exactly that - a name for any type. The syntax for a type alias is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"{1-4}",children:'type Point = {\n  x: number;\n  y: number;\n};\n\n// Exactly the same as the earlier example\nfunction printCoord(pt: Point) {\n  console.log("The coordinate\'s x value is " + pt.x);\n  console.log("The coordinate\'s y value is " + pt.y);\n}\n\nprintCoord({ x: 100, y: 100 });\n'})}),"\n",(0,i.jsx)(n.p,{children:"It's similar to an interface, but it can't be extended - and it can represent things that interfaces can't."}),"\n",(0,i.jsx)(n.h2,{id:"void",children:"void"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"void"})," represents the return value of functions which don\u2019t return a value. It\u2019s the inferred type any time a function doesn\u2019t have any return statements, or doesn't return any explicit value from those return statements:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'function printResult(num: number): void {\n  console.log("Result: " + num);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"object",children:"object"}),"\n",(0,i.jsxs)(n.p,{children:["The special type ",(0,i.jsx)(n.code,{children:"object"})," refers to any value that isn\u2019t a primitive (",(0,i.jsx)(n.code,{children:"string"}),", ",(0,i.jsx)(n.code,{children:"number"}),", ",(0,i.jsx)(n.code,{children:"bigint"}),", ",(0,i.jsx)(n.code,{children:"boolean"}),", ",(0,i.jsx)(n.code,{children:"symbol"}),", ",(0,i.jsx)(n.code,{children:"null"}),", or ",(0,i.jsx)(n.code,{children:"undefined"}),"). This is different from the empty object type ",(0,i.jsx)(n.code,{children:"{ }"}),", and also different from the global type ",(0,i.jsx)(n.code,{children:"Object"}),". It\u2019s very likely you will never use ",(0,i.jsx)(n.code,{children:"Object"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that in JavaScript, function values are objects: They have properties, have ",(0,i.jsx)(n.code,{children:"Object.prototype"})," in their prototype chain, are ",(0,i.jsx)(n.code,{children:"instanceof Object"}),", you can call ",(0,i.jsx)(n.code,{children:"Object.keys"})," on them, and so on. For this reason, function types are considered to be ",(0,i.jsx)(n.code,{children:"object"}),"s in TypeScript"]}),"\n",(0,i.jsx)(n.h2,{id:"unknown",children:"unknown"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"unknown"})," type is the type-safe counterpart of ",(0,i.jsx)(n.code,{children:"any"}),". Anything is assignable to unknown, but unknown isn't assignable to anything but itself and any without a type assertion or a control flow based narrowing. Likewise, no operations are permitted on an unknown without first asserting or narrowing to a more specific type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"let vAny: any = 10; // We can assign anything to any\nlet vUnknown: unknown = 10; // We can assign anything to unknown just like any\n\nlet s1: string = vAny; // Any is assignable to anything\nlet s2: string = vUnknown; // Invalid; we can't assign vUnknown to any other type (without an explicit assertion)\n\nvAny.method(); // Ok; anything goes with any\nvUnknown.method(); // Not ok; we don't know anything about this variable\n"})}),"\n",(0,i.jsx)(n.p,{children:"There are often times where we want to describe the least-capable type in TypeScript. This is useful for APIs that want to signal \u201cthis can be any value, so you must perform some type of checking before you use it\u201d. This forces users to safely introspect returned values."}),"\n",(0,i.jsx)(n.h2,{id:"never",children:"never"}),"\n",(0,i.jsx)(n.p,{children:"Some functions never return a value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Function returning never must have unreachable end point\nfunction fail(msg: string): never {\n  throw new Error(msg);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The never type represents values which are never observed. In a return type, this means that the function throws an exception or terminates execution of the program."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},6838:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/type-literals-02-d7efbfdb651d028555939f04541575d3.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);