"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4481],{54788:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=n(74848),s=n(28453);const r={id:"interfaces",title:"Interfaces",sidebar_position:3},i=void 0,c={id:"apis/graphql/schemas-and-types/interfaces",title:"Interfaces",description:"Like many type systems, GraphQL supports interfaces. An Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface.",source:"@site/docs/apis/graphql/schemas-and-types/interfaces.md",sourceDirName:"apis/graphql/schemas-and-types",slug:"/apis/graphql/schemas-and-types/interfaces",permalink:"/LearningCollection/apis/graphql/schemas-and-types/interfaces",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/apis/graphql/schemas-and-types/interfaces.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"interfaces",title:"Interfaces",sidebar_position:3},sidebar:"docs",previous:{title:"Security",permalink:"/LearningCollection/apis/graphql/advanced-concepts/security"},next:{title:"Unions",permalink:"/LearningCollection/apis/graphql/schemas-and-types/unions"}},o={},p=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Like many type systems, GraphQL supports interfaces. An Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface."}),"\n",(0,a.jsx)(t.p,{children:"For example, you could have an interface Character that represents any character in the Star Wars trilogy:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-gql",children:"interface Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["This means that any type that implements Character needs to have these exact fields, with these arguments and return types. For example, here are some types that might implement ",(0,a.jsx)(t.code,{children:"Character"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-gql",children:"type Human implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  starships: [Starship]\n  totalCredits: Int\n}\n\ntype Droid implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  primaryFunction: String\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["You can see that both of these types have all of the fields from the ",(0,a.jsx)(t.code,{children:"Character"})," interface, but also bring in extra fields, ",(0,a.jsx)(t.code,{children:"totalCredits"}),", ",(0,a.jsx)(t.code,{children:"starships"})," and ",(0,a.jsx)(t.code,{children:"primaryFunction"}),", that are specific to that particular type of character."]}),"\n",(0,a.jsx)(t.p,{children:"Interfaces are useful when you want to return an object or set of objects, but those might be of several different types. To ask for a field on a specific object type, you need to use an inline fragment:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-gql",children:"query HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n  }\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var a=n(96540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);