"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4623],{96817:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Introduction","href":"/LearningCollection/","docId":"introduction","unlisted":false},{"type":"category","label":"General Concepts","items":[{"type":"category","label":"APIs","items":[{"type":"category","label":"GraphQL","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/LearningCollection/apis/graphql/intro","docId":"apis/graphql/intro","unlisted":false},{"type":"link","label":"Architecture","href":"/LearningCollection/apis/graphql/architecture","docId":"apis/graphql/architecture","unlisted":false},{"type":"link","label":"Core Concepts","href":"/LearningCollection/apis/graphql/core-concepts","docId":"apis/graphql/core-concepts","unlisted":false},{"type":"link","label":"Clients","href":"/LearningCollection/apis/graphql/clients","docId":"apis/graphql/clients","unlisted":false},{"type":"link","label":"Server","href":"/LearningCollection/apis/graphql/server","docId":"apis/graphql/server","unlisted":false},{"type":"link","label":"Pagination","href":"/LearningCollection/apis/graphql/pagination","docId":"apis/graphql/pagination","unlisted":false},{"type":"category","label":"Advanced Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Miscellaneous Concepts","href":"/LearningCollection/apis/graphql/advanced-concepts/miscellaneous-concepts","docId":"apis/graphql/advanced-concepts/miscellaneous-concepts","unlisted":false},{"type":"link","label":"Introspection","href":"/LearningCollection/apis/graphql/advanced-concepts/introspection","docId":"apis/graphql/advanced-concepts/introspection","unlisted":false},{"type":"link","label":"Security","href":"/LearningCollection/apis/graphql/advanced-concepts/security","docId":"apis/graphql/advanced-concepts/security","unlisted":false}]},{"type":"category","label":"schemas-and-types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Interfaces","href":"/LearningCollection/apis/graphql/schemas-and-types/interfaces","docId":"apis/graphql/schemas-and-types/interfaces","unlisted":false},{"type":"link","label":"Unions","href":"/LearningCollection/apis/graphql/schemas-and-types/unions","docId":"apis/graphql/schemas-and-types/unions","unlisted":false},{"type":"link","label":"Fragments","href":"/LearningCollection/apis/graphql/schemas-and-types/fragments","docId":"apis/graphql/schemas-and-types/fragments","unlisted":false}]}]}],"collapsed":true,"collapsible":true},{"type":"link","label":"Call Stack","href":"/LearningCollection/general-concepts/callStack","docId":"general-concepts/callStack","unlisted":false},{"type":"link","label":"Certificates","href":"/LearningCollection/general-concepts/certificates","docId":"general-concepts/certificates","unlisted":false},{"type":"link","label":"Dependency Injection","href":"/LearningCollection/general-concepts/dependencyInjection","docId":"general-concepts/dependencyInjection","unlisted":false},{"type":"link","label":"Dynamic Link Library (DLL)","href":"/LearningCollection/general-concepts/dlls","docId":"general-concepts/dlls","unlisted":false},{"type":"link","label":"Remote Procedure Call (RPC)","href":"/LearningCollection/general-concepts/rpc","docId":"general-concepts/rpc","unlisted":false},{"type":"link","label":"Semaphore vs Mutex","href":"/LearningCollection/general-concepts/semaphoreVsMutex","docId":"general-concepts/semaphoreVsMutex","unlisted":false},{"type":"link","label":"Stack vs Heap","href":"/LearningCollection/general-concepts/stackVsHeap","docId":"general-concepts/stackVsHeap","unlisted":false},{"type":"link","label":"gRPC","href":"/LearningCollection/general-concepts/grpc","docId":"general-concepts/grpc","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Cloud","items":[{"type":"category","label":"aws","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"certified-developer-associate","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Cloud Overview","href":"/LearningCollection/cloud/aws/certified-developer-associate/cloud-overview","docId":"cloud/aws/certified-developer-associate/cloud-overview","unlisted":false},{"type":"link","label":"Identity and Access Management (IAM)","href":"/LearningCollection/cloud/aws/certified-developer-associate/iam","docId":"cloud/aws/certified-developer-associate/iam","unlisted":false},{"type":"link","label":"Elastic Compute Cloud (EC2)","href":"/LearningCollection/cloud/aws/certified-developer-associate/ec2","docId":"cloud/aws/certified-developer-associate/ec2","unlisted":false},{"type":"link","label":"Elastic Load Balancing (ELB)","href":"/LearningCollection/cloud/aws/certified-developer-associate/elb","docId":"cloud/aws/certified-developer-associate/elb","unlisted":false},{"type":"link","label":"Relational Databases (RDS/Aurora)","href":"/LearningCollection/cloud/aws/certified-developer-associate/relational-databases","docId":"cloud/aws/certified-developer-associate/relational-databases","unlisted":false},{"type":"link","label":"ElastiCache","href":"/LearningCollection/cloud/aws/certified-developer-associate/elasti-cache","docId":"cloud/aws/certified-developer-associate/elasti-cache","unlisted":false},{"type":"link","label":"Elastic Beanstalk","href":"/LearningCollection/cloud/aws/certified-developer-associate/elastic-beanstalk","docId":"cloud/aws/certified-developer-associate/elastic-beanstalk","unlisted":false},{"type":"link","label":"Exam Scoring","href":"/LearningCollection/cloud/aws/certified-developer-associate/exam-scoring","docId":"cloud/aws/certified-developer-associate/exam-scoring","unlisted":false}]}]}],"collapsed":true,"collapsible":true},{"type":"category","label":"C#","items":[{"type":"link","label":"Introduction","href":"/LearningCollection/csharp/introduction","docId":"csharp/introduction","unlisted":false},{"type":"category","label":"Core Concepts","items":[{"type":"category","label":"Types","items":[{"type":"link","label":"Introduction","href":"/LearningCollection/csharp/core-concepts/types/introduction","docId":"csharp/core-concepts/types/introduction","unlisted":false},{"type":"link","label":"Enums","href":"/LearningCollection/csharp/core-concepts/types/enums","docId":"csharp/core-concepts/types/enums","unlisted":false},{"type":"link","label":"Tuples","href":"/LearningCollection/csharp/core-concepts/types/tuples","docId":"csharp/core-concepts/types/tuples","unlisted":false},{"type":"link","label":"DateTimes","href":"/LearningCollection/csharp/core-concepts/types/datetimes","docId":"csharp/core-concepts/types/datetimes","unlisted":false},{"type":"link","label":"Arrays","href":"/LearningCollection/csharp/core-concepts/types/arrays","docId":"csharp/core-concepts/types/arrays","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Operators","items":[{"type":"link","label":"Null-conditional operator (?)","href":"/LearningCollection/csharp/core-concepts/operators/null-conditional-operator","docId":"csharp/core-concepts/operators/null-conditional-operator","unlisted":false},{"type":"link","label":"Null-coalescing operator (??)","href":"/LearningCollection/csharp/core-concepts/operators/null-coalescing-operator","docId":"csharp/core-concepts/operators/null-coalescing-operator","unlisted":false},{"type":"link","label":"Range Operator (..)","href":"/LearningCollection/csharp/core-concepts/operators/range-operator","docId":"csharp/core-concepts/operators/range-operator","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Interfaces","items":[{"type":"link","label":"IEnumerable","href":"/LearningCollection/csharp/core-concepts/interfaces/ienumerable","docId":"csharp/core-concepts/interfaces/ienumerable","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Inheritance","href":"/LearningCollection/csharp/core-concepts/inheritance","docId":"csharp/core-concepts/inheritance","unlisted":false},{"type":"link","label":"Nullability","href":"/LearningCollection/csharp/core-concepts/nullability","docId":"csharp/core-concepts/nullability","unlisted":false},{"type":"link","label":"Generics","href":"/LearningCollection/csharp/core-concepts/generics","docId":"csharp/core-concepts/generics","unlisted":false},{"type":"link","label":"Closures","href":"/LearningCollection/csharp/core-concepts/closures","docId":"csharp/core-concepts/closures","unlisted":false},{"type":"link","label":"Events","href":"/LearningCollection/csharp/core-concepts/events","docId":"csharp/core-concepts/events","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced Concepts","items":[{"type":"category","label":"Classes","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Assembly","href":"/LearningCollection/csharp/advanced-concepts/classes/assemblyClass","docId":"csharp/advanced-concepts/classes/assemblyClass","unlisted":false},{"type":"link","label":"ManualResetEvent","href":"/LearningCollection/csharp/advanced-concepts/classes/manResetEvent","docId":"csharp/advanced-concepts/classes/manResetEvent","unlisted":false}]},{"type":"category","label":"Asynchronous Code","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Asynchronous Programming","href":"/LearningCollection/csharp/advanced-concepts/asynchronous-code/asyncProgramming","docId":"csharp/advanced-concepts/asynchronous-code/asyncProgramming","unlisted":false},{"type":"link","label":"Task.Factory.StartNew()","href":"/LearningCollection/csharp/advanced-concepts/asynchronous-code/task-factory-start-new","docId":"csharp/advanced-concepts/asynchronous-code/task-factory-start-new","unlisted":false}]},{"type":"link","label":"Attributes","href":"/LearningCollection/csharp/advanced-concepts/attributes","docId":"csharp/advanced-concepts/attributes","unlisted":false},{"type":"link","label":"Volatile Keyword","href":"/LearningCollection/csharp/advanced-concepts/volatileKeyword","docId":"csharp/advanced-concepts/volatileKeyword","unlisted":false},{"type":"link","label":"Unmanaged vs managed resources","href":"/LearningCollection/csharp/advanced-concepts/unmanagedVsManagedResources","docId":"csharp/advanced-concepts/unmanagedVsManagedResources","unlisted":false},{"type":"link","label":"Unmanaged constraint","href":"/LearningCollection/csharp/advanced-concepts/unmanagedConstraint","docId":"csharp/advanced-concepts/unmanagedConstraint","unlisted":false},{"type":"link","label":"Serialization","href":"/LearningCollection/csharp/advanced-concepts/serialization","docId":"csharp/advanced-concepts/serialization","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":".NET Versions","items":[{"type":"link","label":".Net Core vs .Net Standard vs UWP","href":"/LearningCollection/csharp/dotnet-versions/netstandardVsNetcoreVsUwp","docId":"csharp/dotnet-versions/netstandardVsNetcoreVsUwp","unlisted":false},{"type":"link","label":".Net 6","href":"/LearningCollection/csharp/dotnet-versions/dotnet6","docId":"csharp/dotnet-versions/dotnet6","unlisted":false},{"type":"link","label":".Net 7","href":"/LearningCollection/csharp/dotnet-versions/dotnet7","docId":"csharp/dotnet-versions/dotnet7","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Architectural Patterns","items":[{"type":"link","label":"Model-View-Controller (MVC)","href":"/LearningCollection/csharp/architectural-patterns/model-view-controller","docId":"csharp/architectural-patterns/model-view-controller","unlisted":false},{"type":"link","label":"Repository Pattern","href":"/LearningCollection/csharp/architectural-patterns/repository-pattern","docId":"csharp/architectural-patterns/repository-pattern","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"ASP.NET","items":[{"type":"category","label":"Core Concepts","items":[{"type":"link","label":"Introduction","href":"/LearningCollection/csharp/asp-net/core-concepts/introduction","docId":"csharp/asp-net/core-concepts/introduction","unlisted":false},{"type":"link","label":"ASP.NET REST APIs","href":"/LearningCollection/csharp/asp-net/core-concepts/asp-net-rest-apis","docId":"csharp/asp-net/core-concepts/asp-net-rest-apis","unlisted":false},{"type":"link","label":"Routing","href":"/LearningCollection/csharp/asp-net/core-concepts/routing","docId":"csharp/asp-net/core-concepts/routing","unlisted":false},{"type":"link","label":"Controllers","href":"/LearningCollection/csharp/asp-net/core-concepts/controllers","docId":"csharp/asp-net/core-concepts/controllers","unlisted":false},{"type":"link","label":"Parameter Binding","href":"/LearningCollection/csharp/asp-net/core-concepts/parameter-binding","docId":"csharp/asp-net/core-concepts/parameter-binding","unlisted":false},{"type":"link","label":"Validating Input","href":"/LearningCollection/csharp/asp-net/core-concepts/validating-input","docId":"csharp/asp-net/core-concepts/validating-input","unlisted":false},{"type":"link","label":"Partial updates","href":"/LearningCollection/csharp/asp-net/core-concepts/partial-updates","docId":"csharp/asp-net/core-concepts/partial-updates","unlisted":false},{"type":"link","label":"API Errors","href":"/LearningCollection/csharp/asp-net/core-concepts/api-errors","docId":"csharp/asp-net/core-concepts/api-errors","unlisted":false},{"type":"link","label":"Handling Files","href":"/LearningCollection/csharp/asp-net/core-concepts/handling-files","docId":"csharp/asp-net/core-concepts/handling-files","unlisted":false},{"type":"link","label":"Dependency Injection","href":"/LearningCollection/csharp/asp-net/core-concepts/dependency-injection","docId":"csharp/asp-net/core-concepts/dependency-injection","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced Concepts","items":[{"type":"link","label":"Formatters","href":"/LearningCollection/csharp/asp-net/advanced-concepts/formatters","docId":"csharp/asp-net/advanced-concepts/formatters","unlisted":false},{"type":"link","label":"Logging","href":"/LearningCollection/csharp/asp-net/advanced-concepts/logging","docId":"csharp/asp-net/advanced-concepts/logging","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Entity Framework","items":[{"type":"link","label":"Introduction","href":"/LearningCollection/csharp/entity-framework/introduction","docId":"csharp/entity-framework/introduction","unlisted":false},{"type":"link","label":"DbContext","href":"/LearningCollection/csharp/entity-framework/db-context","docId":"csharp/entity-framework/db-context","unlisted":false},{"type":"link","label":"Migrations","href":"/LearningCollection/csharp/entity-framework/migrations","docId":"csharp/entity-framework/migrations","unlisted":false},{"type":"category","label":"Creating a Model","items":[{"type":"link","label":"Overview","href":"/LearningCollection/csharp/entity-framework/creating-a-model/overview","docId":"csharp/entity-framework/creating-a-model/overview","unlisted":false},{"type":"link","label":"Entity types","href":"/LearningCollection/csharp/entity-framework/creating-a-model/entity-types","docId":"csharp/entity-framework/creating-a-model/entity-types","unlisted":false},{"type":"link","label":"Relationships","href":"/LearningCollection/csharp/entity-framework/creating-a-model/relationships","docId":"csharp/entity-framework/creating-a-model/relationships","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Querying Data","items":[{"type":"link","label":"Basic Querying","href":"/LearningCollection/csharp/entity-framework/querying-data/basic-querying","docId":"csharp/entity-framework/querying-data/basic-querying","unlisted":false},{"type":"link","label":"Tracking Behavior","href":"/LearningCollection/csharp/entity-framework/querying-data/tracking-behavior","docId":"csharp/entity-framework/querying-data/tracking-behavior","unlisted":false},{"type":"link","label":"Inserting Data","href":"/LearningCollection/csharp/entity-framework/querying-data/inserting-data","docId":"csharp/entity-framework/querying-data/inserting-data","unlisted":false},{"type":"link","label":"Updating Data","href":"/LearningCollection/csharp/entity-framework/querying-data/updating-data","docId":"csharp/entity-framework/querying-data/updating-data","unlisted":false},{"type":"link","label":"Deleting Data","href":"/LearningCollection/csharp/entity-framework/querying-data/deleting-data","docId":"csharp/entity-framework/querying-data/deleting-data","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Testing","items":[{"type":"link","label":"Integration Testing","href":"/LearningCollection/csharp/entity-framework/testing/integration-testing","docId":"csharp/entity-framework/testing/integration-testing","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Libraries","items":[{"type":"category","label":"Hot Chocolate","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/LearningCollection/csharp/libraries/hot-chocolate/introduction","docId":"csharp/libraries/hot-chocolate/introduction","unlisted":false},{"type":"link","label":"Queries","href":"/LearningCollection/csharp/libraries/hot-chocolate/queries","docId":"csharp/libraries/hot-chocolate/queries","unlisted":false},{"type":"link","label":"Mutations","href":"/LearningCollection/csharp/libraries/hot-chocolate/mutations","docId":"csharp/libraries/hot-chocolate/mutations","unlisted":false},{"type":"link","label":"Subscriptions","href":"/LearningCollection/csharp/libraries/hot-chocolate/subscriptions","docId":"csharp/libraries/hot-chocolate/subscriptions","unlisted":false},{"type":"link","label":"Resolvers","href":"/LearningCollection/csharp/libraries/hot-chocolate/resolvers","docId":"csharp/libraries/hot-chocolate/resolvers","unlisted":false},{"type":"link","label":"Data Loaders","href":"/LearningCollection/csharp/libraries/hot-chocolate/data-loaders","docId":"csharp/libraries/hot-chocolate/data-loaders","unlisted":false},{"type":"link","label":"Pagination","href":"/LearningCollection/csharp/libraries/hot-chocolate/pagination","docId":"csharp/libraries/hot-chocolate/pagination","unlisted":false},{"type":"category","label":"Advanced Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Extending Types","href":"/LearningCollection/csharp/libraries/hot-chocolate/advanced-concepts/extending-types","docId":"csharp/libraries/hot-chocolate/advanced-concepts/extending-types","unlisted":false},{"type":"link","label":"Errors","href":"/LearningCollection/csharp/libraries/hot-chocolate/advanced-concepts/errors","docId":"csharp/libraries/hot-chocolate/advanced-concepts/errors","unlisted":false}]},{"type":"category","label":"types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Scalars","href":"/LearningCollection/csharp/libraries/hot-chocolate/types/scalars","docId":"csharp/libraries/hot-chocolate/types/scalars","unlisted":false},{"type":"link","label":"Enums","href":"/LearningCollection/csharp/libraries/hot-chocolate/types/enums","docId":"csharp/libraries/hot-chocolate/types/enums","unlisted":false},{"type":"link","label":"Input Objects","href":"/LearningCollection/csharp/libraries/hot-chocolate/types/input-objects","docId":"csharp/libraries/hot-chocolate/types/input-objects","unlisted":false},{"type":"link","label":"Interfaces","href":"/LearningCollection/csharp/libraries/hot-chocolate/types/interfaces","docId":"csharp/libraries/hot-chocolate/types/interfaces","unlisted":false},{"type":"link","label":"Unions","href":"/LearningCollection/csharp/libraries/hot-chocolate/types/unions","docId":"csharp/libraries/hot-chocolate/types/unions","unlisted":false}]}]},{"type":"link","label":"System.Text.Json","href":"/LearningCollection/csharp/libraries/system-text-json","docId":"csharp/libraries/system-text-json","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Comparisons","items":[{"type":"link","label":"Memory Stream vs FileStream","href":"/LearningCollection/csharp/comparisons/memVsFileStream","docId":"csharp/comparisons/memVsFileStream","unlisted":false},{"type":"link","label":"Properties vs Public variables","href":"/LearningCollection/csharp/comparisons/propsVsPublicVars","docId":"csharp/comparisons/propsVsPublicVars","unlisted":false},{"type":"link","label":"private protected vs protected internal","href":"/LearningCollection/csharp/comparisons/private-protected-vs-protected-internal","docId":"csharp/comparisons/private-protected-vs-protected-internal","unlisted":false},{"type":"link","label":"Thread vs Task","href":"/LearningCollection/csharp/comparisons/threadVsTask","docId":"csharp/comparisons/threadVsTask","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Web","items":[{"type":"category","label":"HTML","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Doctype","href":"/LearningCollection/web/html/doctype","docId":"web/html/doctype","unlisted":false},{"type":"link","label":"Element Types","href":"/LearningCollection/web/html/element-types","docId":"web/html/element-types","unlisted":false},{"type":"link","label":"HTML attributes","href":"/LearningCollection/web/html/attributes","docId":"web/html/attributes","unlisted":false},{"type":"link","label":"Interface Elements","href":"/LearningCollection/web/html/interface-elements","docId":"web/html/interface-elements","unlisted":false}]},{"type":"category","label":"CSS","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Types of CSS","href":"/LearningCollection/web/css/basics/types-of-css","docId":"web/css/basics/types-of-css","unlisted":false},{"type":"link","label":"Selectors","href":"/LearningCollection/web/css/basics/selectors","docId":"web/css/basics/selectors","unlisted":false},{"type":"link","label":"Relative Units","href":"/LearningCollection/web/css/basics/relative-units","docId":"web/css/basics/relative-units","unlisted":false}]},{"type":"category","label":"Element Styling","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Margin and Padding","href":"/LearningCollection/web/css/element-styling/margin-padding","docId":"web/css/element-styling/margin-padding","unlisted":false},{"type":"link","label":"Width/Height Properties","href":"/LearningCollection/web/css/element-styling/width-height","docId":"web/css/element-styling/width-height","unlisted":false},{"type":"link","label":"Border","href":"/LearningCollection/web/css/element-styling/border","docId":"web/css/element-styling/border","unlisted":false}]},{"type":"category","label":"Site Layout","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Document Flow and Positioning","href":"/LearningCollection/web/css/site-layout/position","docId":"web/css/site-layout/position","unlisted":false},{"type":"link","label":"Flexbox","href":"/LearningCollection/web/css/site-layout/flexbox","docId":"web/css/site-layout/flexbox","unlisted":false}]},{"type":"category","label":"Advanced Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Constructable Stylesheets","href":"/LearningCollection/web/css/advanced-concepts/constructable-stylesheets","docId":"web/css/advanced-concepts/constructable-stylesheets","unlisted":false}]}]},{"type":"category","label":"JavaScript","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Core Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Variables and Constants","href":"/LearningCollection/web/javascript/core-concepts/variables-and-constants","docId":"web/javascript/core-concepts/variables-and-constants","unlisted":false},{"type":"link","label":"Types","href":"/LearningCollection/web/javascript/core-concepts/types","docId":"web/javascript/core-concepts/types","unlisted":false},{"type":"link","label":"Arithmetic Operators","href":"/LearningCollection/web/javascript/core-concepts/arithmetic-operators","docId":"web/javascript/core-concepts/arithmetic-operators","unlisted":false},{"type":"link","label":"JSON","href":"/LearningCollection/web/javascript/core-concepts/json","docId":"web/javascript/core-concepts/json","unlisted":false},{"type":"link","label":"Promise","href":"/LearningCollection/web/javascript/core-concepts/promise","docId":"web/javascript/core-concepts/promise","unlisted":false},{"type":"link","label":"Destructuring Assignment","href":"/LearningCollection/web/javascript/core-concepts/destructuring-assignment","docId":"web/javascript/core-concepts/destructuring-assignment","unlisted":false}]},{"type":"category","label":"Advanced Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"HTTP Requests","href":"/LearningCollection/web/javascript/advanced-concepts/http-requests","docId":"web/javascript/advanced-concepts/http-requests","unlisted":false},{"type":"link","label":"ES6 Modules","href":"/LearningCollection/web/javascript/advanced-concepts/es6-modules","docId":"web/javascript/advanced-concepts/es6-modules","unlisted":false}]},{"type":"category","label":"Web APIs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"data-* and HTMLElement.dataset","href":"/LearningCollection/web/javascript/web-apis/dataAndDataset","docId":"web/javascript/web-apis/dataAndDataset","unlisted":false}]},{"type":"category","label":"Courses","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Codeacademy Course","href":"/LearningCollection/web/javascript/courses/codeacademy-course/","docId":"web/javascript/courses/codeacademy-course/introductionToJavascript","unlisted":false},{"type":"category","label":"edX Course","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"PennX - SD4x","href":"/LearningCollection/web/javascript/courses/edx-course/pennxSd4x","docId":"web/javascript/courses/edx-course/pennxSd4x","unlisted":false}]},{"type":"link","label":"Javascript Refresher","href":"/LearningCollection/web/javascript/courses/packt-course/","docId":"web/javascript/courses/packt-course/javascriptRefresher","unlisted":false}]}],"href":"/LearningCollection/web/javascript/"},{"type":"category","label":"Typescript","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Core Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Types","href":"/LearningCollection/web/typescript/core-concepts/types","docId":"web/typescript/core-concepts/types","unlisted":false},{"type":"link","label":"Enums","href":"/LearningCollection/web/typescript/core-concepts/enums","docId":"web/typescript/core-concepts/enums","unlisted":false},{"type":"link","label":"Functions","href":"/LearningCollection/web/typescript/core-concepts/functions","docId":"web/typescript/core-concepts/functions","unlisted":false},{"type":"link","label":"Classes","href":"/LearningCollection/web/typescript/core-concepts/classes","docId":"web/typescript/core-concepts/classes","unlisted":false},{"type":"link","label":"Interfaces","href":"/LearningCollection/web/typescript/core-concepts/interfaces","docId":"web/typescript/core-concepts/interfaces","unlisted":false},{"type":"link","label":"Type Assertions","href":"/LearningCollection/web/typescript/core-concepts/type-assertions","docId":"web/typescript/core-concepts/type-assertions","unlisted":false}]},{"type":"category","label":"Advanced Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Intersection Types","href":"/LearningCollection/web/typescript/advanced-concepts/intersections","docId":"web/typescript/advanced-concepts/intersections","unlisted":false},{"type":"link","label":"Type Guards","href":"/LearningCollection/web/typescript/advanced-concepts/type-guards","docId":"web/typescript/advanced-concepts/type-guards","unlisted":false},{"type":"link","label":"Discriminated Unions","href":"/LearningCollection/web/typescript/advanced-concepts/discriminated-unions","docId":"web/typescript/advanced-concepts/discriminated-unions","unlisted":false},{"type":"link","label":"Index Signatures","href":"/LearningCollection/web/typescript/advanced-concepts/index-signatures","docId":"web/typescript/advanced-concepts/index-signatures","unlisted":false},{"type":"link","label":"Optional Chaining","href":"/LearningCollection/web/typescript/advanced-concepts/optional-chaining","docId":"web/typescript/advanced-concepts/optional-chaining","unlisted":false},{"type":"link","label":"Nullish Coalescing","href":"/LearningCollection/web/typescript/advanced-concepts/nullish-coalescing","docId":"web/typescript/advanced-concepts/nullish-coalescing","unlisted":false},{"type":"link","label":"Generics","href":"/LearningCollection/web/typescript/advanced-concepts/generics","docId":"web/typescript/advanced-concepts/generics","unlisted":false}]},{"type":"category","label":"Utility Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Partial<Type>","href":"/LearningCollection/web/typescript/utility-types/partial","docId":"web/typescript/utility-types/partial","unlisted":false},{"type":"link","label":"Readonly<Type>","href":"/LearningCollection/web/typescript/utility-types/readonly","docId":"web/typescript/utility-types/readonly","unlisted":false}]},{"type":"category","label":"Decorators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/LearningCollection/web/typescript/decorators/introduction","docId":"web/typescript/decorators/introduction","unlisted":false},{"type":"link","label":"Class Decorators","href":"/LearningCollection/web/typescript/decorators/class-decorators","docId":"web/typescript/decorators/class-decorators","unlisted":false},{"type":"link","label":"Method Decorators","href":"/LearningCollection/web/typescript/decorators/method-decorators","docId":"web/typescript/decorators/method-decorators","unlisted":false},{"type":"link","label":"Accessor Decorators","href":"/LearningCollection/web/typescript/decorators/accessor-decorators","docId":"web/typescript/decorators/accessor-decorators","unlisted":false},{"type":"link","label":"Property Decorators","href":"/LearningCollection/web/typescript/decorators/property-decorators","docId":"web/typescript/decorators/property-decorators","unlisted":false},{"type":"link","label":"Parameter Decorators","href":"/LearningCollection/web/typescript/decorators/parameter-decorators","docId":"web/typescript/decorators/parameter-decorators","unlisted":false}]},{"type":"link","label":"Compiler Configuration","href":"/LearningCollection/web/typescript/compiler-configuration","docId":"web/typescript/compiler-configuration","unlisted":false}],"href":"/LearningCollection/web/typescript/"},{"type":"category","label":"React","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/LearningCollection/web/react/introduction","docId":"web/react/introduction","unlisted":false},{"type":"category","label":"Core Concepts","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Describing UI","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Components","href":"/LearningCollection/web/react/core-concepts/describing-ui/components","docId":"web/react/core-concepts/describing-ui/components","unlisted":false},{"type":"link","label":"Writing Markup with JSX","href":"/LearningCollection/web/react/core-concepts/describing-ui/writing-markup-with-jsx","docId":"web/react/core-concepts/describing-ui/writing-markup-with-jsx","unlisted":false},{"type":"link","label":"JavaScript in JSX","href":"/LearningCollection/web/react/core-concepts/describing-ui/javascript-in-jsx","docId":"web/react/core-concepts/describing-ui/javascript-in-jsx","unlisted":false},{"type":"link","label":"Passing Props","href":"/LearningCollection/web/react/core-concepts/describing-ui/passing-props","docId":"web/react/core-concepts/describing-ui/passing-props","unlisted":false},{"type":"link","label":"Conditional Rendering","href":"/LearningCollection/web/react/core-concepts/describing-ui/conditional-rendering","docId":"web/react/core-concepts/describing-ui/conditional-rendering","unlisted":false},{"type":"link","label":"Rendering Lists","href":"/LearningCollection/web/react/core-concepts/describing-ui/rendering-lists","docId":"web/react/core-concepts/describing-ui/rendering-lists","unlisted":false},{"type":"link","label":"Keeping Components Pure","href":"/LearningCollection/web/react/core-concepts/describing-ui/keeping-components-pure","docId":"web/react/core-concepts/describing-ui/keeping-components-pure","unlisted":false}]},{"type":"link","label":"Styling Components","href":"/LearningCollection/web/react/core-concepts/stylingComponents","docId":"web/react/core-concepts/stylingComponents","unlisted":false},{"type":"link","label":"Functional vs Class Components","href":"/LearningCollection/web/react/core-concepts/functionalVsClassComponents","docId":"web/react/core-concepts/functionalVsClassComponents","unlisted":false}]},{"type":"category","label":"Advanced Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Context","href":"/LearningCollection/web/react/advanced-concepts/context","docId":"web/react/advanced-concepts/context","unlisted":false},{"type":"link","label":"Fragments","href":"/LearningCollection/web/react/advanced-concepts/fragments","docId":"web/react/advanced-concepts/fragments","unlisted":false},{"type":"link","label":"Portals","href":"/LearningCollection/web/react/advanced-concepts/portals","docId":"web/react/advanced-concepts/portals","unlisted":false},{"type":"link","label":"React.memo","href":"/LearningCollection/web/react/advanced-concepts/reactMemo","docId":"web/react/advanced-concepts/reactMemo","unlisted":false},{"type":"link","label":"Error Boundaries","href":"/LearningCollection/web/react/advanced-concepts/errorBoundaries","docId":"web/react/advanced-concepts/errorBoundaries","unlisted":false}]},{"type":"category","label":"Hooks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"useState","href":"/LearningCollection/web/react/hooks/useState","docId":"web/react/hooks/useState","unlisted":false},{"type":"link","label":"useEffect","href":"/LearningCollection/web/react/hooks/useEffect","docId":"web/react/hooks/useEffect","unlisted":false},{"type":"link","label":"useContext","href":"/LearningCollection/web/react/hooks/useContext","docId":"web/react/hooks/useContext","unlisted":false},{"type":"link","label":"useReducer","href":"/LearningCollection/web/react/hooks/useReducer","docId":"web/react/hooks/useReducer","unlisted":false},{"type":"link","label":"useRef","href":"/LearningCollection/web/react/hooks/useRef","docId":"web/react/hooks/useRef","unlisted":false},{"type":"link","label":"Rules of Hooks","href":"/LearningCollection/web/react/hooks/rulesOfHooks","docId":"web/react/hooks/rulesOfHooks","unlisted":false},{"type":"category","label":"Advanced Hooks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"useImperativeHandle","href":"/LearningCollection/web/react/hooks/advanced-hooks/useImperativeHandle","docId":"web/react/hooks/advanced-hooks/useImperativeHandle","unlisted":false},{"type":"link","label":"useCallback","href":"/LearningCollection/web/react/hooks/advanced-hooks/useCallback","docId":"web/react/hooks/advanced-hooks/useCallback","unlisted":false},{"type":"link","label":"useMemo","href":"/LearningCollection/web/react/hooks/advanced-hooks/useMemo","docId":"web/react/hooks/advanced-hooks/useMemo","unlisted":false},{"type":"link","label":"Custom Hooks","href":"/LearningCollection/web/react/hooks/advanced-hooks/customHooks","docId":"web/react/hooks/advanced-hooks/customHooks","unlisted":false}]}]},{"type":"category","label":"React Internals","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Rendering","href":"/LearningCollection/web/react/react-internals/rendering","docId":"web/react/react-internals/rendering","unlisted":false},{"type":"link","label":"Scheduling Updates","href":"/LearningCollection/web/react/react-internals/schedulingUpdates","docId":"web/react/react-internals/schedulingUpdates","unlisted":false}]},{"type":"category","label":"Related Libraries","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"React Router","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/LearningCollection/web/react/related-libraries/react-router/intro","docId":"web/react/related-libraries/react-router/intro","unlisted":false},{"type":"link","label":"React Router Guide","href":"/LearningCollection/web/react/related-libraries/react-router/react-router-guide","docId":"web/react/related-libraries/react-router/react-router-guide","unlisted":false}]},{"type":"category","label":"Mantine","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/LearningCollection/web/react/related-libraries/mantine/intro","docId":"web/react/related-libraries/mantine/intro","unlisted":false}]}]}]},{"type":"category","label":"Lit","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/LearningCollection/web/lit/intro","docId":"web/lit/intro","unlisted":false},{"type":"link","label":"Components","href":"/LearningCollection/web/lit/components","docId":"web/lit/components","unlisted":false},{"type":"link","label":"Context","href":"/LearningCollection/web/lit/context","docId":"web/lit/context","unlisted":false}]},{"type":"category","label":"Static Site Generators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Docusaurus","href":"/LearningCollection/web/static-site-generators/docusaurus","docId":"web/static-site-generators/docusaurus","unlisted":false},{"type":"link","label":"Jekyll","href":"/LearningCollection/web/static-site-generators/jekyll","docId":"web/static-site-generators/jekyll","unlisted":false}]}],"collapsed":true,"collapsible":true},{"type":"category","label":"Databases","items":[{"type":"category","label":"SQL","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Core Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Querying Tables","href":"/LearningCollection/databases/sql/core-concepts/querying-tables","docId":"databases/sql/core-concepts/querying-tables","unlisted":false},{"type":"link","label":"Altering Tables","href":"/LearningCollection/databases/sql/core-concepts/altering-tables","docId":"databases/sql/core-concepts/altering-tables","unlisted":false},{"type":"link","label":"Functions","href":"/LearningCollection/databases/sql/core-concepts/functions","docId":"databases/sql/core-concepts/functions","unlisted":false},{"type":"category","label":"Database Design","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Data Types","href":"/LearningCollection/databases/sql/core-concepts/database-design/data-types","docId":"databases/sql/core-concepts/database-design/data-types","unlisted":false},{"type":"link","label":"Database Schema","href":"/LearningCollection/databases/sql/core-concepts/database-design/database-schema","docId":"databases/sql/core-concepts/database-design/database-schema","unlisted":false},{"type":"link","label":"Table Relationships","href":"/LearningCollection/databases/sql/core-concepts/database-design/table-relationships","docId":"databases/sql/core-concepts/database-design/table-relationships","unlisted":false},{"type":"link","label":"Normalization","href":"/LearningCollection/databases/sql/core-concepts/database-design/normalization","docId":"databases/sql/core-concepts/database-design/normalization","unlisted":false},{"type":"link","label":"Fact vs Dimension Tables","href":"/LearningCollection/databases/sql/core-concepts/database-design/fact-vs-dimension-tables","docId":"databases/sql/core-concepts/database-design/fact-vs-dimension-tables","unlisted":false},{"type":"link","label":"Performance","href":"/LearningCollection/databases/sql/core-concepts/database-design/performance","docId":"databases/sql/core-concepts/database-design/performance","unlisted":false}]}]},{"type":"category","label":"Advanced Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Subqueries","href":"/LearningCollection/databases/sql/advanced-concepts/subqueries","docId":"databases/sql/advanced-concepts/subqueries","unlisted":false},{"type":"link","label":"Object-Relational Mapping (ORM)","href":"/LearningCollection/databases/sql/advanced-concepts/object-relational-mapping","docId":"databases/sql/advanced-concepts/object-relational-mapping","unlisted":false}]}],"href":"/LearningCollection/databases/sql/"},{"type":"category","label":"MongoDB","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Important Mongo Shell Commands","href":"/LearningCollection/databases/mongodb/mongoShellCommands","docId":"databases/mongodb/mongoShellCommands","unlisted":false},{"type":"link","label":"Authentication","href":"/LearningCollection/databases/mongodb/authentication","docId":"databases/mongodb/authentication","unlisted":false},{"type":"category","label":"C# Driver","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Limit","href":"/LearningCollection/databases/mongodb/c-sharp-driver/limit","docId":"databases/mongodb/c-sharp-driver/limit","unlisted":false},{"type":"link","label":"Distinct","href":"/LearningCollection/databases/mongodb/c-sharp-driver/distinct","docId":"databases/mongodb/c-sharp-driver/distinct","unlisted":false},{"type":"link","label":"Data Type Limitations","href":"/LearningCollection/databases/mongodb/c-sharp-driver/dataTypeLimitations","docId":"databases/mongodb/c-sharp-driver/dataTypeLimitations","unlisted":false}]},{"type":"category","label":"M001 MongoDB Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/LearningCollection/databases/mongodb/m001-mongodb-basics/mongoDbBasics","docId":"databases/mongodb/m001-mongodb-basics/mongoDbBasics","unlisted":false},{"type":"link","label":"Documents and Collections","href":"/LearningCollection/databases/mongodb/m001-mongodb-basics/documentsAndCollections","docId":"databases/mongodb/m001-mongodb-basics/documentsAndCollections","unlisted":false},{"type":"link","label":"Importing and Exporting data","href":"/LearningCollection/databases/mongodb/m001-mongodb-basics/importingExportingData","docId":"databases/mongodb/m001-mongodb-basics/importingExportingData","unlisted":false},{"type":"link","label":"Querying, Creating, Updating and Deleting documents with Mongo shell","href":"/LearningCollection/databases/mongodb/m001-mongodb-basics/queryingCreatingUpdatingDeleting","docId":"databases/mongodb/m001-mongodb-basics/queryingCreatingUpdatingDeleting","unlisted":false},{"type":"link","label":"Advanced CRUD operations","href":"/LearningCollection/databases/mongodb/m001-mongodb-basics/advancedCrudOperations","docId":"databases/mongodb/m001-mongodb-basics/advancedCrudOperations","unlisted":false},{"type":"link","label":"Indexing and Aggregation Pipeline","href":"/LearningCollection/databases/mongodb/m001-mongodb-basics/IndexingAggregationsPipeline","docId":"databases/mongodb/m001-mongodb-basics/IndexingAggregationsPipeline","unlisted":false}]},{"type":"category","label":"M220N MongoDB for .NET Developers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/m220n","docId":"databases/mongodb/m220n-mongodb-for-dotnet-developers/m220n","unlisted":false},{"type":"link","label":"Getting Started","href":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/gettingStarted","docId":"databases/mongodb/m220n-mongodb-for-dotnet-developers/gettingStarted","unlisted":false},{"type":"link","label":"Using the Driver","href":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/usingTheDriver","docId":"databases/mongodb/m220n-mongodb-for-dotnet-developers/usingTheDriver","unlisted":false},{"type":"link","label":"User-Facing Backend","href":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/userFacingBackend","docId":"databases/mongodb/m220n-mongodb-for-dotnet-developers/userFacingBackend","unlisted":false},{"type":"link","label":"Admin Backend","href":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/adminBackend","docId":"databases/mongodb/m220n-mongodb-for-dotnet-developers/adminBackend","unlisted":false},{"type":"link","label":"Resiliency","href":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/resiliency","docId":"databases/mongodb/m220n-mongodb-for-dotnet-developers/resiliency","unlisted":false},{"type":"link","label":"Notes on MongoDB","href":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/notesOnMongoDB","docId":"databases/mongodb/m220n-mongodb-for-dotnet-developers/notesOnMongoDB","unlisted":false}]}]}],"collapsed":true,"collapsible":true},{"type":"category","label":"Tools","items":[{"type":"category","label":"Git","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Tags","href":"/LearningCollection/tools/git/tags","docId":"tools/git/tags","unlisted":false}]},{"type":"category","label":"Ansible","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/LearningCollection/tools/ansible/tools-ansible-installation","docId":"tools/ansible/tools-ansible-installation","unlisted":false},{"type":"link","label":"Terminology","href":"/LearningCollection/tools/ansible/tools-ansible-terminology","docId":"tools/ansible/tools-ansible-terminology","unlisted":false},{"type":"link","label":"Control Node Environment","href":"/LearningCollection/tools/ansible/tools-ansible-control-node-environment","docId":"tools/ansible/tools-ansible-control-node-environment","unlisted":false},{"type":"link","label":"Important CLI commands","href":"/LearningCollection/tools/ansible/tools-ansible-cli-commands","docId":"tools/ansible/tools-ansible-cli-commands","unlisted":false},{"type":"link","label":"Writing Playbooks","href":"/LearningCollection/tools/ansible/tools-ansible-writing-playbooks","docId":"tools/ansible/tools-ansible-writing-playbooks","unlisted":false}]},{"type":"link","label":"ANTLR","href":"/LearningCollection/tools/antlr","docId":"tools/antlr","unlisted":false},{"type":"link","label":"Jupyter Hub","href":"/LearningCollection/tools/jupyterhub","docId":"tools/jupyterhub","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Linux","items":[{"type":"link","label":"Commonly Used Commands","href":"/LearningCollection/linux/commonlyUsedCommands","docId":"linux/commonlyUsedCommands","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Interesting Topics","href":"/LearningCollection/interesting-topics","docId":"interesting-topics","unlisted":false}]},"docs":{"apis/graphql/advanced-concepts/introspection":{"id":"apis/graphql/advanced-concepts/introspection","title":"Introspection","description":"The designers of the schema already know what the schema looks like but how can clients discover what is accessible through a GraphQL API? We can ask GraphQL for this information by querying the schema meta-field, which is always available on the root type of a Query per the spec.","sidebar":"docs"},"apis/graphql/advanced-concepts/miscellaneous-concepts":{"id":"apis/graphql/advanced-concepts/miscellaneous-concepts","title":"Miscellaneous Concepts","description":"There are many more concepts in GraphQL, this page introduces some of them.","sidebar":"docs"},"apis/graphql/advanced-concepts/security":{"id":"apis/graphql/advanced-concepts/security","title":"Security","description":"Since clients have the possibility to craft very complex queries, a GraphQL server must be ready to handle them properly. These queries may be abusive queries from evil clients, or may simply be very large queries used by legitimate clients. In both of these cases, the client can potentially take your GraphQL server down.","sidebar":"docs"},"apis/graphql/architecture":{"id":"apis/graphql/architecture","title":"Architecture","description":"GraphQL has been released only as a specification. This means that GraphQL is in fact not more than a long document that describes in detail the behavior of a GraphQL server.","sidebar":"docs"},"apis/graphql/clients":{"id":"apis/graphql/clients","title":"Clients","description":"Working with a GraphQL API on the frontend is a great opportunity to develop new abstractions and help implement common functionality on the client-side. Let\u2019s consider some \u201cinfrastructure\u201d features that you probably want to have in your app:","sidebar":"docs"},"apis/graphql/core-concepts":{"id":"apis/graphql/core-concepts","title":"Core Concepts","description":"GraphQL has a few core concepts that are important to understanding how it works. These core concepts are explained here.","sidebar":"docs"},"apis/graphql/intro":{"id":"apis/graphql/intro","title":"Introduction","description":"GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools. GraphQL was developed and open-sourced by Facebook.","sidebar":"docs"},"apis/graphql/pagination":{"id":"apis/graphql/pagination","title":"Pagination","description":"Often, sets of data are too large to pass them directly to the consumer of our service. Pagination solves this problem by giving the consumer the ability to fetch a set in chunks. The current landscape of the pagination in GraphQL is hugely influenced by the Relay spec for Connections.","sidebar":"docs"},"apis/graphql/schemas-and-types/fragments":{"id":"apis/graphql/schemas-and-types/fragments","title":"Fragments","description":"Fragments let you construct sets of fields, and then include them in queries where you need to. Here\u2019s an example:","sidebar":"docs"},"apis/graphql/schemas-and-types/interfaces":{"id":"apis/graphql/schemas-and-types/interfaces","title":"Interfaces","description":"Like many type systems, GraphQL supports interfaces. An Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface.","sidebar":"docs"},"apis/graphql/schemas-and-types/unions":{"id":"apis/graphql/schemas-and-types/unions","title":"Unions","description":"Union types share similarities with interfaces; however, they lack the ability to define any shared fields among the constituent types.","sidebar":"docs"},"apis/graphql/server":{"id":"apis/graphql/server","title":"Server","description":"GraphQL is often explained as a frontend-focused API technology because it enables clients to get data in a much nicer way than before. But the API itself is, of course, implemented on the server side. There are a lot of benefits to be had on the server as well because GraphQL enables the server developer to focus on describing the data available rather than implementing and optimizing specific endpoints.","sidebar":"docs"},"cloud/aws/certified-developer-associate/cloud-overview":{"id":"cloud/aws/certified-developer-associate/cloud-overview","title":"Cloud Overview","description":"AWS Regions","sidebar":"docs"},"cloud/aws/certified-developer-associate/ec2":{"id":"cloud/aws/certified-developer-associate/ec2","title":"Elastic Compute Cloud (EC2)","description":"EC2 is the Infrastructure as a Service offering of AWS. It mainly consists in the capability of:","sidebar":"docs"},"cloud/aws/certified-developer-associate/elasti-cache":{"id":"cloud/aws/certified-developer-associate/elasti-cache","title":"ElastiCache","description":"- ElastiCache is a managed Valkey-/Memcached-/Redis data store","sidebar":"docs"},"cloud/aws/certified-developer-associate/elastic-beanstalk":{"id":"cloud/aws/certified-developer-associate/elastic-beanstalk","title":"Elastic Beanstalk","description":"What is Elastic Beanstalk:","sidebar":"docs"},"cloud/aws/certified-developer-associate/elb":{"id":"cloud/aws/certified-developer-associate/elb","title":"Elastic Load Balancing (ELB)","description":"Scalability & High Availability","sidebar":"docs"},"cloud/aws/certified-developer-associate/exam-scoring":{"id":"cloud/aws/certified-developer-associate/exam-scoring","title":"Exam Scoring","description":"The exam is scored as follows:","sidebar":"docs"},"cloud/aws/certified-developer-associate/iam":{"id":"cloud/aws/certified-developer-associate/iam","title":"Identity and Access Management (IAM)","description":"Users and Groups","sidebar":"docs"},"cloud/aws/certified-developer-associate/relational-databases":{"id":"cloud/aws/certified-developer-associate/relational-databases","title":"Relational Databases (RDS/Aurora)","description":"Relational Database Service (RDS)","sidebar":"docs"},"csharp/advanced-concepts/asynchronous-code/asyncProgramming":{"id":"csharp/advanced-concepts/asynchronous-code/asyncProgramming","title":"Asynchronous Programming","description":"- If you have any I/O-bound needs (such as requesting data from a network or accessing a database), you\'ll want to utilize asynchronous programming","sidebar":"docs"},"csharp/advanced-concepts/asynchronous-code/task-factory-start-new":{"id":"csharp/advanced-concepts/asynchronous-code/task-factory-start-new","title":"Task.Factory.StartNew()","description":"TODO: Improve this documentation","sidebar":"docs"},"csharp/advanced-concepts/attributes":{"id":"csharp/advanced-concepts/attributes","title":"Attributes","description":"TODO","sidebar":"docs"},"csharp/advanced-concepts/classes/assemblyClass":{"id":"csharp/advanced-concepts/classes/assemblyClass","title":"Assembly","description":"- Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application (in more simple terms: A chunk of (precompiled) code that can be executed by the .NET runtime environment. A .NET program consists of one or more assemblies)","sidebar":"docs"},"csharp/advanced-concepts/classes/manResetEvent":{"id":"csharp/advanced-concepts/classes/manResetEvent","title":"ManualResetEvent","description":"- Represents a thread synchronization event that, when signaled, must be reset manually","sidebar":"docs"},"csharp/advanced-concepts/serialization":{"id":"csharp/advanced-concepts/serialization","title":"Serialization","description":"Definition","sidebar":"docs"},"csharp/advanced-concepts/unmanagedConstraint":{"id":"csharp/advanced-concepts/unmanagedConstraint","title":"Unmanaged constraint","description":"The unmanaged constraint feature will give language enforcement to the class of types known as \\"unmanaged types\\" in the C# language spec. This is defined in section 18.2 as a type which is not a reference type and doesn\'t contain reference type fields at any level of nesting.","sidebar":"docs"},"csharp/advanced-concepts/unmanagedVsManagedResources":{"id":"csharp/advanced-concepts/unmanagedVsManagedResources","title":"Unmanaged vs managed resources","description":"- Managed resources basically means \\"managed memory\\" that is managed by the garbage collector.","sidebar":"docs"},"csharp/advanced-concepts/volatileKeyword":{"id":"csharp/advanced-concepts/volatileKeyword","title":"Volatile Keyword","description":"- the volatile keyword indicates that a field might be modified by multiple threads that are executing at the same time","sidebar":"docs"},"csharp/architectural-patterns/model-view-controller":{"id":"csharp/architectural-patterns/model-view-controller","title":"Model-View-Controller (MVC)","description":"The Model-View-Controller (MVC) is an architectural pattern that separates an application into three main logical components:","sidebar":"docs"},"csharp/architectural-patterns/repository-pattern":{"id":"csharp/architectural-patterns/repository-pattern","title":"Repository Pattern","description":"The Repository pattern is a Domain-Driven Design pattern intended to keep persistence concerns outside of the system\'s domain model. One or more persistence abstractions - interfaces - are defined in the domain model, and these abstractions have implementations in the form of persistence-specific adapters defined elsewhere in the application.","sidebar":"docs"},"csharp/asp-net/advanced-concepts/formatters":{"id":"csharp/asp-net/advanced-concepts/formatters","title":"Formatters","description":"ASP.NET Core MVC supports data exchange in Web APIs using input and output formatters. Input formatters are used by Model Binding. Output formatters are used to format responses.","sidebar":"docs"},"csharp/asp-net/advanced-concepts/logging":{"id":"csharp/asp-net/advanced-concepts/logging","title":"Logging","description":"Logging providers store logs, except for the Console provider which displays logs. For example, the Azure Application Insights provider stores logs in Azure Application Insights. Multiple providers can be enabled.","sidebar":"docs"},"csharp/asp-net/core-concepts/api-errors":{"id":"csharp/asp-net/core-concepts/api-errors","title":"API Errors","description":"For communicating the errors and exceptions to our API clients, we should specify a response format. In some cases, we would also like to let our users know what actually happened when something went wrong, instead of just telling them it was a 404 or 500 error. IETF RFC 7807 addresses this topic and creates a standardized format by specifying the Problem Details object.","sidebar":"docs"},"csharp/asp-net/core-concepts/asp-net-rest-apis":{"id":"csharp/asp-net/core-concepts/asp-net-rest-apis","title":"ASP.NET REST APIs","description":"ASP.NET Core supports building RESTful services, also known as web APIs, using C#.","sidebar":"docs"},"csharp/asp-net/core-concepts/configuration":{"id":"csharp/asp-net/core-concepts/configuration","title":"Configuration","description":"Application configuration in ASP.NET Core is performed using one or more configuration providers. Configuration providers read configuration data from key-value pairs using a variety of configuration sources:"},"csharp/asp-net/core-concepts/controllers":{"id":"csharp/asp-net/core-concepts/controllers","title":"Controllers","description":"Controllers in a web API are classes that derive from ControllerBase. Controllers are activated and disposed on a per request basis.","sidebar":"docs"},"csharp/asp-net/core-concepts/dependency-injection":{"id":"csharp/asp-net/core-concepts/dependency-injection","title":"Dependency Injection","description":"ASP.NET Core supports the dependency injection (DI) software design pattern, which is a technique for achieving Inversion of Control (IoC) between classes and their dependencies.","sidebar":"docs"},"csharp/asp-net/core-concepts/handling-files":{"id":"csharp/asp-net/core-concepts/handling-files","title":"Handling Files","description":"ASP.NET Web APIs are able to accept and return files. This page explains how this can be achieved.","sidebar":"docs"},"csharp/asp-net/core-concepts/introduction":{"id":"csharp/asp-net/core-concepts/introduction","title":"Introduction","description":"ASP.NET extends the .NET platform with tools and libraries specifically for building web apps.","sidebar":"docs"},"csharp/asp-net/core-concepts/parameter-binding":{"id":"csharp/asp-net/core-concepts/parameter-binding","title":"Parameter Binding","description":"An API often wants to be able to accept certain data with a request. For instance to retrieve a book from the following endpoint, we need to provide the bookId:","sidebar":"docs"},"csharp/asp-net/core-concepts/partial-updates":{"id":"csharp/asp-net/core-concepts/partial-updates","title":"Partial updates","description":"There are often times when we want to only update certain parts of an entity. It is therefore not ideal that we need to supply all data of an entity with every update. Instead it would be better to just provide the partial data that we want to update. The JSON Patch standard solves this problem by describing changes to a JSON document.","sidebar":"docs"},"csharp/asp-net/core-concepts/routing":{"id":"csharp/asp-net/core-concepts/routing","title":"Routing","description":"Routing is responsible for matching incoming HTTP requests and dispatching those requests to the app\'s executable endpoints.","sidebar":"docs"},"csharp/asp-net/core-concepts/validating-input":{"id":"csharp/asp-net/core-concepts/validating-input","title":"Validating Input","description":"If you ask users to enter information in a page \u2014 for example, into a form \u2014 it\'s important to make sure that the values that they enter are valid. For example, you don\'t want to process a form that\'s missing critical information. ASP.NET uses annotations for this data validation.","sidebar":"docs"},"csharp/comparisons/memVsFileStream":{"id":"csharp/comparisons/memVsFileStream","title":"Memory Stream vs FileStream","description":"- Stream is a representation of bytes","sidebar":"docs"},"csharp/comparisons/private-protected-vs-protected-internal":{"id":"csharp/comparisons/private-protected-vs-protected-internal","title":"private protected vs protected internal","description":"Before C# 7.2 we had protected internal modifier:","sidebar":"docs"},"csharp/comparisons/propsVsPublicVars":{"id":"csharp/comparisons/propsVsPublicVars","title":"Properties vs Public variables","description":"vs","sidebar":"docs"},"csharp/comparisons/threadVsTask":{"id":"csharp/comparisons/threadVsTask","title":"Thread vs Task","description":"Thread: lower level concept, always a seperate Thread rather than executing on the Treadpool -> actual OS-level Thread with own stack + kernel ressources","sidebar":"docs"},"csharp/core-concepts/closures":{"id":"csharp/core-concepts/closures","title":"Closures","description":"StackOverflow","sidebar":"docs"},"csharp/core-concepts/events":{"id":"csharp/core-concepts/events","title":"Events","description":"- A mechanism for communication between objects","sidebar":"docs"},"csharp/core-concepts/generics":{"id":"csharp/core-concepts/generics","title":"Generics","description":"- Use generic types to maximize code reuse, type safety, and performance","sidebar":"docs"},"csharp/core-concepts/inheritance":{"id":"csharp/core-concepts/inheritance","title":"Inheritance","description":"In C#, a class hierarchy can be defined using inheritance, which allows a derived class (e.g. Car) to inherit the behavior and data of its parent class (e.g. Vehicle). If no parent is specified, the class inherits from the object class.","sidebar":"docs"},"csharp/core-concepts/interfaces/ienumerable":{"id":"csharp/core-concepts/interfaces/ienumerable","title":"IEnumerable","description":"- Exposes an enumerator, which supports a simple iteration over a non-generic collection","sidebar":"docs"},"csharp/core-concepts/nullability":{"id":"csharp/core-concepts/nullability","title":"Nullability","description":"In C#, the null literal is used to denote the absence of a value. A nullable type is a type that allows for null values.","sidebar":"docs"},"csharp/core-concepts/operators/null-coalescing-operator":{"id":"csharp/core-concepts/operators/null-coalescing-operator","title":"Null-coalescing operator (??)","description":"- returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand","sidebar":"docs"},"csharp/core-concepts/operators/null-conditional-operator":{"id":"csharp/core-concepts/operators/null-conditional-operator","title":"Null-conditional operator (?)","description":"- Tests the value of the left-hand operand for null before performing a member access (?.) or index (?[]) operation","sidebar":"docs"},"csharp/core-concepts/operators/range-operator":{"id":"csharp/core-concepts/operators/range-operator","title":"Range Operator (..)","description":"The .. operator specifies the start and end of a range of indices as its operands. The range operator is used to specify the start and end of a range for a sequence.","sidebar":"docs"},"csharp/core-concepts/types/arrays":{"id":"csharp/core-concepts/types/arrays","title":"Arrays","description":"You can store multiple variables of the same type in an array data structure. You declare an array by specifying the type of its elements. If you want the array to store elements of any type, you can specify object as its type. In the unified type system of C#, all types, predefined and user-defined, reference types and value types, inherit directly or indirectly from Object.","sidebar":"docs"},"csharp/core-concepts/types/datetimes":{"id":"csharp/core-concepts/types/datetimes","title":"DateTimes","description":"The DateTime type represents dates and times with values ranging from 0000 (midnight), January 1, 0001 Anno Domini (Common Era) through 1159 P.M., December 31, 9999 A.D. (C.E.) in the Gregorian calendar.","sidebar":"docs"},"csharp/core-concepts/types/enums":{"id":"csharp/core-concepts/types/enums","title":"Enums","description":"An Enum type defines a set of constant values. The following enum declares constants that define different root vegetables:","sidebar":"docs"},"csharp/core-concepts/types/introduction":{"id":"csharp/core-concepts/types/introduction","title":"Introduction","description":"A type defines the structure and behavior of any data in C#. The declaration of a type may include its members, base type, interfaces it implements, and operations permitted for that type. A variable is a label that refers to an instance of a specific type.","sidebar":"docs"},"csharp/core-concepts/types/tuples":{"id":"csharp/core-concepts/types/tuples","title":"Tuples","description":"In C#, a tuple is a data structure which organizes data, holding two or more fields of any type. A tuple is typically created by placing 2 or more expressions separated by commas, within a set of parentheses:","sidebar":"docs"},"csharp/dotnet-versions/dotnet6":{"id":"csharp/dotnet-versions/dotnet6","title":".Net 6","description":"This page convers the most important changes introduced in .Net 6 (in my view).","sidebar":"docs"},"csharp/dotnet-versions/dotnet7":{"id":"csharp/dotnet-versions/dotnet7","title":".Net 7","description":"This page covers the most important changes introduced in .Net 7 (in my view).","sidebar":"docs"},"csharp/dotnet-versions/netstandardVsNetcoreVsUwp":{"id":"csharp/dotnet-versions/netstandardVsNetcoreVsUwp","title":".Net Core vs .Net Standard vs UWP","description":"Major Frameworks","sidebar":"docs"},"csharp/entity-framework/creating-a-model/entity-types":{"id":"csharp/entity-framework/creating-a-model/entity-types","title":"Entity types","description":"Including a DbSet of a type on your context means that it is included in EF Core\'s model; we usually refer to such a type as an entity. EF Core can read and write entity instances from/to the database, and if you\'re using a relational database, EF Core can create tables for your entities via migrations.","sidebar":"docs"},"csharp/entity-framework/creating-a-model/overview":{"id":"csharp/entity-framework/creating-a-model/overview","title":"Overview","description":"EF Core uses a metadata model to describe how the application\'s entity types are mapped to the underlying database. This model is built using a set of conventions - heuristics that look for common patterns.","sidebar":"docs"},"csharp/entity-framework/creating-a-model/relationships":{"id":"csharp/entity-framework/creating-a-model/relationships","title":"Relationships","description":"In relational databases, relationships (also called associations) between tables are defined through foreign keys. A foreign key (FK) is a column or combination of columns that is used to establish and enforce a link between the data in two tables. The foreign key refers to the primary key in another table.","sidebar":"docs"},"csharp/entity-framework/db-context":{"id":"csharp/entity-framework/db-context","title":"DbContext","description":"The DbContext lifetime","sidebar":"docs"},"csharp/entity-framework/introduction":{"id":"csharp/entity-framework/introduction","title":"Introduction","description":"Entity Framework (EF) Core is a lightweight, extensible, open source and cross-platform version of the Entity Framework data access technology. EF Core can serve as an object-relational mapper (O/RM), which:","sidebar":"docs"},"csharp/entity-framework/migrations":{"id":"csharp/entity-framework/migrations","title":"Migrations","description":"In real world projects, data models change as features get implemented: new entities or properties are added and removed, and database schemas need to be changed accordingly to be kept in sync with the application. The migrations feature in EF Core provides a way to incrementally update the database schema to keep it in sync with the application\'s data model while preserving existing data in the database.","sidebar":"docs"},"csharp/entity-framework/querying-data/basic-querying":{"id":"csharp/entity-framework/querying-data/basic-querying","title":"Basic Querying","description":"Entity Framework Core uses Language-Integrated Query (LINQ) to query data from the database. EF Core passes a representation of the LINQ query to the database provider. Database providers in turn translate it to database-specific query language (for example, SQL for a relational database). Queries are always executed against the database even if the entities returned in the result already exist in the context.","sidebar":"docs"},"csharp/entity-framework/querying-data/deleting-data":{"id":"csharp/entity-framework/querying-data/deleting-data","title":"Deleting Data","description":"To remove an entity from the database we can do the following:","sidebar":"docs"},"csharp/entity-framework/querying-data/inserting-data":{"id":"csharp/entity-framework/querying-data/inserting-data","title":"Inserting Data","description":"The key methods for adding/inserting entities via the DbContext are Add and AddRange.","sidebar":"docs"},"csharp/entity-framework/querying-data/tracking-behavior":{"id":"csharp/entity-framework/querying-data/tracking-behavior","title":"Tracking Behavior","description":"Tracking behavior controls if Entity Framework Core keeps information about an entity instance in its change tracker. If an entity is tracked:","sidebar":"docs"},"csharp/entity-framework/querying-data/updating-data":{"id":"csharp/entity-framework/querying-data/updating-data","title":"Updating Data","description":"There are multiple ways to update data in EF Core. The simplest way may be to query the data to update first and then to update it in a second operation:","sidebar":"docs"},"csharp/entity-framework/testing/integration-testing":{"id":"csharp/entity-framework/testing/integration-testing","title":"Integration Testing","description":"When doing integration testing for an Entity Framework project it is a common approach to add an appsettings.json specific to the integration test environment in the application. While this approach can work, it makes more sense for the application to not have to know anything about the testing environment.","sidebar":"docs"},"csharp/introduction":{"id":"csharp/introduction","title":"Introduction","description":"C# (pronounced \\"See Sharp\\") is an object-oriented, and type-safe programming language, which means that everything has a type at compile-time. Several C# features help create robust and durable applications:","sidebar":"docs"},"csharp/libraries/hot-chocolate/advanced-concepts/errors":{"id":"csharp/libraries/hot-chocolate/advanced-concepts/errors","title":"Errors","description":"There are several ways to handle errors with HotChocolate. They are passed to the query result by returning an instance of IError or an enumerable of IError in a field resolver. This can be done in two ways:","sidebar":"docs"},"csharp/libraries/hot-chocolate/advanced-concepts/extending-types":{"id":"csharp/libraries/hot-chocolate/advanced-concepts/extending-types","title":"Extending Types","description":"Type extensions allow us to add, remove or replace fields on existing types, without necessarily needing access to these types. Because of these capabilities, they also allow for better organization of our types. We could for example have classes that encapsulate part of our domain and extend our Query type with these functionalities.","sidebar":"docs"},"csharp/libraries/hot-chocolate/data-loaders":{"id":"csharp/libraries/hot-chocolate/data-loaders","title":"Data Loaders","description":"ataLoader is a generic utility to be used as part of the application\'s data fetching layer to provide a consistent API over various backends and reduce requests to those backends via batching and caching. It helps you to avoid the N+1 problem.","sidebar":"docs"},"csharp/libraries/hot-chocolate/introduction":{"id":"csharp/libraries/hot-chocolate/introduction","title":"Introduction","description":"Hot Chocolate is an open-source GraphQL server for .NET which is compatible with all GraphQL compliant clients like Strawberry Shake, Relay, Apollo Client, and various other GraphQL clients and tools. It takes away a lot of complexity so that building an application is faster.","sidebar":"docs"},"csharp/libraries/hot-chocolate/mutations":{"id":"csharp/libraries/hot-chocolate/mutations","title":"Mutations","description":"The mutation type in GraphQL is used to mutate/change data.","sidebar":"docs"},"csharp/libraries/hot-chocolate/pagination":{"id":"csharp/libraries/hot-chocolate/pagination","title":"Pagination","description":"HotChocolate supports both offset and cursor based pagination. The cursor based pagination is based on the Relay spec.","sidebar":"docs"},"csharp/libraries/hot-chocolate/queries":{"id":"csharp/libraries/hot-chocolate/queries","title":"Queries","description":"The query type in GraphQL represents a read-only view of all of our entities and ways to retrieve them.","sidebar":"docs"},"csharp/libraries/hot-chocolate/resolvers":{"id":"csharp/libraries/hot-chocolate/resolvers","title":"Resolvers","description":"Resolvers are the main building blocks when it comes to fetching data. Every field in our GraphQL schema is backed by such a resolver function, responsible for returning the field\'s value. Since a resolver is just a function, we can use it to retrieve data from a database, a REST service, or any other data source as needed.","sidebar":"docs"},"csharp/libraries/hot-chocolate/subscriptions":{"id":"csharp/libraries/hot-chocolate/subscriptions","title":"Subscriptions","description":"GraphQL subscriptions provide real-time functionality to applications by allowing clients to subscribe to specific events. When these events trigger, the server immediately sends updates to the subscribed clients.","sidebar":"docs"},"csharp/libraries/hot-chocolate/types/enums":{"id":"csharp/libraries/hot-chocolate/types/enums","title":"Enums","description":"An Enum is a special kind of scalar that is restricted to a particular set of allowed values. It can be used as both an input and an output type.","sidebar":"docs"},"csharp/libraries/hot-chocolate/types/input-objects":{"id":"csharp/libraries/hot-chocolate/types/input-objects","title":"Input Objects","description":"GraphQL defines input object types to allow us to use objects as arguments on our fields.","sidebar":"docs"},"csharp/libraries/hot-chocolate/types/interfaces":{"id":"csharp/libraries/hot-chocolate/types/interfaces","title":"Interfaces","description":"An interface is an abstract type that defines a certain set of fields that an object type or another interface must include to implement the interface. Interfaces can only be used as output types, meaning we can\'t use interfaces as arguments or as fields on input object types.","sidebar":"docs"},"csharp/libraries/hot-chocolate/types/scalars":{"id":"csharp/libraries/hot-chocolate/types/scalars","title":"Scalars","description":"Scalar types are the primitives of our schema and can hold a specific type of data. They are leaf types, meaning we cannot use e.g. { fieldName } to further drill down into the type. The main purpose of a scalar is to define how a value is serialized and deserialized.","sidebar":"docs"},"csharp/libraries/hot-chocolate/types/unions":{"id":"csharp/libraries/hot-chocolate/types/unions","title":"Unions","description":"A union type represents a set of object types. It is very similar to an interface, except that there is no requirement for common fields between the specified types.","sidebar":"docs"},"csharp/libraries/system-text-json":{"id":"csharp/libraries/system-text-json","title":"System.Text.Json","description":"Provides high-performance, low-allocating, and standards-compliant capabilities to process JavaScript Object Notation (JSON), which includes serializing objects to JSON text and deserializing JSON text to objects, with UTF-8 support built-in.","sidebar":"docs"},"databases/mongodb/authentication":{"id":"databases/mongodb/authentication","title":"Authentication","description":"1. Enable authorization in the config","sidebar":"docs"},"databases/mongodb/c-sharp-driver/dataTypeLimitations":{"id":"databases/mongodb/c-sharp-driver/dataTypeLimitations","title":"Data Type Limitations","description":"MongoDB stores data in BSON format. The BSON format has 21 data types.","sidebar":"docs"},"databases/mongodb/c-sharp-driver/distinct":{"id":"databases/mongodb/c-sharp-driver/distinct","title":"Distinct","description":"The Limit method operates on the IFindFluent interface. It limits the number of documents to query from the database.","sidebar":"docs"},"databases/mongodb/c-sharp-driver/limit":{"id":"databases/mongodb/c-sharp-driver/limit","title":"Limit","description":"The Limit method operates on the IFindFluent interface. It limits the number of documents to query from the database.","sidebar":"docs"},"databases/mongodb/m001-mongodb-basics/advancedCrudOperations":{"id":"databases/mongodb/m001-mongodb-basics/advancedCrudOperations","title":"Advanced CRUD operations","description":"MQL Operators","sidebar":"docs"},"databases/mongodb/m001-mongodb-basics/documentsAndCollections":{"id":"databases/mongodb/m001-mongodb-basics/documentsAndCollections","title":"Documents and Collections","description":"What is a document?","sidebar":"docs"},"databases/mongodb/m001-mongodb-basics/importingExportingData":{"id":"databases/mongodb/m001-mongodb-basics/importingExportingData","title":"Importing and Exporting data","description":"Example","sidebar":"docs"},"databases/mongodb/m001-mongodb-basics/IndexingAggregationsPipeline":{"id":"databases/mongodb/m001-mongodb-basics/IndexingAggregationsPipeline","title":"Indexing and Aggregation Pipeline","description":"Aggregation Framework","sidebar":"docs"},"databases/mongodb/m001-mongodb-basics/mongoDbBasics":{"id":"databases/mongodb/m001-mongodb-basics/mongoDbBasics","title":"Introduction","description":"What is MongoDB?","sidebar":"docs"},"databases/mongodb/m001-mongodb-basics/queryingCreatingUpdatingDeleting":{"id":"databases/mongodb/m001-mongodb-basics/queryingCreatingUpdatingDeleting","title":"Querying, Creating, Updating and Deleting documents with Mongo shell","description":"Querying data","sidebar":"docs"},"databases/mongodb/m220n-mongodb-for-dotnet-developers/adminBackend":{"id":"databases/mongodb/m220n-mongodb-for-dotnet-developers/adminBackend","title":"Admin Backend","description":"Read Concerns","sidebar":"docs"},"databases/mongodb/m220n-mongodb-for-dotnet-developers/gettingStarted":{"id":"databases/mongodb/m220n-mongodb-for-dotnet-developers/gettingStarted","title":"Getting Started","description":"Establishing a connection with the C# MongoDB driver:","sidebar":"docs"},"databases/mongodb/m220n-mongodb-for-dotnet-developers/m220n":{"id":"databases/mongodb/m220n-mongodb-for-dotnet-developers/m220n","title":"Introduction","description":"Topics","sidebar":"docs"},"databases/mongodb/m220n-mongodb-for-dotnet-developers/notesOnMongoDB":{"id":"databases/mongodb/m220n-mongodb-for-dotnet-developers/notesOnMongoDB","title":"Notes on MongoDB","description":"ObjectId","sidebar":"docs"},"databases/mongodb/m220n-mongodb-for-dotnet-developers/resiliency":{"id":"databases/mongodb/m220n-mongodb-for-dotnet-developers/resiliency","title":"Resiliency","description":"Connection pooling","sidebar":"docs"},"databases/mongodb/m220n-mongodb-for-dotnet-developers/userFacingBackend":{"id":"databases/mongodb/m220n-mongodb-for-dotnet-developers/userFacingBackend","title":"User-Facing Backend","description":"Aggregation Pipeline","sidebar":"docs"},"databases/mongodb/m220n-mongodb-for-dotnet-developers/usingTheDriver":{"id":"databases/mongodb/m220n-mongodb-for-dotnet-developers/usingTheDriver","title":"Using the Driver","description":"mflix project structure","sidebar":"docs"},"databases/mongodb/mongoShellCommands":{"id":"databases/mongodb/mongoShellCommands","title":"Important Mongo Shell Commands","description":"- Select database: use","sidebar":"docs"},"databases/sql/advanced-concepts/object-relational-mapping":{"id":"databases/sql/advanced-concepts/object-relational-mapping","title":"Object-Relational Mapping (ORM)","description":"An Object-Relational Mapping or an ORM for short, is a tool that allows you to perform CRUD operations on a database using a traditional programming language. These typically come in the form of a library or framework that you would use in your backend code.","sidebar":"docs"},"databases/sql/advanced-concepts/subqueries":{"id":"databases/sql/advanced-concepts/subqueries","title":"Subqueries","description":"Subqueries (also known as inner queries or nested queries) are a tool for performing operations in multiple steps. For example, if you wanted to take the sums of several columns, then average all of those values, you\'d need to do each aggregation in a distinct step.","sidebar":"docs"},"databases/sql/core-concepts/altering-tables":{"id":"databases/sql/core-concepts/altering-tables","title":"Altering Tables","description":"INSERT statement","sidebar":"docs"},"databases/sql/core-concepts/database-design/data-types":{"id":"databases/sql/core-concepts/database-design/data-types","title":"Data Types","description":"SQL as a language can support many different data types. However, the datatypes that your database management system (DBMS) supports will vary depending on the specific database you\'re using. We discuss some of the most basic datatypes here:","sidebar":"docs"},"databases/sql/core-concepts/database-design/database-schema":{"id":"databases/sql/core-concepts/database-design/database-schema","title":"Database Schema","description":"A database\'s schema describes how data is organized within it. Data types, table names, field names, constraints, and the relationships between all of those entities are part of a database\'s schema.","sidebar":"docs"},"databases/sql/core-concepts/database-design/fact-vs-dimension-tables":{"id":"databases/sql/core-concepts/database-design/fact-vs-dimension-tables","title":"Fact vs Dimension Tables","description":"In Data Warehouse Modeling, a star schema and a snowflake schema consists of Fact and Dimension tables.","sidebar":"docs"},"databases/sql/core-concepts/database-design/normalization":{"id":"databases/sql/core-concepts/database-design/normalization","title":"Normalization","description":"Normalization is the process of organizing data in a database. It includes creating tables and establishing relationships between those tables according to rules designed both to protect the data and to make the database more flexible by eliminating redundancy and inconsistent dependency.","sidebar":"docs"},"databases/sql/core-concepts/database-design/performance":{"id":"databases/sql/core-concepts/database-design/performance","title":"Performance","description":"Indexes","sidebar":"docs"},"databases/sql/core-concepts/database-design/table-relationships":{"id":"databases/sql/core-concepts/database-design/table-relationships","title":"Table Relationships","description":"Relational databases are powerful because of the relationships between the tables. These relationships help us to keep our databases clean and efficient. A relationship between tables assumes that one of these tables has a foreign key that references the primary key of another table.","sidebar":"docs"},"databases/sql/core-concepts/functions":{"id":"databases/sql/core-concepts/functions","title":"Functions","description":"SQL has many built-in functions for performing calculations on data. The names of these functions are not standardized across different dialects of SQL.","sidebar":"docs"},"databases/sql/core-concepts/querying-tables":{"id":"databases/sql/core-concepts/querying-tables","title":"Querying Tables","description":"SELECT statement","sidebar":"docs"},"databases/sql/sql":{"id":"databases/sql/sql","title":"SQL","description":"Structured Query Language, or SQL, is the primary programming language used to manage and interact with relational databases. SQL can perform various operations such as creating, updating, reading, and deleting records within a database.","sidebar":"docs"},"general-concepts/callStack":{"id":"general-concepts/callStack","title":"Call Stack","description":"In computer science, a call stack is a stack data structure that stores information about the active subroutines of a computer program. This kind of stack is also known as an execution stack, program stack, control stack, run-time stack, or machine stack, and is often shortened to just \\"the stack\\".","sidebar":"docs"},"general-concepts/certificates":{"id":"general-concepts/certificates","title":"Certificates","description":"TLS uses a X.509 Certificate with extended key usage:","sidebar":"docs"},"general-concepts/dependencyInjection":{"id":"general-concepts/dependencyInjection","title":"Dependency Injection","description":"- allows us to develop loosely coupled code","sidebar":"docs"},"general-concepts/dlls":{"id":"general-concepts/dlls","title":"Dynamic Link Library (DLL)","description":"- collection of code and/or data, which may be used by several applications","sidebar":"docs"},"general-concepts/grpc":{"id":"general-concepts/grpc","title":"gRPC","description":"Resource: gRPC Guides","sidebar":"docs"},"general-concepts/rpc":{"id":"general-concepts/rpc","title":"Remote Procedure Call (RPC)","description":"In distributed computing, a remote procedure call is when a computer program causes a procedure (subroutine) to execute in a different address space (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction.","sidebar":"docs"},"general-concepts/semaphoreVsMutex":{"id":"general-concepts/semaphoreVsMutex","title":"Semaphore vs Mutex","description":"Mutex","sidebar":"docs"},"general-concepts/stackVsHeap":{"id":"general-concepts/stackVsHeap","title":"Stack vs Heap","description":"Stack","sidebar":"docs"},"interesting-topics":{"id":"interesting-topics","title":"Interesting Topics","description":"This page contains the topics I still want to look into.","sidebar":"docs"},"introduction":{"id":"introduction","title":"Introduction","description":"This documentation contains a variety of topics I researched as part of my journey into software development.","sidebar":"docs"},"linux/commonlyUsedCommands":{"id":"linux/commonlyUsedCommands","title":"Commonly Used Commands","description":"Viewing files","sidebar":"docs"},"tools/ansible/tools-ansible-cli-commands":{"id":"tools/ansible/tools-ansible-cli-commands","title":"Important CLI commands","description":"- ssh-keygen - generate new ssh-key","sidebar":"docs"},"tools/ansible/tools-ansible-control-node-environment":{"id":"tools/ansible/tools-ansible-control-node-environment","title":"Control Node Environment","description":"A control node has the following files per default under /etc/ansible:","sidebar":"docs"},"tools/ansible/tools-ansible-installation":{"id":"tools/ansible/tools-ansible-installation","title":"Installation","description":"For installation instructions see:","sidebar":"docs"},"tools/ansible/tools-ansible-terminology":{"id":"tools/ansible/tools-ansible-terminology","title":"Terminology","description":"- Control Node: Any machine with Ansible installed, can run commands and playbooks (can\'t be a Windows computer)","sidebar":"docs"},"tools/ansible/tools-ansible-writing-playbooks":{"id":"tools/ansible/tools-ansible-writing-playbooks","title":"Writing Playbooks","description":"Playbooks are Ansible\'s configuration, deployment, and orchestration language. They can describe a policy you want your remote system to enforce, or a set of steps in a general IT process. They are expressed in YAML format and have a minimum of syntax, which intentionally tries to not be a programming language or script, but rather a model of a configuration or a process.","sidebar":"docs"},"tools/antlr":{"id":"tools/antlr","title":"ANTLR","description":"What is ANTLR","sidebar":"docs"},"tools/git/tags":{"id":"tools/git/tags","title":"Tags","description":"Adding tags to existing commits","sidebar":"docs"},"tools/jupyterhub":{"id":"tools/jupyterhub","title":"Jupyter Hub","description":"What JupyterHub does (from the Jupyter Website)","sidebar":"docs"},"web/css/advanced-concepts/constructable-stylesheets":{"id":"web/css/advanced-concepts/constructable-stylesheets","title":"Constructable Stylesheets","description":"Like HTML elements, CSS stylesheets can be created using JavaScript. The process has historically been to create a ` element using document.createElement(\'style\')`, and then access its sheet property to obtain a reference to the underlying CSSStyleSheet instance. This method can produce duplicate CSS code and its attendant bloat, and the act of attaching leads to a flash of unstyled content whether there is bloat or not.","sidebar":"docs"},"web/css/basics/relative-units":{"id":"web/css/basics/relative-units","title":"Relative Units","description":"In CSS, it is common to distinguish two major types of units:","sidebar":"docs"},"web/css/basics/selectors":{"id":"web/css/basics/selectors","title":"Selectors","description":"A selector points to an element or group of elements to which styles will be applied.","sidebar":"docs"},"web/css/basics/types-of-css":{"id":"web/css/basics/types-of-css","title":"Types of CSS","description":"There are several ways to apply CSS styles to an HTML document. Those are:","sidebar":"docs"},"web/css/element-styling/border":{"id":"web/css/element-styling/border","title":"Border","description":"CSS provides several properties that allow you to define style, width and color of the element border. Setting the borders can be useful as a decoration, and can perform more practical functions, such as highlighting important or interactive elements on a web page.","sidebar":"docs"},"web/css/element-styling/margin-padding":{"id":"web/css/element-styling/margin-padding","title":"Margin and Padding","description":"Margin and Padding are the properties that are used to add space around the element.","sidebar":"docs"},"web/css/element-styling/width-height":{"id":"web/css/element-styling/width-height","title":"Width/Height Properties","description":"CSS has properties that allow you to set web page elements to a certain width and height. With their help, you can set fixed sizes of elements, whether it is a sidebar, an image, a table, or any other block.","sidebar":"docs"},"web/css/site-layout/flexbox":{"id":"web/css/site-layout/flexbox","title":"Flexbox","description":"For a long time, there were only several simple CSS properties like float, margin, position, display and other similar tools for setting up a proper layout.","sidebar":"docs"},"web/css/site-layout/position":{"id":"web/css/site-layout/position","title":"Document Flow and Positioning","description":"HTML documents are displayed on the page from top to bottom, so the elements that are described higher in the HTML file will be rendered in the browser earlier than those described lower.","sidebar":"docs"},"web/html/attributes":{"id":"web/html/attributes","title":"HTML attributes","description":"For more flexible management of the web page elements design there are HTML attributes id and class. They are used to identify the elements.","sidebar":"docs"},"web/html/doctype":{"id":"web/html/doctype","title":"Doctype","description":"In HTML, the DOCTYPE is the required `` preamble found at the top of all documents. Its sole purpose is to prevent a browser from switching into so-called \\"quirks mode\\" when rendering a document.","sidebar":"docs"},"web/html/element-types":{"id":"web/html/element-types","title":"Element Types","description":"All you see on the page in your browser viewer are HTML elements. And this is where the difference between HTML tags and HTML elements lies: elements are what the user sees on the browser page, while tags are what the developer writes when creating an HTML document.","sidebar":"docs"},"web/html/interface-elements":{"id":"web/html/interface-elements","title":"Interface Elements","description":"Interface elements are used to create applications and services. There are many different types, each with its own characteristics and purpose.","sidebar":"docs"},"web/javascript/advanced-concepts/es6-modules":{"id":"web/javascript/advanced-concepts/es6-modules","title":"ES6 Modules","description":"Before ES6 we really went out of our ways to obtain modules in JavaScript. Systems like RequireJS, Angular\u2019s dependency injection mechanism, and CommonJS have been catering to our modular needs for a long time now \u2013 alongside with helpful tools such as Browserify and Webpack. In fact, ES6 modules have been heavily influenced by CommonJS. An ES6 module is a file containing JS code. There\u2019s no special module keyword; a module mostly reads just like a script. There are two differences.","sidebar":"docs"},"web/javascript/advanced-concepts/http-requests":{"id":"web/javascript/advanced-concepts/http-requests","title":"HTTP Requests","description":"There are different options when it comes to making HTTP requests (this is not React specific). There are different libraries that can be used to achieve the task, a very popular one is Axios. Nowadays there is also the Fetch API that is built into browsers.","sidebar":"docs"},"web/javascript/core-concepts/arithmetic-operators":{"id":"web/javascript/core-concepts/arithmetic-operators","title":"Arithmetic Operators","description":"Arithmetic operators are needed to perform operations on different types of data. There are 2 basic types of arithmetic operators:","sidebar":"docs"},"web/javascript/core-concepts/destructuring-assignment":{"id":"web/javascript/core-concepts/destructuring-assignment","title":"Destructuring Assignment","description":"The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.","sidebar":"docs"},"web/javascript/core-concepts/json":{"id":"web/javascript/core-concepts/json","title":"JSON","description":"JSON (or JavaScript Object Notation) is a text-based format for storing and transmitting structured data. It comes from the JavaScript language, but it is still considered to be language-independent: it works with almost any programming language. With JSON\'s lightweight syntax, you can easily store and send to other apps everything from numbers and strings to arrays and objects. You can also create more complex data structures by linking arrays to each other.","sidebar":"docs"},"web/javascript/core-concepts/promise":{"id":"web/javascript/core-concepts/promise","title":"Promise","description":"Definition: The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.","sidebar":"docs"},"web/javascript/core-concepts/types":{"id":"web/javascript/core-concepts/types","title":"Types","description":"JavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:","sidebar":"docs"},"web/javascript/core-concepts/variables-and-constants":{"id":"web/javascript/core-concepts/variables-and-constants","title":"Variables and Constants","description":"Variables in JavaScript can be declared in two ways:","sidebar":"docs"},"web/javascript/courses/codeacademy-course/introductionToJavascript":{"id":"web/javascript/courses/codeacademy-course/introductionToJavascript","title":"Introduction to Javascript","description":"Keywords","sidebar":"docs"},"web/javascript/courses/edx-course/pennxSd4x":{"id":"web/javascript/courses/edx-course/pennxSd4x","title":"PennX - SD4x","description":"Anatomy of an HTTP Request","sidebar":"docs"},"web/javascript/courses/packt-course/javascriptRefresher":{"id":"web/javascript/courses/packt-course/javascriptRefresher","title":"Javascript Refresher","description":"let & const","sidebar":"docs"},"web/javascript/javascript":{"id":"web/javascript/javascript","title":"JavaScript","description":"JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles. MDN","sidebar":"docs"},"web/javascript/web-apis/dataAndDataset":{"id":"web/javascript/web-apis/dataAndDataset","title":"data-* and HTMLElement.dataset","description":"data-\\\\*","sidebar":"docs"},"web/lit/components":{"id":"web/lit/components","title":"Components","description":"A Lit component is a reusable piece of UI. You can think of a Lit component as a container that has some state and that displays a UI based on its state. It can also react to user input, fire events\u2014anything you\'d expect a UI component to do. And a Lit component is an HTML element, so it has all of the standard element APIs.","sidebar":"docs"},"web/lit/context":{"id":"web/lit/context","title":"Context","description":"Context is a way of making data available to entire component subtrees without having to manually bind properties to every component. The data is \\"contextually\\" available, such that ancestor elements in between a provider of data and consumer of data aren\'t aware of it.","sidebar":"docs"},"web/lit/intro":{"id":"web/lit/intro","title":"Introduction","description":"Lit is a simple library for building fast, lightweight web components. At Lit\'s core is a boilerplate-killing component base class that provides reactive state, scoped styles, and a declarative template system that\'s tiny, fast and expressive.","sidebar":"docs"},"web/react/advanced-concepts/context":{"id":"web/react/advanced-concepts/context","title":"Context","description":"Context provides a way to pass data through the component tree without having to pass props down manually at every level.","sidebar":"docs"},"web/react/advanced-concepts/errorBoundaries":{"id":"web/react/advanced-concepts/errorBoundaries","title":"Error Boundaries","description":"Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.","sidebar":"docs"},"web/react/advanced-concepts/fragments":{"id":"web/react/advanced-concepts/fragments","title":"Fragments","description":"A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.","sidebar":"docs"},"web/react/advanced-concepts/portals":{"id":"web/react/advanced-concepts/portals","title":"Portals","description":"Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.","sidebar":"docs"},"web/react/advanced-concepts/reactMemo":{"id":"web/react/advanced-concepts/reactMemo","title":"React.memo","description":"If your component renders the same result given the same props, you can wrap it in a call to React.memo for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.","sidebar":"docs"},"web/react/core-concepts/describing-ui/components":{"id":"web/react/core-concepts/describing-ui/components","title":"Components","description":"React applications are built from isolated pieces of UI called components. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a Gallery component rendering three Profile components:","sidebar":"docs"},"web/react/core-concepts/describing-ui/conditional-rendering":{"id":"web/react/core-concepts/describing-ui/conditional-rendering","title":"Conditional Rendering","description":"Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements,&&, and ? : operators.","sidebar":"docs"},"web/react/core-concepts/describing-ui/javascript-in-jsx":{"id":"web/react/core-concepts/describing-ui/javascript-in-jsx","title":"JavaScript in JSX","description":"JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.","sidebar":"docs"},"web/react/core-concepts/describing-ui/keeping-components-pure":{"id":"web/react/core-concepts/describing-ui/keeping-components-pure","title":"Keeping Components Pure","description":"Some JavaScript functions are pure. Pure functions only perform a calculation and nothing more. By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. To get these benefits, though, there are a few rules you must follow.","sidebar":"docs"},"web/react/core-concepts/describing-ui/passing-props":{"id":"web/react/core-concepts/describing-ui/passing-props","title":"Passing Props","description":"React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.","sidebar":"docs"},"web/react/core-concepts/describing-ui/rendering-lists":{"id":"web/react/core-concepts/describing-ui/rendering-lists","title":"Rendering Lists","description":"You will often want to display multiple similar components from a collection of data. You can use the JavaScript array methods to manipulate an array of data. On this page, you\u2019ll use filter() and map() with React to filter and transform your array of data into an array of components.","sidebar":"docs"},"web/react/core-concepts/describing-ui/writing-markup-with-jsx":{"id":"web/react/core-concepts/describing-ui/writing-markup-with-jsx","title":"Writing Markup with JSX","description":"JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.","sidebar":"docs"},"web/react/core-concepts/functionalVsClassComponents":{"id":"web/react/core-concepts/functionalVsClassComponents","title":"Functional vs Class Components","description":"In the world of React, there are two basic ways of writing a React component. One uses a function and the other uses a class. With the introduction of React hooks, the React team pushes the use of functional components whenever possible (which better follows JavaScript\'s functional nature).","sidebar":"docs"},"web/react/core-concepts/stylingComponents":{"id":"web/react/core-concepts/stylingComponents","title":"Styling Components","description":"TODO: break out into multiple topics if necessary","sidebar":"docs"},"web/react/hooks/advanced-hooks/customHooks":{"id":"web/react/hooks/advanced-hooks/customHooks","title":"Custom Hooks","description":"A custom Hook is a JavaScript function whose name starts with \u201duse\u201d and that may call other Hooks.","sidebar":"docs"},"web/react/hooks/advanced-hooks/useCallback":{"id":"web/react/hooks/advanced-hooks/useCallback","title":"useCallback","description":"The useCallback hook basically allows us to store a function across component executions. This allows us to avoid the re-creation of the function every time a component is re-executed. The return value of useCallback is a memoized callback (with it we can reuse the same function across executions).","sidebar":"docs"},"web/react/hooks/advanced-hooks/useImperativeHandle":{"id":"web/react/hooks/advanced-hooks/useImperativeHandle","title":"useImperativeHandle","description":"TODO: good reference material - OReilly and StackOverflow","sidebar":"docs"},"web/react/hooks/advanced-hooks/useMemo":{"id":"web/react/hooks/advanced-hooks/useMemo","title":"useMemo","description":"The useMemo hook allows us to avoid heavy calculations. It memoizes a calculation result between a function\'s calls and between renders. While useCallback memoizes functions, useMemo memoizes any computed value.","sidebar":"docs"},"web/react/hooks/rulesOfHooks":{"id":"web/react/hooks/rulesOfHooks","title":"Rules of Hooks","description":"Hooks are JavaScript functions, but you need to follow two rules when using them. The React team provides a linter plugin to enforce them automatically.","sidebar":"docs"},"web/react/hooks/useContext":{"id":"web/react/hooks/useContext","title":"useContext","description":"The useContext Hook provides the same functionality as the Context API, just packaged up into a simple to use Hook that you can use inside functional components. The hook makes our code more readable and compact. Refer to the Context API documentation for details on when to use context.","sidebar":"docs"},"web/react/hooks/useEffect":{"id":"web/react/hooks/useEffect","title":"useEffect","description":"The Effect Hook lets you perform side effects in function components. Data fetching, setting up a subscription, storing data in browser storage, and manually changing the DOM in React components are all examples of side effects. Whether or not you\u2019re used to calling these operations \\"side effects\\" (or just \\"effects\\"), you\u2019ve likely performed them in your components before.","sidebar":"docs"},"web/react/hooks/useReducer":{"id":"web/react/hooks/useReducer","title":"useReducer","description":"The useReducer hook is an alternative to useState. useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.","sidebar":"docs"},"web/react/hooks/useRef":{"id":"web/react/hooks/useRef","title":"useRef","description":"Refs provide a way to access DOM nodes or React elements created in the render method.","sidebar":"docs"},"web/react/hooks/useState":{"id":"web/react/hooks/useState","title":"useState","description":"TODO","sidebar":"docs"},"web/react/introduction":{"id":"web/react/introduction","title":"Introduction","description":"React is a library for creating web and native user interfaces. React lets you build user interfaces out of individual pieces called components. React has a huge ecosystem of third-party packages that extend its capabilities.","sidebar":"docs"},"web/react/react-internals/rendering":{"id":"web/react/react-internals/rendering","title":"Rendering","description":"React is comprised of two main libraries, react and react-dom. The react package contains only the functionality necessary to define React components. It is typically used together with a React renderer like react-dom for the web, or react-native for the native environments.","sidebar":"docs"},"web/react/react-internals/schedulingUpdates":{"id":"web/react/react-internals/schedulingUpdates","title":"Scheduling Updates","description":"Updates to things like state or context don\'t happen immediately. Instead, they are scheduled to be processed at a later time. Now in reality most of the time, scheduled state changes will be processed very fast, pretty much instantly. But React reserves the right of actually postponing that state change. For example, because a lot of other performance intensive tasks are going on at the same moment, potentially tasks that React considers to have a higher priority.","sidebar":"docs"},"web/react/related-libraries/mantine/intro":{"id":"web/react/related-libraries/mantine/intro","title":"Introduction","description":"test","sidebar":"docs"},"web/react/related-libraries/react-router/intro":{"id":"web/react/related-libraries/react-router/intro","title":"Introduction","description":"Nearly every app in React needs to handle routing and by far the most popular library for handling routing is React Router. React Router enables \\"client side routing\\".","sidebar":"docs"},"web/react/related-libraries/react-router/react-router-guide":{"id":"web/react/related-libraries/react-router/react-router-guide","title":"React Router Guide","description":"This Guide was originally created by Web Dev Simplified and adjusted/updated by me.","sidebar":"docs"},"web/static-site-generators/docusaurus":{"id":"web/static-site-generators/docusaurus","title":"Docusaurus","description":"What is Docusaurus","sidebar":"docs"},"web/static-site-generators/jekyll":{"id":"web/static-site-generators/jekyll","title":"Jekyll","description":"Jekyll is a simple, extendable, static site generator. Given text written in a supported markup language it churns through layouts to create a static website. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more.","sidebar":"docs"},"web/typescript/advanced-concepts/discriminated-unions":{"id":"web/typescript/advanced-concepts/discriminated-unions","title":"Discriminated Unions","description":"If you have a class with a literal member (e.g. string literal) then you can use that property to discriminate between union members.","sidebar":"docs"},"web/typescript/advanced-concepts/generics":{"id":"web/typescript/advanced-concepts/generics","title":"Generics","description":"Generics are used to create reusable components. They are able to work over a variety of types rather than a single one.","sidebar":"docs"},"web/typescript/advanced-concepts/index-signatures":{"id":"web/typescript/advanced-concepts/index-signatures","title":"Index Signatures","description":"Sometimes you don\u2019t know all the names of a type\u2019s properties ahead of time, but you do know the shape of the values. In those cases you can use an index signature to describe the types of possible values, for example:","sidebar":"docs"},"web/typescript/advanced-concepts/intersections":{"id":"web/typescript/advanced-concepts/intersections","title":"Intersection Types","description":"interfaces allowed us to build up new types from other types by extending them. TypeScript provides another construct called intersection types that is mainly used to combine existing object types.","sidebar":"docs"},"web/typescript/advanced-concepts/nullish-coalescing":{"id":"web/typescript/advanced-concepts/nullish-coalescing","title":"Nullish Coalescing","description":"The nullish coalescing operator is a feature that goes hand-in-hand with optional chaining. You can think of this feature - the ?? operator - as a way to \u201cfall back\u201d to a default value when dealing with null or undefined. When we write code like:","sidebar":"docs"},"web/typescript/advanced-concepts/optional-chaining":{"id":"web/typescript/advanced-concepts/optional-chaining","title":"Optional Chaining","description":"optional chaining lets us write code where TypeScript can immediately stop running some expressions if we run into a null or undefined. We use the ?. operator for optional property accesses. When we write code like:","sidebar":"docs"},"web/typescript/advanced-concepts/type-guards":{"id":"web/typescript/advanced-concepts/type-guards","title":"Type Guards","description":"Type Guards allow you to narrow down the type of an object within a conditional block.","sidebar":"docs"},"web/typescript/compiler-configuration":{"id":"web/typescript/compiler-configuration","title":"Compiler Configuration","description":"Some useful configuration options for the Typescript compiler are listed here.","sidebar":"docs"},"web/typescript/core-concepts/classes":{"id":"web/typescript/core-concepts/classes","title":"Classes","description":"As with other JavaScript language features, TypeScript adds type annotations and other syntax to allow you to express relationships between classes and other types.","sidebar":"docs"},"web/typescript/core-concepts/enums":{"id":"web/typescript/core-concepts/enums","title":"Enums","description":"Enums are one of the few features TypeScript has which is not a type-level extension of JavaScript.","sidebar":"docs"},"web/typescript/core-concepts/functions":{"id":"web/typescript/core-concepts/functions","title":"Functions","description":"Functions are the basic building block of any application, whether they\u2019re local functions, imported from another module, or methods on a class. They\u2019re also values, and just like other values, TypeScript has many ways to describe how functions can be called.","sidebar":"docs"},"web/typescript/core-concepts/interfaces":{"id":"web/typescript/core-concepts/interfaces","title":"Interfaces","description":"An interface declaration is another way to name an object type:","sidebar":"docs"},"web/typescript/core-concepts/type-assertions":{"id":"web/typescript/core-concepts/type-assertions","title":"Type Assertions","description":"TypeScript allows you to override its inferred and analyzed view of types in any way you want to. This is done by a mechanism called \\"type assertion\\". TypeScript\'s type assertion is purely you telling the compiler that you know about the types better than it does, and that it should not second guess you.","sidebar":"docs"},"web/typescript/core-concepts/types":{"id":"web/typescript/core-concepts/types","title":"Types","description":"Static types systems describe the shapes and behaviors of what our values will be when we run our programs. A type-checker like TypeScript uses that information and tells us when things might be going off the rails.","sidebar":"docs"},"web/typescript/decorators/accessor-decorators":{"id":"web/typescript/decorators/accessor-decorators","title":"Accessor Decorators","description":"An Accessor Decorator is declared just before an accessor declaration. The accessor decorator is applied to the Property Descriptor for the accessor and can be used to observe, modify, or replace an accessor\u2019s definitions. An accessor decorator cannot be used in a declaration file, or in any other ambient context (such as in a declare class).","sidebar":"docs"},"web/typescript/decorators/class-decorators":{"id":"web/typescript/decorators/class-decorators","title":"Class Decorators","description":"A Class Decorator is declared just before a class declaration. The class decorator is applied to the constructor of the class and can be used to observe, modify, or replace a class definition. A class decorator cannot be used in a declaration file, or in any other ambient context (such as on a declare class).","sidebar":"docs"},"web/typescript/decorators/introduction":{"id":"web/typescript/decorators/introduction","title":"Introduction","description":"With the introduction of Classes in TypeScript and ES6, there now exist certain scenarios that require additional features to support annotating or modifying classes and class members. Decorators provide a way to add both annotations and a meta-programming syntax for class declarations and members.","sidebar":"docs"},"web/typescript/decorators/method-decorators":{"id":"web/typescript/decorators/method-decorators","title":"Method Decorators","description":"A Method Decorator is declared just before a method declaration. The decorator is applied to the Property Descriptor for the method, and can be used to observe, modify, or replace a method definition. A method decorator cannot be used in a declaration file, on an overload, or in any other ambient context (such as in a declare class).","sidebar":"docs"},"web/typescript/decorators/parameter-decorators":{"id":"web/typescript/decorators/parameter-decorators","title":"Parameter Decorators","description":"A Parameter Decorator is declared just before a parameter declaration. The parameter decorator is applied to the function for a class constructor or method declaration. A parameter decorator cannot be used in a declaration file, an overload, or in any other ambient context (such as in a declare class).","sidebar":"docs"},"web/typescript/decorators/property-decorators":{"id":"web/typescript/decorators/property-decorators","title":"Property Decorators","description":"A Property Decorator is declared just before a property declaration. A property decorator cannot be used in a declaration file, or in any other ambient context (such as in a declare class).","sidebar":"docs"},"web/typescript/typescript":{"id":"web/typescript/typescript","title":"Typescript","description":"Snippet of the Wikipedia Definition that captures Typescript well:","sidebar":"docs"},"web/typescript/utility-types/partial":{"id":"web/typescript/utility-types/partial","title":"Partial<Type>","description":"Constructs a type with all properties of Type set to optional. This utility will return a type that represents all subsets of a given type.","sidebar":"docs"},"web/typescript/utility-types/readonly":{"id":"web/typescript/utility-types/readonly","title":"Readonly<Type>","description":"Constructs a type with all properties of Type set to readonly, meaning the properties of the constructed type cannot be reassigned.","sidebar":"docs"}}}}')}}]);