"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[7590],{4275:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=t(4848),o=t(8453);const a={title:"Relationships"},r=void 0,s={id:"csharp/entity-framework/creating-a-model/relationships",title:"Relationships",description:"In relational databases, relationships (also called associations) between tables are defined through foreign keys. A foreign key (FK) is a column or combination of columns that is used to establish and enforce a link between the data in two tables. The foreign key refers to the primary key in another table.",source:"@site/docs/csharp/entity-framework/creating-a-model/relationships.md",sourceDirName:"csharp/entity-framework/creating-a-model",slug:"/csharp/entity-framework/creating-a-model/relationships",permalink:"/LearningCollection/csharp/entity-framework/creating-a-model/relationships",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/entity-framework/creating-a-model/relationships.md",tags:[],version:"current",frontMatter:{title:"Relationships"},sidebar:"docs",previous:{title:"Entity types",permalink:"/LearningCollection/csharp/entity-framework/creating-a-model/entity-types"},next:{title:"Basic Querying",permalink:"/LearningCollection/csharp/entity-framework/querying-data/basic-querying"}},l={},c=[{value:"Types of relationships",id:"types-of-relationships",level:2},{value:"One-to-One",id:"one-to-one",level:3},{value:"One-to-Many",id:"one-to-many",level:3},{value:"Many-to-Many",id:"many-to-many",level:3},{value:"Navigation properties",id:"navigation-properties",level:2},{value:"Mapping relationships",id:"mapping-relationships",level:2},{value:"One-to-Many",id:"one-to-many-1",level:3}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In relational databases, relationships (also called associations) between tables are defined through foreign keys. A foreign key (FK) is a column or combination of columns that is used to establish and enforce a link between the data in two tables. The foreign key refers to the primary key in another table."}),"\n",(0,i.jsx)(n.h2,{id:"types-of-relationships",children:"Types of relationships"}),"\n",(0,i.jsx)(n.p,{children:"There are generally three types of relationships:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"one-to-one"}),"\n",(0,i.jsx)(n.li,{children:"one-to-many"}),"\n",(0,i.jsx)(n.li,{children:"many-to-many"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"one-to-one",children:"One-to-One"}),"\n",(0,i.jsx)(n.p,{children:"In a one-to-one relationship, the primary key acts additionally as a foreign key and there is no separate foreign key column for either table."}),"\n",(0,i.jsx)(n.h3,{id:"one-to-many",children:"One-to-Many"}),"\n",(0,i.jsx)(n.p,{children:"In a one-to-many relationship, the foreign key is defined on the table that represents the many end of the relationship."}),"\n",(0,i.jsx)(n.h3,{id:"many-to-many",children:"Many-to-Many"}),"\n",(0,i.jsx)(n.p,{children:"The many-to-many relationship involves defining a third table (called a junction or join table), whose primary key is composed of the foreign keys from both related tables."}),"\n",(0,i.jsx)(n.h2,{id:"navigation-properties",children:"Navigation properties"}),"\n",(0,i.jsx)(n.p,{children:"In Entity Framework, an entity can be related to other entities through an association or relationship. Navigation properties provide a way to navigate an association between two entity types."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Every object can have a navigation property for every relationship in which it participates"}),"\n",(0,i.jsxs)(n.li,{children:["Navigation properties allow you to navigate and manage relationships in both directions, returning either","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"a reference object (if the multiplicity is either one or zero-or-one)"}),"\n",(0,i.jsx)(n.li,{children:"or a collection (if the multiplicity is many)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"You may also choose to have one-way navigation, in which case you define the navigation property on only one of the types that participates in the relationship and not on both"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"mapping-relationships",children:"Mapping relationships"}),"\n",(0,i.jsx)(n.p,{children:"There are two ways of mapping relationships in EF Core:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/ef/ef6/modeling/code-first/data-annotations",children:"Data Annotations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/ef/ef6/modeling/code-first/fluent/relationships",children:"Fluent API Relationships"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"one-to-many-1",children:"One-to-Many"}),"\n",(0,i.jsx)(n.p,{children:"A one to many relationship is declared by a reference from parent to child:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"{6}",children:"public class Author\n{\n  public int Id { get; set; }\n  public string FirstName { get; set; }\n  public string LastName { get; set; }\n  public List<Book> Books { get; set; }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'The child doesn\'t need to reference the parent. So properties exist in the data model but not in the entity class. This is also called "Shadow Properties". But it can also be explicitly added in the code:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"{5}",children:"public class Book\n{\n  public int Id { get; set; }\n  public string Title { get; set; }\n  public Author Author { get; set; }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adding it explicitly allows us to navigate from the child object to the parent object."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);