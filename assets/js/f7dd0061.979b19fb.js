"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[2201],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(y,o(o({ref:n},p),{},{components:t})):r.createElement(y,o({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8819:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={id:"generics",title:"Generics",sidebar_position:7},o=void 0,s={unversionedId:"web/typescript/advanced-concepts/generics",id:"web/typescript/advanced-concepts/generics",title:"Generics",description:"Generics are used to create reusable components. They are able to work over a variety of types rather than a single one.",source:"@site/docs/web/typescript/advanced-concepts/generics.md",sourceDirName:"web/typescript/advanced-concepts",slug:"/web/typescript/advanced-concepts/generics",permalink:"/LearningCollection/web/typescript/advanced-concepts/generics",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/advanced-concepts/generics.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"generics",title:"Generics",sidebar_position:7},sidebar:"docs",previous:{title:"Nullish Coalescing",permalink:"/LearningCollection/web/typescript/advanced-concepts/nullish-coalescing"},next:{title:"Partial<Type>",permalink:"/LearningCollection/web/typescript/utility-types/partial"}},l={},c=[{value:"Generic Types",id:"generic-types",level:2},{value:"Generic Interfaces",id:"generic-interfaces",level:2},{value:"Generic Classes",id:"generic-classes",level:2},{value:"Generic Constraints",id:"generic-constraints",level:2},{value:"Using Type Parameters in Generic Constraints",id:"using-type-parameters-in-generic-constraints",level:3}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Generics are used to create reusable components. They are able to work over a variety of types rather than a single one."),(0,a.kt)("p",null,"An example of a generic is the type ",(0,a.kt)("inlineCode",{parentName:"p"},"Array"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"let list: Array<number> = [1, 2, 3];\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Array")," type is generic, so it works over a range of types rather than a single one. Here, we've told TypeScript that ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," should be an array of numbers. We could have also created an array of strings, booleans, or any other type."),(0,a.kt)("h2",{id:"generic-types"},"Generic Types"),(0,a.kt)("p",null,"Below we define a generic identity function that works over a range of types. The type of this generic function is just like those of a non-generic function, with the type parameters listed first, similarly to function declarations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function identity<T>(arg: T): T {\n  return arg;\n}\n\nlet myIdentity: <T>(arg: T) => T = identity;\n")),(0,a.kt)("p",null,"We could also have used a different name for the generic type parameter in the type, so long as the number of type variables and how the type variables are used line up."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function identity<Type>(arg: Type): Type {\n  return arg;\n}\n\nlet myIdentity: <Input>(arg: Input) => Input = identity;\n")),(0,a.kt)("h2",{id:"generic-interfaces"},"Generic Interfaces"),(0,a.kt)("p",null,"The generic type can also be used with the interface. The following is a generic interface."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface IProcessor<T>\n{\n    result: T;\n    process(a: T, b: T) => T;\n}\n")),(0,a.kt)("p",null,"The above ",(0,a.kt)("inlineCode",{parentName:"p"},"IProcessor")," is a generic interface because we used type variable ",(0,a.kt)("inlineCode",{parentName:"p"},"<T>"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"IProcessor")," interface includes the generic field ",(0,a.kt)("inlineCode",{parentName:"p"},"result")," and the generic method ",(0,a.kt)("inlineCode",{parentName:"p"},"process()")," that accepts two generic type parameters and returns a generic type."),(0,a.kt)("p",null,"Another example would be a KeyValuePair interface:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'interface KeyPair<T, U> {\n  key: T;\n  value: U;\n}\n\nlet kv1: KeyPair<number, string> = { key: 1, value: "Steve" }; // OK\nlet kv2: KeyPair<number, number> = { key: 1, value: 12345 }; // OK\n')),(0,a.kt)("h2",{id:"generic-classes"},"Generic Classes"),(0,a.kt)("p",null,"A generic class has a similar shape to a generic interface. Generic classes have a generic type parameter list in angle brackets (",(0,a.kt)("inlineCode",{parentName:"p"},"<>"),") following the name of the class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class GenericNumber<NumType> {\n  zeroValue: NumType;\n  add: (x: NumType, y: NumType) => NumType;\n}\n\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function (x, y) {\n  return x + y;\n};\n")),(0,a.kt)("p",null,"We could have instead used string or even more complex objects:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let stringNumeric = new GenericNumber<string>();\nstringNumeric.zeroValue = "";\nstringNumeric.add = function (x, y) {\n  return x + y;\n};\n\nconsole.log(stringNumeric.add(stringNumeric.zeroValue, "test"));\n')),(0,a.kt)("h2",{id:"generic-constraints"},"Generic Constraints"),(0,a.kt)("p",null,"You may sometimes want to write a generic function that works on a set of types where you have some knowledge about what capabilities that set of types will have."),(0,a.kt)("p",null,"Consider the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function merge<U, V>(obj1: U, obj2: V) {\n  return {\n    ...obj1,\n    ...obj2,\n  };\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"merge()")," is a generic function that merges two objects like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"let person = merge({ name: \"John\" }, { age: 25 });\n\nconsole.log(result); // { name: 'John', age: 25 }\n")),(0,a.kt)("p",null,"It works perfectly fine. However, it doesn\u2019t prevent you from passing a non-object like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"let person = merge({ name: \"John\" }, 25);\n\nconsole.log(result); // { name: 'John' }\n")),(0,a.kt)("p",null,"Instead of working with all types, you may want to add a constraint to the ",(0,a.kt)("inlineCode",{parentName:"p"},"merge()")," function so that it works with objects only:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function merge<U extends object, V extends object>(obj1: U, obj2: V) {\n  return {\n    ...obj1,\n    ...obj2,\n  };\n}\n")),(0,a.kt)("p",null,"Because the ",(0,a.kt)("inlineCode",{parentName:"p"},"merge()")," function is now constrained, it will no longer work with all types. Instead, it works with the ",(0,a.kt)("inlineCode",{parentName:"p"},"object")," type only."),(0,a.kt)("h3",{id:"using-type-parameters-in-generic-constraints"},"Using Type Parameters in Generic Constraints"),(0,a.kt)("p",null,"We can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"keyof")," operator to declare a type parameter that is constrained by another type parameter. For example, here we\u2019d like to get a property from an object given its name. We\u2019d like to ensure that we\u2019re not accidentally grabbing a property that does not exist on the ",(0,a.kt)("inlineCode",{parentName:"p"},"obj"),", so we\u2019ll place a constraint between the two types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'function getProperty<Type, Key extends keyof Type>(obj: Type, key: Key) {\n  return obj[key];\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 };\n\ngetProperty(x, "a");\n// Error: "m" does not exist on x\ngetProperty(x, "m");\n')))}d.isMDXComponent=!0}}]);