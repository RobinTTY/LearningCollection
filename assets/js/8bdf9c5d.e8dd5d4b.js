"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4372],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1535:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={id:"jsxSyntax",title:"JSX Syntax",sidebar_position:1},s=void 0,o={unversionedId:"Web/React/Main Concepts/jsxSyntax",id:"Web/React/Main Concepts/jsxSyntax",title:"JSX Syntax",description:"JSX is an XML-like syntax extension to ECMAScript without any defined semantics. It's intended to be used by various preprocessors (transpilers) to transform these tokens into standard ECMAScript.",source:"@site/docs/Web/React/Main Concepts/JSX Syntax.md",sourceDirName:"Web/React/Main Concepts",slug:"/Web/React/Main Concepts/jsxSyntax",permalink:"/LearningCollection/Web/React/Main Concepts/jsxSyntax",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Web/React/Main Concepts/JSX Syntax.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"jsxSyntax",title:"JSX Syntax",sidebar_position:1},sidebar:"finance",previous:{title:"Compiler Configuration",permalink:"/LearningCollection/Web/typescript/compiler-configuration"},next:{title:"Basics",permalink:"/LearningCollection/Web/React/Main Concepts/basics"}},l={},c=[{value:"JSX in React",id:"jsx-in-react",level:2},{value:"Why JSX?",id:"why-jsx",level:3},{value:"Embedding expressions in JSX",id:"embedding-expressions-in-jsx",level:3},{value:"JSX is an expression too",id:"jsx-is-an-expression-too",level:3},{value:"Specifying attributes with JSX",id:"specifying-attributes-with-jsx",level:3},{value:"Specifying children with JSX",id:"specifying-children-with-jsx",level:3},{value:"JSX prevents injection attacks",id:"jsx-prevents-injection-attacks",level:3},{value:"JSX represents objects",id:"jsx-represents-objects",level:3},{value:"TODO",id:"todo",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"JSX is an ",(0,i.kt)("strong",{parentName:"p"},"XML-like syntax extension to ECMAScript")," without any defined semantics. It's intended to be used by various preprocessors (transpilers) to transform these tokens into standard ECMAScript."),(0,i.kt)("h2",{id:"jsx-in-react"},"JSX in React"),(0,i.kt)("p",null,"Consider this variable declaration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const element = <h1>Hello, world!</h1>;\n")),(0,i.kt)("p",null,'The used syntax is called JSX, and it is a syntax extension to JavaScript. JSX is used to produce React "elements".'),(0,i.kt)("h3",{id:"why-jsx"},"Why JSX?"),(0,i.kt)("p",null,"React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display."),(0,i.kt)("p",null,'Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called "components" that contain both.'),(0,i.kt)("p",null,"React ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-without-jsx.html"},"doesn\u2019t require using JSX"),", but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages."),(0,i.kt)("h3",{id:"embedding-expressions-in-jsx"},"Embedding expressions in JSX"),(0,i.kt)("p",null,"In the example below, we declare a variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and then use it inside JSX by wrapping it in curly braces:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{1-2}","{1-2}":!0},'const name = "Josh Perez";\nconst element = <h1>Hello, {name}</h1>;\n\nReactDOM.render(element, document.getElementById("root"));\n')),(0,i.kt)("p",null,"You can put any valid JavaScript expression inside the curly braces in JSX."),(0,i.kt)("h3",{id:"jsx-is-an-expression-too"},"JSX is an expression too"),(0,i.kt)("p",null,"After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects."),(0,i.kt)("p",null,"This means that you can use JSX inside of ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," statements and ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loops, assign it to variables, accept it as arguments, and return it from functions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{3,5}","{3,5}":!0},"function getGreeting(user) {\n  if (user) {\n    return <h1>Hello, {formatName(user)}!</h1>;\n  }\n  return <h1>Hello, Stranger.</h1>;\n}\n")),(0,i.kt)("h3",{id:"specifying-attributes-with-jsx"},"Specifying attributes with JSX"),(0,i.kt)("p",null,"You may use quotes to specify string literals as attributes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'const element = <div tabIndex="0"></div>;\n')),(0,i.kt)("p",null,"You may also use curly braces to embed a JavaScript expression in an attribute:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const element = <img src={user.avatarUrl}></img>;\n")),(0,i.kt)("p",null,"Don\u2019t put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Since JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names."),(0,i.kt)("p",{parentName:"admonition"},"For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," becomes ",(0,i.kt)("inlineCode",{parentName:"p"},"className")," in JSX, and ",(0,i.kt)("inlineCode",{parentName:"p"},"tabindex")," becomes ",(0,i.kt)("inlineCode",{parentName:"p"},"tabIndex"),".")),(0,i.kt)("h3",{id:"specifying-children-with-jsx"},"Specifying children with JSX"),(0,i.kt)("p",null,"If a tag is empty, you may close it immediately with ",(0,i.kt)("inlineCode",{parentName:"p"},"/>"),", like XML:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const element = <img src={user.avatarUrl} />;\n")),(0,i.kt)("p",null,"JSX tags may contain children:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const element = (\n  <div>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </div>\n);\n")),(0,i.kt)("h3",{id:"jsx-prevents-injection-attacks"},"JSX prevents injection attacks"),(0,i.kt)("p",null,"It is safe to embed user input in JSX:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const title = response.potentiallyMaliciousInput;\n// This is safe:\nconst element = <h1>{title}</h1>;\n")),(0,i.kt)("p",null,"By default, React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that\u2019s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cross-site_scripting"},"XSS (cross-site-scripting)")," attacks."),(0,i.kt)("h3",{id:"jsx-represents-objects"},"JSX represents objects"),(0,i.kt)("p",null,"Babel compiles JSX down to ",(0,i.kt)("inlineCode",{parentName:"p"},"React.createElement()")," calls. These two examples are identical:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'const element = <h1 className="greeting">Hello, world!</h1>;\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'const element = React.createElement(\n  "h1",\n  { className: "greeting" },\n  "Hello, world!"\n);\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"React.createElement()")," performs a few checks to help you write bug-free code but essentially it creates an object like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'// Note: this structure is simplified\nconst element = {\n  type: "h1",\n  props: {\n    className: "greeting",\n    children: "Hello, world!",\n  },\n};\n')),(0,i.kt)("p",null,'These objects are called "React elements". You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.'),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It is recommended to use the ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/editors"},'"Babel" language definition')," for your editor of choice so that both ES6 and JSX code is properly highlighted.")),(0,i.kt)("h3",{id:"todo"},"TODO"),(0,i.kt)("p",null,"TODO: ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/jsx-in-depth.html"},"This information seems good to know")))}d.isMDXComponent=!0}}]);