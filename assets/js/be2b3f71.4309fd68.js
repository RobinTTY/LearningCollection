"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[2390],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=l(t),f=i,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=f;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p[d]="string"==typeof e?e:i,a[1]=p;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9677:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const o={id:"optional-chaining",title:"Optional Chaining",sidebar_position:5},a=void 0,p={unversionedId:"web/typescript/advanced-concepts/optional-chaining",id:"web/typescript/advanced-concepts/optional-chaining",title:"Optional Chaining",description:"optional chaining lets us write code where TypeScript can immediately stop running some expressions if we run into a null or undefined. We use the ?. operator for optional property accesses. When we write code like:",source:"@site/docs/web/typescript/advanced-concepts/optional-chaining.md",sourceDirName:"web/typescript/advanced-concepts",slug:"/web/typescript/advanced-concepts/optional-chaining",permalink:"/LearningCollection/web/typescript/advanced-concepts/optional-chaining",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/advanced-concepts/optional-chaining.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"optional-chaining",title:"Optional Chaining",sidebar_position:5},sidebar:"finance",previous:{title:"Index Signatures",permalink:"/LearningCollection/web/typescript/advanced-concepts/index-signatures"},next:{title:"Nullish Coalescing",permalink:"/LearningCollection/web/typescript/advanced-concepts/nullish-coalescing"}},c={},l=[],s={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"optional chaining lets us write code where TypeScript can immediately stop running some expressions if we run into a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),". We use the ",(0,i.kt)("inlineCode",{parentName:"p"},"?.")," operator for optional property accesses. When we write code like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let x = foo?.bar.baz();\n")),(0,i.kt)("p",null,"this is a way of saying that when ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," is defined, ",(0,i.kt)("inlineCode",{parentName:"p"},"foo.bar.baz()")," will be computed; but when ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", stop what we\u2019re doing and just return ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,i.kt)("p",null,"More plainly, that code snippet is the same as writing the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let x = foo === null || foo === undefined ? undefined : foo.bar.baz();\n")))}u.isMDXComponent=!0}}]);