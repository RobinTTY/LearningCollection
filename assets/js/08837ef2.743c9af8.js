"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8858],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),l=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(r),u=n,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return r?o.createElement(f,i(i({ref:t},p),{},{components:r})):o.createElement(f,i({ref:t},p))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6045:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var o=r(7462),n=(r(7294),r(3905));const a={id:"method-decorators",title:"Method Decorators",sidebar_position:3},i=void 0,c={unversionedId:"Web/typescript/decorators/method-decorators",id:"Web/typescript/decorators/method-decorators",title:"Method Decorators",description:"A Method Decorator is declared just before a method declaration. The decorator is applied to the Property Descriptor for the method, and can be used to observe, modify, or replace a method definition. A method decorator cannot be used in a declaration file, on an overload, or in any other ambient context (such as in a declare class).",source:"@site/docs/Web/typescript/decorators/method-decorators.md",sourceDirName:"Web/typescript/decorators",slug:"/Web/typescript/decorators/method-decorators",permalink:"/LearningCollection/Web/typescript/decorators/method-decorators",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Web/typescript/decorators/method-decorators.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"method-decorators",title:"Method Decorators",sidebar_position:3},sidebar:"finance",previous:{title:"Class Decorators",permalink:"/LearningCollection/Web/typescript/decorators/class-decorators"},next:{title:"Accessor Decorators",permalink:"/LearningCollection/Web/typescript/decorators/accessor-decorators"}},s={},l=[],p={toc:l};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"A Method Decorator is declared just before a method declaration. The decorator is applied to the Property Descriptor for the method, and can be used to observe, modify, or replace a method definition. A method decorator cannot be used in a declaration file, on an overload, or in any other ambient context (such as in a ",(0,n.kt)("inlineCode",{parentName:"p"},"declare")," class)."),(0,n.kt)("p",null,"The expression for the method decorator will be called as a function at runtime, with the following three arguments:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Either the constructor function of the class for a static member, or the prototype of the class for an instance member"),(0,n.kt)("li",{parentName:"ol"},"The name of the member"),(0,n.kt)("li",{parentName:"ol"},"The Property Descriptor for the member")),(0,n.kt)("p",null,"If the method decorator returns a value, it will be used as the Property Descriptor for the method."),(0,n.kt)("p",null,"The following is an example of a method decorator (",(0,n.kt)("inlineCode",{parentName:"p"},"@enumerable"),") applied to a method on the ",(0,n.kt)("inlineCode",{parentName:"p"},"Greeter")," class:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'class Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  @enumerable(false)\n  greet() {\n    return "Hello, " + this.greeting;\n  }\n}\n')),(0,n.kt)("p",null,"We can define the ",(0,n.kt)("inlineCode",{parentName:"p"},"@enumerable")," decorator using the following function declaration:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"function enumerable(value: boolean) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    descriptor.enumerable = value;\n  };\n}\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"@enumerable(false)")," decorator here is a decorator factory. When the ",(0,n.kt)("inlineCode",{parentName:"p"},"@enumerable(false)")," decorator is called, it modifies the enumerable property of the property descriptor."))}d.isMDXComponent=!0}}]);