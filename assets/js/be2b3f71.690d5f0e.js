"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[347],{1453:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var t=i(4848),o=i(8453);const s={id:"optional-chaining",title:"Optional Chaining",sidebar_position:5},c=void 0,r={id:"web/typescript/advanced-concepts/optional-chaining",title:"Optional Chaining",description:"optional chaining lets us write code where TypeScript can immediately stop running some expressions if we run into a null or undefined. We use the ?. operator for optional property accesses. When we write code like:",source:"@site/docs/web/typescript/advanced-concepts/optional-chaining.md",sourceDirName:"web/typescript/advanced-concepts",slug:"/web/typescript/advanced-concepts/optional-chaining",permalink:"/LearningCollection/web/typescript/advanced-concepts/optional-chaining",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/advanced-concepts/optional-chaining.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"optional-chaining",title:"Optional Chaining",sidebar_position:5},sidebar:"docs",previous:{title:"Index Signatures",permalink:"/LearningCollection/web/typescript/advanced-concepts/index-signatures"},next:{title:"Nullish Coalescing",permalink:"/LearningCollection/web/typescript/advanced-concepts/nullish-coalescing"}},a={},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["optional chaining lets us write code where TypeScript can immediately stop running some expressions if we run into a ",(0,t.jsx)(n.code,{children:"null"})," or ",(0,t.jsx)(n.code,{children:"undefined"}),". We use the ",(0,t.jsx)(n.code,{children:"?."})," operator for optional property accesses. When we write code like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let x = foo?.bar.baz();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["this is a way of saying that when ",(0,t.jsx)(n.code,{children:"foo"})," is defined, ",(0,t.jsx)(n.code,{children:"foo.bar.baz()"})," will be computed; but when ",(0,t.jsx)(n.code,{children:"foo"})," is ",(0,t.jsx)(n.code,{children:"null"})," or ",(0,t.jsx)(n.code,{children:"undefined"}),", stop what we\u2019re doing and just return ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"More plainly, that code snippet is the same as writing the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let x = foo === null || foo === undefined ? undefined : foo.bar.baz();\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var t=i(6540);const o={},s=t.createContext(o);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);