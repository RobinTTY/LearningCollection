"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[3818],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,m=c["".concat(l,".").concat(d)]||c[d]||u[d]||i;return n?a.createElement(m,o(o({ref:t},h),{},{components:n})):a.createElement(m,o({ref:t},h))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5967:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={id:"core-concepts",title:"Core Concepts",sidebar_position:3},o=void 0,s={unversionedId:"apis/graphql/core-concepts",id:"apis/graphql/core-concepts",title:"Core Concepts",description:"GraphQL has a few core concepts that are important to understanding how it works. These core concepts are explained here.",source:"@site/docs/apis/graphql/core-concepts.md",sourceDirName:"apis/graphql",slug:"/apis/graphql/core-concepts",permalink:"/LearningCollection/apis/graphql/core-concepts",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/apis/graphql/core-concepts.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"core-concepts",title:"Core Concepts",sidebar_position:3},sidebar:"docs",previous:{title:"Architecture",permalink:"/LearningCollection/apis/graphql/architecture"},next:{title:"Clients",permalink:"/LearningCollection/apis/graphql/clients"}},l={},p=[{value:"The Schema Definition Language (SDL)",id:"the-schema-definition-language-sdl",level:2},{value:"Fetching Data with Queries",id:"fetching-data-with-queries",level:2},{value:"Basic Queries",id:"basic-queries",level:3},{value:"Queries with Arguments",id:"queries-with-arguments",level:3},{value:"Writing Data with Mutations",id:"writing-data-with-mutations",level:3},{value:"Realtime Updates with Subscriptions",id:"realtime-updates-with-subscriptions",level:3},{value:"Defining a Schema",id:"defining-a-schema",level:2}],h={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"GraphQL has a few core concepts that are important to understanding how it works. These core concepts are explained here."),(0,r.kt)("h2",{id:"the-schema-definition-language-sdl"},"The Schema Definition Language (SDL)"),(0,r.kt)("p",null,"GraphQL has its own type system that\u2019s used to define the schema of an API. The syntax for writing schemas is called Schema Definition Language (SDL). Here is an example of how we can use the SDL to define a simple type called ",(0,r.kt)("inlineCode",{parentName:"p"},"Person"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Person {\n  name: String!\n  age: Int!\n}\n")),(0,r.kt)("p",null,"This type has two fields, they\u2019re called ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," and are respectively of type ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," following the type means that this field is required. It\u2019s also possible to express relationships between types. In the example of a blogging application, a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," could be associated with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Post"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Post {\n  title: String!\n  author: Person!\n}\n")),(0,r.kt)("p",null,"Conversely, the other end of the relationship needs to be placed on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Person {\n  name: String!\n  age: Int!\n  posts: [Post!]!\n}\n")),(0,r.kt)("p",null,"This is a one-to-many-relationship between ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," since the ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," field on ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," is actually an array of posts."),(0,r.kt)("h2",{id:"fetching-data-with-queries"},"Fetching Data with Queries"),(0,r.kt)("p",null,"When working with REST APIs, data is loaded from specific endpoints. Each endpoint has a clearly defined structure of the information that it returns. This means that the data requirements of a client are effectively encoded in the URL that it connects to."),(0,r.kt)("p",null,"The approach that\u2019s taken in GraphQL is radically different. Instead of having multiple endpoints that return fixed data structures, GraphQL APIs typically only expose a single endpoint. This works because the structure of the data that\u2019s returned is not fixed. Instead, it\u2019s completely flexible and lets the client decide what data is actually needed."),(0,r.kt)("p",null,"That means that the client needs to send more information to the server to express its data needs - this information is called a query."),(0,r.kt)("h3",{id:"basic-queries"},"Basic Queries"),(0,r.kt)("p",null,"Let\u2019s take a look at an example query that a client could send to a server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allPersons {\n    name\n  }\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"allPersons")," field in this query is called the root field of the query. Everything that follows the root field, is called the payload of the query. The only field that\u2019s specified in this query\u2019s payload is ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,r.kt)("p",null,"This query would return a list of all persons currently stored in the database. Here\u2019s an example response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "allPersons": [\n    { "name": "Johnny" },\n    { "name": "Sarah" },\n    { "name": "Alice" }\n  ]\n}\n')),(0,r.kt)("p",null,"Notice that each person only has the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," in the response, but the ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," is not returned by the server. That\u2019s exactly because ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," was the only field that was specified in the query."),(0,r.kt)("p",null,"If the client also needed the persons\u2019 ",(0,r.kt)("inlineCode",{parentName:"p"},"age"),", all it has to do is slightly adjust the query and include the new field in the query\u2019s payload:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allPersons {\n    name\n    age\n  }\n}\n")),(0,r.kt)("p",null,"One of the major advantages of GraphQL is that it allows for naturally querying nested information. For example, if you wanted to load all the ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," that a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," has written, you could simply follow the structure of your types to request this information:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allPersons {\n    name\n    age\n    posts {\n      title\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:"queries-with-arguments"},"Queries with Arguments"),(0,r.kt)("p",null,"In GraphQL, each field can have zero or more arguments if that\u2019s specified in the schema. For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"allPersons")," field could have a ",(0,r.kt)("inlineCode",{parentName:"p"},"last")," parameter to only return up to a specific number of persons. Here\u2019s what a corresponding query would look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allPersons(last: 2) {\n    name\n  }\n}\n")),(0,r.kt)("h3",{id:"writing-data-with-mutations"},"Writing Data with Mutations"),(0,r.kt)("p",null,"Next to requesting information from a server, the majority of applications also need some way of making changes to the data that\u2019s currently stored in the backend. With GraphQL, these changes are made using so-called mutations. There generally are three kinds of mutations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creating new data"),(0,r.kt)("li",{parentName:"ul"},"Updating existing data"),(0,r.kt)("li",{parentName:"ul"},"deleting existing data")),(0,r.kt)("p",null,"Mutations follow the same syntactical structure as queries, but they always need to start with the ",(0,r.kt)("inlineCode",{parentName:"p"},"mutation")," keyword. Here\u2019s an example for how we might create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Person"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createPerson(name: "Bob", age: 36) {\n    name\n    age\n  }\n}\n')),(0,r.kt)("p",null,"Notice that similar to the query we wrote before, the mutation also has a root field - in this case it\u2019s called ",(0,r.kt)("inlineCode",{parentName:"p"},"createPerson"),". We also already learned about the concepts of arguments for fields. In this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"createPerson")," field takes two arguments that specify the new person\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"age"),"."),(0,r.kt)("p",null,"Like with a query, we\u2019re also able to specify a payload for a mutation in which we can ask for different properties of the new ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," object. In our case, we\u2019re asking for the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," - though admittedly that\u2019s not super helpful in our example since we obviously already know them as we pass them into the mutation. However, being able to also query information when sending mutations can be a very powerful tool that allows you to retrieve new information from the server in a single roundtrip!"),(0,r.kt)("p",null,"The server response for the above mutation would look as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "createPerson": {\n    "name": "Bob",\n    "age": 36\n  }\n}\n')),(0,r.kt)("p",null,"One pattern you\u2019ll often find is that GraphQL types have unique IDs that are generated by the server when new objects are created. Extending our ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," type from before, we could add an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Person {\n  id: ID!\n  name: String!\n  age: Int!\n}\n")),(0,r.kt)("p",null,"Now, when a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," is created, you could directly ask for the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," in the payload of the mutation, since that is information that wasn\u2019t available on the client beforehand:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createPerson(name: "Alice", age: 36) {\n    id\n  }\n}\n')),(0,r.kt)("h3",{id:"realtime-updates-with-subscriptions"},"Realtime Updates with Subscriptions"),(0,r.kt)("p",null,"Another important requirement for many applications today is to have a realtime connection to the server in order to get immediately informed about important events. For this use case, GraphQL offers the concept of subscriptions."),(0,r.kt)("p",null,"When a client subscribes to an event, it will initiate and hold a steady connection to the server. Whenever that particular event then actually happens, the server pushes the corresponding data to the client. Unlike queries and mutations that follow a typical \u201crequest-response-cycle\u201d, subscriptions represent a stream of data sent over to the client."),(0,r.kt)("p",null,"Subscriptions are written using the same syntax as queries and mutations. Here\u2019s an example where we subscribe on events happening on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"subscription {\n  newPerson {\n    name\n    age\n  }\n}\n")),(0,r.kt)("p",null,"After a client sent this subscription to a server, a connection is opened between them. Then, whenever a new mutation is performed that creates a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Person"),", the server sends the information about this person over to the client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "newPerson": {\n    "name": "Jane",\n    "age": 23\n  }\n}\n')),(0,r.kt)("h2",{id:"defining-a-schema"},"Defining a Schema"),(0,r.kt)("p",null,"The schema is one of the most important concepts when working with a GraphQL API. It specifies the capabilities of the API and defines how clients can request the data. It is often seen as a contract between the server and client."),(0,r.kt)("p",null,"Generally, a schema is simply a collection of GraphQL types. However, when writing the schema for an API, there are some special root types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query { ... }\ntype Mutation { ... }\ntype Subscription { ... }\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Query"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Mutation"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscription")," types are the entry points for the requests sent by the client. To enable the ",(0,r.kt)("inlineCode",{parentName:"p"},"allPersons"),"-query that we saw before, the Query type would have to be written as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  allPersons: [Person!]!\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"allPersons")," is called a root field of the API. Considering again the example where we added the ",(0,r.kt)("inlineCode",{parentName:"p"},"last")," argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"allPersons")," field, we\u2019d have to write the ",(0,r.kt)("inlineCode",{parentName:"p"},"Query")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  allPersons(last: Int): [Person!]!\n}\n")),(0,r.kt)("p",null,"Similarly, for the ",(0,r.kt)("inlineCode",{parentName:"p"},"createPerson"),"-mutation, we\u2019ll have to add a root field to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Mutation")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Mutation {\n  createPerson(name: String!, age: Int!): Person!\n}\n")),(0,r.kt)("p",null,"Notice that this root field takes two arguments as well, the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," of the new Person."),(0,r.kt)("p",null,"Finally, for the subscriptions, we\u2019d have to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"newPerson")," root field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Subscription {\n  newPerson: Person!\n}\n")),(0,r.kt)("p",null,"Putting it all together, this is the full schema for all the queries and mutation that you have seen in this chapter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  allPersons(last: Int): [Person!]!\n  allPosts(last: Int): [Post!]!\n}\n\ntype Mutation {\n  createPerson(name: String!, age: Int!): Person!\n  updatePerson(id: ID!, name: String!, age: String!): Person!\n  deletePerson(id: ID!): Person!\n}\n\ntype Subscription {\n  newPerson: Person!\n}\n\ntype Person {\n  id: ID!\n  name: String!\n  age: Int!\n  posts: [Post!]!\n}\n\ntype Post {\n  title: String!\n  author: Person!\n}\n")))}u.isMDXComponent=!0}}]);