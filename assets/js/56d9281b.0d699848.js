"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[9412],{3338:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(4848),i=n(8453);const o={id:"validating-input",title:"Validating Input"},r=void 0,s={id:"csharp/asp-net/core-concepts/validating-input",title:"Validating Input",description:"If you ask users to enter information in a page \u2014 for example, into a form \u2014 it's important to make sure that the values that they enter are valid. For example, you don't want to process a form that's missing critical information. ASP.NET uses annotations for this data validation.",source:"@site/docs/csharp/asp-net/core-concepts/validating-input.md",sourceDirName:"csharp/asp-net/core-concepts",slug:"/csharp/asp-net/core-concepts/validating-input",permalink:"/LearningCollection/csharp/asp-net/core-concepts/validating-input",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/asp-net/core-concepts/validating-input.md",tags:[],version:"current",frontMatter:{id:"validating-input",title:"Validating Input"},sidebar:"docs",previous:{title:"Parameter Binding",permalink:"/LearningCollection/csharp/asp-net/core-concepts/parameter-binding"},next:{title:"Partial updates",permalink:"/LearningCollection/csharp/asp-net/core-concepts/partial-updates"}},l={},c=[{value:"Data Annotations",id:"data-annotations",level:2},{value:"Validation Errors",id:"validation-errors",level:2},{value:"Custom error messages",id:"custom-error-messages",level:3},{value:"Popular third party solutions",id:"popular-third-party-solutions",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"If you ask users to enter information in a page \u2014 for example, into a form \u2014 it's important to make sure that the values that they enter are valid. For example, you don't want to process a form that's missing critical information. ASP.NET uses annotations for this data validation."}),"\n",(0,a.jsx)(t.h2,{id:"data-annotations",children:"Data Annotations"}),"\n",(0,a.jsxs)(t.p,{children:["Attributes from the ",(0,a.jsx)(t.code,{children:"System.ComponentModel.DataAnnotations"})," namespace can be used to set validation rules for properties on your model. Consider the following model:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"using System.ComponentModel.DataAnnotations;\n\npublic class Product\n{\n    public int Id { get; set; }\n    [Required]\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    [Range(0, 999)]\n    public double Weight { get; set; }\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"Required"})," attribute says that the ",(0,a.jsx)(t.code,{children:"Name"})," property must not be null. The ",(0,a.jsx)(t.code,{children:"Range"})," attribute says that ",(0,a.jsx)(t.code,{children:"Weight"})," must be between 0 and 999."]}),"\n",(0,a.jsx)(t.p,{children:"Model validation does not guarantee that client data is safe. Additional validation might be needed in other layers of the application (e.g. the data layer might enforce foreign key constraints)."}),"\n",(0,a.jsx)(t.h2,{id:"validation-errors",children:"Validation Errors"}),"\n",(0,a.jsxs)(t.p,{children:["Model validation is done implicitly if a controller has the ",(0,a.jsx)(t.code,{children:"[ApiController]"})," attribute applied to it. It will return errors like the following:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'{\n  "Message": "The request is invalid.",\n  "ModelState": {\n    "product": [\n      "Required property \'Name\' not found in JSON. Path \'\', line 1, position 17."\n    ],\n    "product.Name": ["The Name field is required."],\n    "product.Weight": ["The field Weight must be between 0 and 999."]\n  }\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"custom-error-messages",children:"Custom error messages"}),"\n",(0,a.jsxs)(t.p,{children:["It is possible to adjust the returned error messages. For instance for the ",(0,a.jsx)(t.code,{children:"Required"})," attribute:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'public class Product\n{\n    public int Id { get; set; }\n    [Required(ErrorMessage = "Please provide a Name value.")]\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    [Range(0, 999)]\n    public double Weight { get; set; }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"popular-third-party-solutions",children:"Popular third party solutions"}),"\n",(0,a.jsxs)(t.p,{children:["There are some popular libraries that can be used as an alternative to attribute based validation. ",(0,a.jsx)(t.a,{href:"https://github.com/FluentValidation/FluentValidation",children:(0,a.jsx)(t.code,{children:"FluentValidation"})})," is the most popular one. It can be advantage for complex applications, since we can separate our models from our validation logic."]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var a=n(6540);const i={},o=a.createContext(i);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);