"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[3844],{94185:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"csharp/core-concepts/nullability","title":"Nullability","description":"In C#, the null literal is used to denote the absence of a value. A nullable type is a type that allows for null values.","source":"@site/docs/csharp/core-concepts/nullability.md","sourceDirName":"csharp/core-concepts","slug":"/csharp/core-concepts/nullability","permalink":"/LearningCollection/csharp/core-concepts/nullability","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/core-concepts/nullability.md","tags":[],"version":"current","frontMatter":{"title":"Nullability"},"sidebar":"docs","previous":{"title":"Inheritance","permalink":"/LearningCollection/csharp/core-concepts/inheritance"},"next":{"title":"Generics","permalink":"/LearningCollection/csharp/core-concepts/generics"}}');var a=l(74848),r=l(28453);const s={title:"Nullability"},o=void 0,c={},i=[];function u(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["In C#, the ",(0,a.jsx)(n.code,{children:"null"})," literal is used to denote the absence of a value. A nullable type is a type that allows for ",(0,a.jsx)(n.code,{children:"null"})," values."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Prior to C# 8.0, reference types were always nullable and value types were not. A value type can be made nullable though by appending it with a question mark (",(0,a.jsx)(n.code,{children:"?"}),")."]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'string nullableReferenceType = "hello";\nnullableReferenceType = null;   // Valid as type is nullable\n\nint nonNullableValueType = 5;\nnonNullableValueType = null;    // Compile error as type is not nullable\n\nint? nullableValueType = 5;     // Define nullable value type\nnullableValueType = null;       // Valid as type is nullable\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Accessing a member of a variable which value is ",(0,a.jsx)(n.code,{children:"null"})," will compile fine, but result in a ",(0,a.jsx)(n.code,{children:"NullReferenceException"})," being thrown at runtime:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"string sentence = null;\n\n// Throws NullReferenceException at runtime\nsentence.Length;\n"})}),"\n",(0,a.jsx)(n.p,{children:"To counter this common type of mistake, C# 8 allows one to opt-into a feature that makes reference types non-nullable by default:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'string nonNullableReferenceType = "book";\nnonNullableReferenceType = null;  // Compile warning (no error!)\n\nstring? nullableReferenceType = "movie";\nnullableReferenceType = null;     // Valid as type is nullable\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"??"})," operator allows one to return a default value when the value is ",(0,a.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'string? name1 = "John";\nname1 ?? "Paul"; // => "John"\n\nstring? name2 = null;\nname2 ?? "George"; // => "George"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"?."})," operator allows one to call members safely on a possibly ",(0,a.jsx)(n.code,{children:"null"})," value:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'string? fruit = "apple";\nfruit?.Length; // => 5\n\nstring? vegetable = null;\nvegetable?.Length; // => null\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>s,x:()=>o});var t=l(96540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);