"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[289],{7772:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=s(5893),c=s(1151);const i={title:"Inheritance"},r=void 0,a={id:"csharp/core-concepts/inheritance",title:"Inheritance",description:"In C#, a class hierarchy can be defined using inheritance, which allows a derived class (e.g. Car) to inherit the behavior and data of its parent class (e.g. Vehicle). If no parent is specified, the class inherits from the object class.",source:"@site/docs/csharp/core-concepts/inheritance.md",sourceDirName:"csharp/core-concepts",slug:"/csharp/core-concepts/inheritance",permalink:"/LearningCollection/csharp/core-concepts/inheritance",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/core-concepts/inheritance.md",tags:[],version:"current",frontMatter:{title:"Inheritance"},sidebar:"docs",previous:{title:"IEnumerable",permalink:"/LearningCollection/csharp/core-concepts/interfaces/ienumerable"},next:{title:"Nullability",permalink:"/LearningCollection/csharp/core-concepts/nullability"}},o={},l=[];function d(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In C#, a class hierarchy can be defined using inheritance, which allows a derived class (e.g. ",(0,t.jsx)(n.code,{children:"Car"}),") to inherit the behavior and data of its parent class (e.g. ",(0,t.jsx)(n.code,{children:"Vehicle"}),"). If no parent is specified, the class inherits from the object class."]}),"\n",(0,t.jsx)(n.p,{children:"Parent classes can provide functionality to derived classes in three ways:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Define a regular method"}),"\n",(0,t.jsxs)(n.li,{children:["Define a ",(0,t.jsx)(n.code,{children:"virtual"})," method, which is like a regular method but one that derived classes can change"]}),"\n",(0,t.jsxs)(n.li,{children:["Define an ",(0,t.jsx)(n.code,{children:"abstract"})," method, which is a method without an implementation that derived classes must implement. A class with ",(0,t.jsx)(n.code,{children:"abstract"})," methods must be marked as ",(0,t.jsx)(n.code,{children:"abstract"})," too. Abstract classes cannot be instantiated."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"protected"})," access modifier allows a parent class member to be accessed in a derived class, but blocks access from other classes."]}),"\n",(0,t.jsxs)(n.p,{children:["Derived classes can access parent class members through the ",(0,t.jsx)(n.code,{children:"base"})," keyword:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Inherits from the 'object' class\nabstract class Vehicle\n{\n    // Can be overridden\n    public virtual void Drive()\n    {\n    }\n\n    // Must be overridden\n    protected abstract int Speed();\n}\n\nclass Car : Vehicle\n{\n    public override void Drive()\n    {\n        // Override virtual method\n\n        // Call parent implementation\n        base.Drive();\n    }\n\n    protected override int Speed()\n    {\n        // Implement abstract method\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The constructor of a derived class will automatically call its parent's constructor before executing its own constructor's logic. Arguments can be passed to a parent class' constructor using the ",(0,t.jsx)(n.code,{children:"base"})," keyword:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'abstract class Vehicle\n{\n    protected Vehicle(int wheels)\n    {\n        Console.WriteLine("Called first");\n    }\n}\n\nclass Car : Vehicle\n{\n    public Car() : base(4)\n    {\n        Console.WriteLine("Called second");\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Where more than one class is derived from a base class the two (or more) classes will often implement different versions of a base class method. This is a very important principle called polymorphism. For instance in a variation on the above example we show how code using ",(0,t.jsx)(n.code,{children:"Vehicle"})," can change its behavior depending on what type of vehicle has been instantiated:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'abstract class Vehicle\n{\n   public abstract string GetDescription();\n}\n\nclass Car : Vehicle\n{\n   public Car()\n   {\n   }\n\n   public override string GetDescription()\n   {\n      return "Runabout";\n   }\n}\n\nclass Rig : Vehicle\n{\n   public Rig()\n   {\n   }\n\n   public override string GetDescription()\n   {\n      return "Big Rig";\n   }\n}\n\nVehicle v1 = new Car();\nVehicle v2 = new Rig();\n\nv1.GetDescription();\n// => Runabout\nv2.GetDescription();\n// => Big Rig\n'})})]})}function h(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>r});var t=s(7294);const c={},i=t.createContext(c);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);