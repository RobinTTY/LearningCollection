"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8332],{3619:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=t(5893),i=t(1151);const o={id:"arithmetic-operators",title:"Arithmetic Operators",sidebar_position:3},s=void 0,c={id:"web/javascript/core-concepts/arithmetic-operators",title:"Arithmetic Operators",description:"Arithmetic operators are needed to perform operations on different types of data. There are 2 basic types of arithmetic operators:",source:"@site/docs/web/javascript/core-concepts/arithmetic-operators.md",sourceDirName:"web/javascript/core-concepts",slug:"/web/javascript/core-concepts/arithmetic-operators",permalink:"/LearningCollection/web/javascript/core-concepts/arithmetic-operators",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/javascript/core-concepts/arithmetic-operators.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"arithmetic-operators",title:"Arithmetic Operators",sidebar_position:3},sidebar:"docs",previous:{title:"Types",permalink:"/LearningCollection/web/javascript/core-concepts/types"},next:{title:"JSON",permalink:"/LearningCollection/web/javascript/core-concepts/json"}},a={},l=[{value:"Binary arithmetic operators",id:"binary-arithmetic-operators",level:2},{value:"Unary arithmetic operators",id:"unary-arithmetic-operators",level:2}];function d(e){const r={code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:"Arithmetic operators are needed to perform operations on different types of data. There are 2 basic types of arithmetic operators:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Binary operators"})," require two operands, such as ",(0,n.jsx)(r.code,{children:"x + y"})," or ",(0,n.jsx)(r.code,{children:"a * b"})]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Unary operators"})," require only one operand, such as ",(0,n.jsx)(r.code,{children:"-x"})," or ",(0,n.jsx)(r.code,{children:"+x"})]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"binary-arithmetic-operators",children:"Binary arithmetic operators"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Addition ",(0,n.jsx)(r.code,{children:"+"})]}),"\n",(0,n.jsxs)(r.li,{children:["Subtraction ",(0,n.jsx)(r.code,{children:"-"})]}),"\n",(0,n.jsxs)(r.li,{children:["Multiplication ",(0,n.jsx)(r.code,{children:"*"})]}),"\n",(0,n.jsxs)(r.li,{children:["Division ",(0,n.jsx)(r.code,{children:"/"})]}),"\n",(0,n.jsxs)(r.li,{children:["Remainder ",(0,n.jsx)(r.code,{children:"%"})]}),"\n",(0,n.jsxs)(r.li,{children:["Exponentiation ",(0,n.jsx)(r.code,{children:"**"})]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"unary-arithmetic-operators",children:"Unary arithmetic operators"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["The unary plus operator indicates a positive value. It's an optional operator if you only work with numbers","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["e.g. ",(0,n.jsx)(r.code,{children:"console.log(+7)"})]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["The unary minus operator makes a value or an expression negative","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["e.g. ",(0,n.jsx)(r.code,{children:"console.log(-(100 + 5))"})]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>c,a:()=>s});var n=t(7294);const i={},o=n.createContext(i);function s(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);