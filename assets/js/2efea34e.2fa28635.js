"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[9570],{2729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=n(5893),a=n(1151);const i={id:"altering-tables",title:"Altering Tables",sidebar_position:2},o=void 0,l={id:"databases/sql/core-concepts/altering-tables",title:"Altering Tables",description:"INSERT statement",source:"@site/docs/databases/sql/core-concepts/altering-tables.md",sourceDirName:"databases/sql/core-concepts",slug:"/databases/sql/core-concepts/altering-tables",permalink:"/LearningCollection/databases/sql/core-concepts/altering-tables",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/databases/sql/core-concepts/altering-tables.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"altering-tables",title:"Altering Tables",sidebar_position:2},sidebar:"docs",previous:{title:"Querying Tables",permalink:"/LearningCollection/databases/sql/core-concepts/querying-tables"},next:{title:"Functions",permalink:"/LearningCollection/databases/sql/core-concepts/functions"}},r={},d=[{value:"<code>INSERT</code> statement",id:"insert-statement",level:2},{value:"SQL Injection",id:"sql-injection",level:3},{value:"<code>DELETE</code> statement",id:"delete-statement",level:2},{value:"Soft Deletes",id:"soft-deletes",level:3},{value:"<code>UPDATE</code> statement",id:"update-statement",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h2,{id:"insert-statement",children:[(0,s.jsx)(t.code,{children:"INSERT"})," statement"]}),"\n",(0,s.jsxs)(t.p,{children:["SQL we can add records to a table using an ",(0,s.jsx)(t.code,{children:"INSERT INTO"})," statement. When using an ",(0,s.jsx)(t.code,{children:"INSERT"})," statement we must first specify the table we are inserting the record into, followed by the fields within that table we want to add ",(0,s.jsx)(t.code,{children:"VALUES"})," to."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"INSERT INTO employees(id, name, title)\nVALUES (1, 'Allan', 'Engineer');\n"})}),"\n",(0,s.jsx)(t.p,{children:"When working with SQL within a software system, like a backend web application, you'll typically have access to a programming language. For example, a backend server written in Go can use string concatenation to dynamically create SQL statements, and that's usually how it's done:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"sqlQuery := fmt.Sprintf(`\nINSERT INTO users(name, age, country_code)\nVALUES ('%s', %v, %s);\n`, user.Name, user.Age, user.CountryCode)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"sql-injection",children:"SQL Injection"}),"\n",(0,s.jsxs)(t.p,{children:["The example above is an oversimplification of what really happens when you access a database using Go code. In essence, it's correct. String interpolation is how production systems access databases. That said, it must be done carefully to not be a ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/SQL_injection",children:"security vulnerability"}),"."]}),"\n",(0,s.jsxs)(t.h2,{id:"delete-statement",children:[(0,s.jsx)(t.code,{children:"DELETE"})," statement"]}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"DELETE"})," statement removes a record from a table that match the ",(0,s.jsx)(t.code,{children:"WHERE"})," clause. As an example:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"DELETE from employees WHERE id = 251;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This ",(0,s.jsx)(t.code,{children:"DELETE"})," statement removes all records from the ",(0,s.jsx)(t.code,{children:"employees"})," table that have an ",(0,s.jsx)(t.code,{children:"id"})," of ",(0,s.jsx)(t.code,{children:"251"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"soft-deletes",children:"Soft Deletes"}),"\n",(0,s.jsx)(t.p,{children:'Deleting data can be a dangerous operation. Once removed, data can be really hard if not impossible to restore! Besides using backups we can use a technique called "soft deletes".'}),"\n",(0,s.jsxs)(t.p,{children:['A "soft delete" is when you don\'t actually delete data from your database, but instead just "mark" the data as deleted. For example, you might set a ',(0,s.jsx)(t.code,{children:"deleted_at"})," date on the row you want to delete. Then, in your queries you ignore anything that has a ",(0,s.jsx)(t.code,{children:"deleted_at"})," date set. The idea is that this allows your application to behave as if it's deleting data, but you can always go back and restore any data that's been removed."]}),"\n",(0,s.jsx)(t.p,{children:"It is important to keep in mind that this will introduce complexity to your application and other concerns such as those related to GDPR regulation about data deletion."}),"\n",(0,s.jsxs)(t.h2,{id:"update-statement",children:[(0,s.jsx)(t.code,{children:"UPDATE"})," statement"]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"UPDATE"})," statement in SQL allows us to update the fields of a record. We can even update many records depending on how we write the statement."]}),"\n",(0,s.jsxs)(t.p,{children:["An ",(0,s.jsx)(t.code,{children:"UPDATE"})," statement specifies the table that needs to be updated, followed by the fields and their new values by using the ",(0,s.jsx)(t.code,{children:"SET"})," keyword. Lastly a ",(0,s.jsx)(t.code,{children:"WHERE"})," clause indicates the record(s) to update."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"UPDATE employees\nSET job_title = 'Backend Engineer', salary = 150000\nWHERE id = 251;\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>o});var s=n(7294);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);