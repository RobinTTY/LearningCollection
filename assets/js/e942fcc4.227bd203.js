"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[484],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),g=a,m=c["".concat(l,".").concat(g)]||c[g]||u[g]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8337:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={id:"IndexingAggregationsPipeline",title:"Indexing and Aggregation Pipeline"},l=void 0,d={unversionedId:"Databases/MongoDB/M001 MongoDB Basics/IndexingAggregationsPipeline",id:"Databases/MongoDB/M001 MongoDB Basics/IndexingAggregationsPipeline",isDocsHomePage:!1,title:"Indexing and Aggregation Pipeline",description:"Aggregation Framework",source:"@site/docs/Databases/MongoDB/M001 MongoDB Basics/Indexing and Aggregation Pipeline.md",sourceDirName:"Databases/MongoDB/M001 MongoDB Basics",slug:"/Databases/MongoDB/M001 MongoDB Basics/IndexingAggregationsPipeline",permalink:"/LearningCollection/Databases/MongoDB/M001 MongoDB Basics/IndexingAggregationsPipeline",editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Databases/MongoDB/M001 MongoDB Basics/Indexing and Aggregation Pipeline.md",version:"current",frontMatter:{id:"IndexingAggregationsPipeline",title:"Indexing and Aggregation Pipeline"},sidebar:"mySidebar",previous:{title:"Importing and Exporting data",permalink:"/LearningCollection/Databases/MongoDB/M001 MongoDB Basics/importingExportingData"},next:{title:"Querying, Creating, Updating and Deleting documents with Mongo shell",permalink:"/LearningCollection/Databases/MongoDB/M001 MongoDB Basics/queryingCreatingUpdatingDeleting"}},p=[{value:"Aggregation Framework",id:"aggregation-framework",children:[{value:"Syntax",id:"syntax",children:[]},{value:"$group operator",id:"group-operator",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Lab: Aggregation Framework",id:"lab-aggregation-framework",children:[]},{value:"$sort and $limit operator",id:"sort-and-limit-operator",children:[]}]},{value:"Indexes",id:"indexes",children:[{value:"When to index",id:"when-to-index",children:[]},{value:"Create an index",id:"create-an-index",children:[]},{value:"Compound Index",id:"compound-index",children:[]}]},{value:"Upsert - Update or Insert",id:"upsert---update-or-insert",children:[{value:"Quiz",id:"quiz",children:[]}]}],u={toc:p};function c(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"aggregation-framework"},"Aggregation Framework"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"another way to query data in MongoDB"),(0,i.kt)("li",{parentName:"ul"},"everything that can be done with the query language can also be done with the aggregation framework"),(0,i.kt)("li",{parentName:"ul"},"new ways to work with data like group, compute, reshape, etc.")),(0,i.kt)("h3",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Find all documents that have Wifi as one of the amenities. Only include price and address in the resulting cursor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'// with MQL\ndb.listingsAndReviews.find({ "amenities": "Wifi" },\n                           { "price": 1, "address": 1, "_id": 0 }).pretty()\n\n// with the aggregation framework\ndb.listingsAndReviews.aggregate([\n                                  { "$match": { "amenities": "Wifi" } },\n                                  { "$project": { "price": 1,\n                                                  "address": 1,\n                                                  "_id": 0 }}]).pretty()\n')),(0,i.kt)("p",null,"With the aggregation framework we can build pipelines:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"aggregation pipeline",src:n(31).Z})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," It matters in which order the different pipeline stages are since each pipeline stage uses the results of the preceding stage."),(0,i.kt)("h3",{id:"group-operator"},"$group operator"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"group",src:n(6756).Z}),"\n",(0,i.kt)("img",{alt:"group2",src:n(1382).Z})),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Project only the address field value for each document, then group all documents into one document per address.country value:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'db.listingsAndReviews.aggregate([ { "$project": { "address": 1, "_id": 0 }},\n                                  { "$group": { "_id": "$address.country" }}])\n')),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"{ _id: 'Turkey' }\n{ _id: 'Spain' }\n{ _id: 'Portugal' }\n{ _id: 'Hong Kong' }\n{ _id: 'China' }\n{ _id: 'United States' }\n{ _id: 'Australia' }\n{ _id: 'Canada' }\n{ _id: 'Brazil' }\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Project only the address field value for each document, then group all documents into one document per address.country value, and count one for each document in each group:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'db.listingsAndReviews.aggregate([\n                                  { "$project": { "address": 1, "_id": 0 }},\n                                  { "$group": { "_id": "$address.country",\n                                                "count": { "$sum": 1 } } }\n                                ])\n')),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"{ _id: 'United States', count: 1222 }\n{ _id: 'Hong Kong', count: 600 }\n{ _id: 'Turkey', count: 661 }\n{ _id: 'Spain', count: 633 }\n{ _id: 'Brazil', count: 606 }\n{ _id: 'Portugal', count: 555 }\n{ _id: 'Canada', count: 649 }\n{ _id: 'China', count: 19 }\n{ _id: 'Australia', count: 610 }\n")),(0,i.kt)("h3",{id:"lab-aggregation-framework"},"Lab: Aggregation Framework"),(0,i.kt)("p",null,"What room types are present in the sample_airbnb.listingsAndReviews collection?"),(0,i.kt)("p",null,"Query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'db.listingsAndReviews.aggregate([ { "$group": { "_id": "$room_type" } }])\n')),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"{ _id: 'Entire home/apt' }\n{ _id: 'Private room' }\n{ _id: 'Shared room' }\n")),(0,i.kt)("h3",{id:"sort-and-limit-operator"},"$sort and $limit operator"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"$sort")," Syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'// 1: increasing sort, -1: decreasing sort\ndb.zips.find().sort({ "pop": 1 })\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"$limit")," Syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'// only return 10 results of the resulting sort cursor\ndb.zips.find().sort({ "pop": -1 }).limit(10)\n')),(0,i.kt)("h2",{id:"indexes"},"Indexes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Indexes are special data structures that store a small portion of the collection's data set in an easy to traverse form"),(0,i.kt)("li",{parentName:"ul"},"Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query statement"),(0,i.kt)("li",{parentName:"ul"},"Indexes therefore make queries more efficient"),(0,i.kt)("li",{parentName:"ul"},"They are one of the most impactful ways to improve query performance")),(0,i.kt)("h3",{id:"when-to-index"},"When to index"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Support often used queries"),(0,i.kt)("li",{parentName:"ul"},"For example if you often use a specific field for filtering and aggregation it is useful to create an index for this field")),(0,i.kt)("h3",{id:"create-an-index"},"Create an index"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'// Creates an index in increasing order\n// It doesn\'t really matter whether the index was created in increasing or decreasing order when it is a simple single-field index.\ndb.trips.createIndex({ "birth year": 1 })\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Queries",src:n(8880).Z})),(0,i.kt)("p",null,"First query can use the index, second query needs to scan full collection for the filter but can use the index for the sort."),(0,i.kt)("h3",{id:"compound-index"},"Compound Index"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"MongoDB also supports user-defined indexes on multiple fields, i.e. compound indexes"),(0,i.kt)("li",{parentName:"ul"},"The order of fields listed in a compound index has significance. For instance, if a compound index consists of ",(0,i.kt)("inlineCode",{parentName:"li"},"{ userid: 1, score: -1 }"),", the index sorts first by userid and then, within each userid value, sorts by score"),(0,i.kt)("li",{parentName:"ul"},"For compound indexes and sort operations, the sort order (i.e. ascending or descending) of the index keys can determine whether the index can support a sort operation")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"compund index",src:n(7).Z})),(0,i.kt)("p",null,"Helps with the query at the bottom since the documents are indexed by the station id and already sorted (indexed) by the birth year."),(0,i.kt)("h2",{id:"upsert---update-or-insert"},"Upsert - Update or Insert"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Definition:")," Upsert will update if a matching document exists otherwise it will insert a new document"),(0,i.kt)("p",null,"Everything in MQL that is used to locate a document in a collection can also be used to modify this document:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"db.collection.updateOne({<query to locate>}, {<update>})\n")),(0,i.kt)("p",null,"Upsert is a hybrid of update and insert, it should only be used when it is needed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'// upsert is by default false\ndb.collection.updateOne({<query>},{<update>},{"upsert": true})\n')),(0,i.kt)("h3",{id:"quiz"},"Quiz"),(0,i.kt)("p",null,"How does the upsert option work?"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Claim:")," It is used with the update operator, and needs to have its value specified every time that the update operator is called.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Answer:")," This is incorrect. The upsert option only needs its value specified if you want to change the default false setting to true."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Claim:")," By default upsert is set to false.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Answer:")," This is correct. If the upsert option is not specified, then it will have the value of false by default."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Claim:")," When upsert is set to true and the query predicate returns an empty cursor, the update operation creates a new document using the directive from the query predicate and the update predicate.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Answer:")," This is correct. When upsert is set to true it can perform an insert if the query predicate doesn't return a matching document."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Claim:")," When upsert is set to false and the query predicate returns an empty cursor then there will be no updated documents as a result of this operation.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Answer:")," This is correct. When upsert is set to false an update will happen only when the query predicate is matched with a document from the collection."))}c.isMDXComponent=!0},31:function(e,t,n){t.Z=n.p+"assets/images/AggregationPipeline-d390c3bf1e78d0964af09f51bdec4bb9.png"},7:function(e,t,n){t.Z=n.p+"assets/images/CompoundIndex-6d318dda7b3275a05d3061e6559e016a.png"},6756:function(e,t,n){t.Z=n.p+"assets/images/Group-9e60df73a5e003fd0dbfd57ac3765db4.png"},1382:function(e,t,n){t.Z=n.p+"assets/images/Group2-386e9168c7bfebd9f21781b165e9c402.png"},8880:function(e,t,n){t.Z=n.p+"assets/images/Queries-17fd69e458f022e9cc1de9dce07b97a0.png"}}]);