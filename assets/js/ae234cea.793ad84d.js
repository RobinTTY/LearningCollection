"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[7785],{53147:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"csharp/advanced-concepts/asynchronous-code/task-factory-start-new","title":"Task.Factory.StartNew()","description":"TODO: Improve this documentation","source":"@site/docs/csharp/advanced-concepts/asynchronous-code/task-factory-start-new.md","sourceDirName":"csharp/advanced-concepts/asynchronous-code","slug":"/csharp/advanced-concepts/asynchronous-code/task-factory-start-new","permalink":"/LearningCollection/csharp/advanced-concepts/asynchronous-code/task-factory-start-new","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/advanced-concepts/asynchronous-code/task-factory-start-new.md","tags":[],"version":"current","frontMatter":{"id":"task-factory-start-new","title":"Task.Factory.StartNew()"},"sidebar":"docs","previous":{"title":"Asynchronous Programming","permalink":"/LearningCollection/csharp/advanced-concepts/asynchronous-code/asyncProgramming"},"next":{"title":"Attributes","permalink":"/LearningCollection/csharp/advanced-concepts/attributes"}}');var a=e(74848),o=e(28453);const c={id:"task-factory-start-new",title:"Task.Factory.StartNew()"},r=void 0,i={},l=[];function d(t){const n={li:"li",p:"p",ul:"ul",...(0,o.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"TODO: Improve this documentation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"gives you the opportunity to define a lot of useful things about the thread you want to create, while Task.Run doesn't provide this"}),"\n",(0,a.jsxs)(n.li,{children:["you can attach options to a task for instance:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Task.Factory.StartNew(..., TaskCreationOptions.LongRunning);"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Task.Run method in no way obsoletes Task.Factory.StartNew, but rather should simply be thought of as a quick way to use Task.Factory.StartNew without needing to specify a bunch of parameters"}),"\n",(0,a.jsx)(n.li,{children:"It\u2019s a shortcut. In fact, Task.Run is actually implemented in terms of the same logic used for Task.Factory.StartNew, just passing in some default parameters"}),"\n",(0,a.jsxs)(n.li,{children:["When you pass an Action to Task.Run:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Task.Run(someAction);"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["that\u2019s exactly equivalent to:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Task.Factory.StartNew(someAction, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);"}),"\n"]}),"\n"]}),"\n"]})]})}function u(t={}){const{wrapper:n}={...(0,o.R)(),...t.components};return n?(0,a.jsx)(n,{...t,children:(0,a.jsx)(d,{...t})}):d(t)}},28453:(t,n,e)=>{e.d(n,{R:()=>c,x:()=>r});var s=e(96540);const a={},o=s.createContext(a);function c(t){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function r(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:c(t.components),s.createElement(o.Provider,{value:n},t.children)}}}]);