"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[451],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(r),h=a,f=p["".concat(s,".").concat(h)]||p[h]||d[h]||o;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>l});var n=r(7294),a=r(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:r,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,l),hidden:r},t)}},4866:(e,t,r)=>{r.d(t,{Z:()=>T});var n=r(7462),a=r(7294),o=r(6010),l=r(2466),i=r(6550),s=r(1980),c=r(7392),u=r(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}function d(e){const{values:t,children:r}=e;return(0,a.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function h(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:r}=e;const n=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,s._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function m(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,o=d(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[s,c]=f({queryString:r,groupId:n}),[p,m]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,u.Nk)(r);return[n,(0,a.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:n}),v=(()=>{const e=s??p;return h({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{v&&i(v)}),[v]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),m(e)}),[c,m,o]),tabValues:o}}var v=r(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:r,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,r=u.indexOf(t),n=c[r].value;n!==i&&(p(t),s(n))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=u.indexOf(e.currentTarget)+1;t=u[r]??u[0];break}case"ArrowLeft":{const r=u.indexOf(e.currentTarget)-1;t=u[r]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},t)},c.map((e=>{let{value:t,label:r,attributes:l}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:h,onClick:d},l,{className:(0,o.Z)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":i===t})}),r??t)})))}function y(e){let{lazy:t,children:r,selectedValue:n}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=m(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},a.createElement(b,(0,n.Z)({},e,t)),a.createElement(y,(0,n.Z)({},e,t)))}function T(e){const t=(0,v.Z)();return a.createElement(k,(0,n.Z)({key:String(t)},e))}},9726:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=r(7462),a=(r(7294),r(3905)),o=r(4866),l=r(5162);const i={id:"data-fetching",title:"Data Fetching",sidebar_position:3},s=void 0,c={unversionedId:"apis/graphql/hot-chocolate/data-fetching",id:"apis/graphql/hot-chocolate/data-fetching",title:"Data Fetching",description:"This page explains different aspects of data fetching in Hot Chocolate.",source:"@site/docs/apis/graphql/hot-chocolate/data-fetching.mdx",sourceDirName:"apis/graphql/hot-chocolate",slug:"/apis/graphql/hot-chocolate/data-fetching",permalink:"/LearningCollection/apis/graphql/hot-chocolate/data-fetching",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/apis/graphql/hot-chocolate/data-fetching.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"data-fetching",title:"Data Fetching",sidebar_position:3},sidebar:"finance",previous:{title:"Important Annotations",permalink:"/LearningCollection/apis/graphql/hot-chocolate/defining-a-schema/important-annotations"},next:{title:"Record Types",permalink:"/LearningCollection/C-Sharp/Core Concepts/Types/recordTypes"}},u={},p=[{value:"Resolvers",id:"resolvers",level:2},{value:"Resolver Tree",id:"resolver-tree",level:3},{value:"Defining a Resolver",id:"defining-a-resolver",level:3},{value:"Properties",id:"properties",level:4},{value:"Regular Resolver",id:"regular-resolver",level:4},{value:"Async Resolver",id:"async-resolver",level:4},{value:"ResolveWith",id:"resolvewith",level:4},{value:"Arguments",id:"arguments",level:3}],d={toc:p},h="wrapper";function f(e){let{components:t,...i}=e;return(0,a.kt)(h,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This page explains different aspects of data fetching in Hot Chocolate."),(0,a.kt)("h2",{id:"resolvers"},"Resolvers"),(0,a.kt)("p",null,"Resolvers are the main building blocks when it comes to fetching data. Every field in our GraphQL schema is backed by such a resolver function, responsible for returning the field's value. Since a resolver is just a function, we can use it to retrieve data from a database, a REST service, or any other data source as needed."),(0,a.kt)("h3",{id:"resolver-tree"},"Resolver Tree"),(0,a.kt)("p",null,"A resolver tree is a projection of a GraphQL operation that is prepared for execution. For better understanding, let's imagine we have a simple GraphQL query like the following, where we select some fields of the currently logged-in user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  me {\n    name\n    company {\n      id\n      name\n    }\n  }\n}\n")),(0,a.kt)("p",null,"In Hot Chocolate, this query results in the following resolver tree."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"resolver-tree",src:r(9063).Z,width:"1350",height:"358"})),(0,a.kt)("p",null,"This tree will be traversed by the execution engine, starting with one or more root resolvers. In the above example the ",(0,a.kt)("inlineCode",{parentName:"p"},"me")," field represents the only root resolver."),(0,a.kt)("p",null,"Field resolvers that are sub-selections of a field, can only be executed after a value has been resolved for their parent field. In the case of the above example this means that the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"company")," resolvers can only run, after the ",(0,a.kt)("inlineCode",{parentName:"p"},"me")," resolver has finished."),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Resolvers of field sub-selections can and will be executed in parallel.\nBecause of this it is important that resolvers, with the exception of top level mutation field resolvers, do not contain side-effects, since their execution order may vary.")),(0,a.kt)("p",null,"The execution of a request finishes, once each resolver of the selected fields has produced a result. This is of course an oversimplification that differs from the actual implementation."),(0,a.kt)("h3",{id:"defining-a-resolver"},"Defining a Resolver"),(0,a.kt)("p",null,"Resolvers can be defined in a way that should feel very familiar to C# developers, especially in the Annotation-based approach."),(0,a.kt)("h4",{id:"properties"},"Properties"),(0,a.kt)("p",null,"Hot Chocolate automatically converts properties with a public get accessor to a resolver that simply returns its value."),(0,a.kt)("h4",{id:"regular-resolver"},"Regular Resolver"),(0,a.kt)("p",null,"A regular resolver is just a simple method, which returns a value."),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"annotation",label:"Annotation-based",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Query\n{\n    public string Foo() => "Bar";\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services\n            .AddGraphQLServer()\n            .AddQueryType<Query>();\n    }\n}\n'))),(0,a.kt)(l.Z,{value:"code",label:"Code-first",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Query\n{\n    public string Foo() => "Bar";\n}\n\npublic class QueryType: ObjectType<Query>\n{\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\n    {\n        descriptor\n            .Field(f => f.Foo())\n            .Type<NonNullType<StringType>>();\n    }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services\n            .AddGraphQLServer()\n            .AddQueryType<QueryType>();\n    }\n}\n'))),(0,a.kt)(l.Z,{value:"schema",label:"Schema-first",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Query\n{\n    public string Foo() => "Bar";\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services\n            .AddGraphQLServer()\n            .AddDocumentFromString(@"\n                type Query {\n                    foo: String!\n                }\n            ")\n            .BindRuntimeType<Query>();\n    }\n}\n')))),(0,a.kt)("h4",{id:"async-resolver"},"Async Resolver"),(0,a.kt)("p",null,"Most data fetching operations, like calling a service or communicating with a database, will be asynchronous.\nIn Hot Chocolate, we can simply mark our resolver methods and delegates as ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," or return a ",(0,a.kt)("inlineCode",{parentName:"p"},"Task<T>")," and it becomes an async-capable resolver.\nWe can also add a ",(0,a.kt)("inlineCode",{parentName:"p"},"CancellationToken")," argument to our resolver. Hot Chocolate will automatically cancel this token if the request has been aborted."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Query\n{\n    public async Task<string> Foo(CancellationToken ct)\n    {\n        // Omitted code for brevity\n    }\n}\n")),(0,a.kt)("p",null,"When using a delegate resolver, the ",(0,a.kt)("inlineCode",{parentName:"p"},"CancellationToken")," is passed as second argument to the delegate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'descriptor\n    .Field("foo")\n    .Resolve((context, ct) =>\n    {\n        // Omitted code for brevity\n    });\n')),(0,a.kt)("h4",{id:"resolvewith"},"ResolveWith"),(0,a.kt)("p",null,"Thus far we have looked at two ways to specify resolvers in Code-first:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add new methods to the CLR type, e.g. the ",(0,a.kt)("inlineCode",{parentName:"li"},"T")," type of ",(0,a.kt)("inlineCode",{parentName:"li"},"ObjectType<T>")),(0,a.kt)("li",{parentName:"ul"},"Add new fields to the schema type in the form of delegates")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'descriptor.Field("foo").Resolve(context => )\n')),(0,a.kt)("p",null,"But there's a third way. We can describe our field using the ",(0,a.kt)("inlineCode",{parentName:"p"},"descriptor"),", but instead of a resolver delegate, we can point to a method on another class, responsible for resolving this field."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public class FooResolvers\n{\n    public string GetFoo(string arg, [Service] FooService service)\n    {\n        // Omitted code for brevity\n    }\n}\n\npublic class QueryType : ObjectType\n{\n    protected override void Configure(IObjectTypeDescriptor descriptor)\n    {\n        descriptor\n            .Field("foo")\n            .Argument("arg", a => a.Type<NonNullType<StringType>>())\n            .ResolveWith<FooResolvers>(r => r.GetFoo(default, default));\n    }\n}\n')),(0,a.kt)("h3",{id:"arguments"},"Arguments"))}f.isMDXComponent=!0},9063:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/resolver-tree-4b499f0440df4510ac7f98c5331a83ad.png"}}]);