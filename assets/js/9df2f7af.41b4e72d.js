"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[924],{63483:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"kubernetes/storage","title":"Storage","description":"- Different kinds of storage is managed through the Container Storage Interface (CSI)","source":"@site/docs/kubernetes/storage.md","sourceDirName":"kubernetes","slug":"/kubernetes/storage","permalink":"/LearningCollection/kubernetes/storage","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/kubernetes/storage.md","tags":[],"version":"current","frontMatter":{"id":"storage","title":"Storage"},"sidebar":"docs","previous":{"title":"network","permalink":"/LearningCollection/kubernetes/network"},"next":{"title":"Introduction","permalink":"/LearningCollection/graphql/intro"}}');var i=s(74848),r=s(28453);const l={id:"storage",title:"Storage"},o=void 0,a={},c=[{value:"Persistent Volumes (PV)",id:"persistent-volumes-pv",level:2},{value:"Persistent Volume Claims (PVC)",id:"persistent-volume-claims-pvc",level:2},{value:"Volumes",id:"volumes",level:2},{value:"Storage Classes",id:"storage-classes",level:2}];function d(e){const n={h2:"h2",li:"li",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Different kinds of storage is managed through the Container Storage Interface (CSI)"}),"\n",(0,i.jsxs)(n.li,{children:["CSI allows Kubernetes to use storage systems from different vendors","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"e.g. AWS EBS, Google Cloud Persistent Disk, Azure Disk, etc."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"CSI is not Kubernetes-specific, it is a universal standard for container orchestration systems"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"persistent-volumes-pv",children:"Persistent Volumes (PV)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Piece of storage in the cluster"}),"\n",(0,i.jsx)(n.li,{children:"Lifecycle independent of any pod that uses it"}),"\n",(0,i.jsx)(n.li,{children:"Depending on the underlying storage type can have different performance characteristics"}),"\n",(0,i.jsx)(n.li,{children:"Different kinds of storage are described through Storage Classes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"persistent-volume-claims-pvc",children:"Persistent Volume Claims (PVC)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Request for storage by a user"}),"\n",(0,i.jsx)(n.li,{children:"PVCs consume the available PV storage"}),"\n",(0,i.jsx)(n.li,{children:"Claims can request specific size and access modes (e.g. ReadWriteOnce, ReadOnlyMany)"}),"\n",(0,i.jsx)(n.li,{children:"1:1 relationship between PVC and PV"}),"\n",(0,i.jsxs)(n.li,{children:["Policy decides what happens when a PVC is deleted","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Retain: PV is not deleted, can be reused"}),"\n",(0,i.jsx)(n.li,{children:"Delete: PV is deleted along with the underlying storage"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Even if a PVC is deleted, the underlying PV can still exist based on the policy"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"volumes",children:"Volumes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Decouples storage from the container"}),"\n",(0,i.jsx)(n.li,{children:"Lifecycle is coupled to the pod"}),"\n",(0,i.jsx)(n.li,{children:"Enables safe container restart and inter-container data sharing"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"storage-classes",children:"Storage Classes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Describe a class of storage which can be used"}),"\n",(0,i.jsx)(n.li,{children:"Through the storage class name a user can request storage"}),"\n",(0,i.jsx)(n.li,{children:"A default storage class can be specified as fallback"}),"\n",(0,i.jsxs)(n.li,{children:["Dynamic Volume provisioning is used to automatically provision storage through a provisioner when a PVC is created","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The provisioner is defined in the storage class"}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);