"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8332],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},398:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={id:"arithmetic-operators",title:"Arithmetic Operators",sidebar_position:3},o=void 0,l={unversionedId:"web/javascript/core-concepts/arithmetic-operators",id:"web/javascript/core-concepts/arithmetic-operators",title:"Arithmetic Operators",description:"Arithmetic operators are needed to perform operations on different types of data. There are 2 basic types of arithmetic operators:",source:"@site/docs/web/javascript/core-concepts/arithmetic-operators.md",sourceDirName:"web/javascript/core-concepts",slug:"/web/javascript/core-concepts/arithmetic-operators",permalink:"/LearningCollection/web/javascript/core-concepts/arithmetic-operators",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/javascript/core-concepts/arithmetic-operators.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"arithmetic-operators",title:"Arithmetic Operators",sidebar_position:3},sidebar:"docs",previous:{title:"Types",permalink:"/LearningCollection/web/javascript/core-concepts/types"},next:{title:"JSON",permalink:"/LearningCollection/web/javascript/core-concepts/json"}},p={},c=[{value:"Binary arithmetic operators",id:"binary-arithmetic-operators",level:2},{value:"Unary arithmetic operators",id:"unary-arithmetic-operators",level:2}],s={toc:c},m="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Arithmetic operators are needed to perform operations on different types of data. There are 2 basic types of arithmetic operators:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Binary operators")," require two operands, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"x + y")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"a * b")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Unary operators")," require only one operand, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"-x")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"+x"))),(0,a.kt)("h2",{id:"binary-arithmetic-operators"},"Binary arithmetic operators"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Addition ",(0,a.kt)("inlineCode",{parentName:"li"},"+")),(0,a.kt)("li",{parentName:"ul"},"Subtraction ",(0,a.kt)("inlineCode",{parentName:"li"},"-")),(0,a.kt)("li",{parentName:"ul"},"Multiplication ",(0,a.kt)("inlineCode",{parentName:"li"},"*")),(0,a.kt)("li",{parentName:"ul"},"Division ",(0,a.kt)("inlineCode",{parentName:"li"},"/")),(0,a.kt)("li",{parentName:"ul"},"Remainder ",(0,a.kt)("inlineCode",{parentName:"li"},"%")),(0,a.kt)("li",{parentName:"ul"},"Exponentiation ",(0,a.kt)("inlineCode",{parentName:"li"},"**"))),(0,a.kt)("h2",{id:"unary-arithmetic-operators"},"Unary arithmetic operators"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The unary plus operator indicates a positive value. It's an optional operator if you only work with numbers",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"console.log(+7)")))),(0,a.kt)("li",{parentName:"ul"},"The unary minus operator makes a value or an expression negative",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"console.log(-(100 + 5))"))))))}u.isMDXComponent=!0}}]);