"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[7479],{353:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=n(5893),r=n(1151);const i={title:"DateTimes"},s=void 0,c={id:"csharp/core-concepts/types/datetimes",title:"DateTimes",description:"The DateTime type represents dates and times with values ranging from 0000 (midnight), January 1, 0001 Anno Domini (Common Era) through 1159 P.M., December 31, 9999 A.D. (C.E.) in the Gregorian calendar.",source:"@site/docs/csharp/core-concepts/types/datetimes.md",sourceDirName:"csharp/core-concepts/types",slug:"/csharp/core-concepts/types/datetimes",permalink:"/LearningCollection/csharp/core-concepts/types/datetimes",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/core-concepts/types/datetimes.md",tags:[],version:"current",frontMatter:{title:"DateTimes"},sidebar:"docs",previous:{title:"Tuples",permalink:"/LearningCollection/csharp/core-concepts/types/tuples"},next:{title:"Arrays",permalink:"/LearningCollection/csharp/core-concepts/types/arrays"}},o={},d=[{value:"Initializing a <code>DateTime</code> object",id:"initializing-a-datetime-object",level:2},{value:"Invoke constructors",id:"invoke-constructors",level:3},{value:"Assign a computed value",id:"assign-a-computed-value",level:3},{value:"Parse a string that represents a <code>DateTime</code>",id:"parse-a-string-that-represents-a-datetime",level:3},{value:"DateTime values and their string representations",id:"datetime-values-and-their-string-representations",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"DateTime"})," type represents dates and times with values ranging from 00:00:00 (midnight), January 1, 0001 Anno Domini (Common Era) through 11:59:59 P.M., December 31, 9999 A.D. (C.E.) in the Gregorian calendar."]}),"\n",(0,a.jsxs)(t.p,{children:["Time values are measured in 100-nanosecond units called ticks. A particular date is the number of ticks since 12:00 midnight, January 1, 0001 A.D. (C.E.) in the GregorianCalendar calendar. The number excludes ticks that would be added by leap seconds. For example, a ticks value of 31241376000000000L represents the date Friday, January 01, 0100 12:00:00 midnight. A ",(0,a.jsx)(t.code,{children:"DateTime"})," value is always expressed in the context of an explicit or default calendar."]}),"\n",(0,a.jsxs)(t.p,{children:["Once a ",(0,a.jsx)(t.code,{children:"DateTime"})," has been constructed, its value can never change. Any methods that appear to modify a ",(0,a.jsx)(t.code,{children:"DateTime"})," will actually return a new ",(0,a.jsx)(t.code,{children:"DateTime"}),"."]}),"\n",(0,a.jsxs)(t.h2,{id:"initializing-a-datetime-object",children:["Initializing a ",(0,a.jsx)(t.code,{children:"DateTime"})," object"]}),"\n",(0,a.jsxs)(t.p,{children:["You can assign an initial value to a new ",(0,a.jsx)(t.code,{children:"DateTime"})," value in many different ways:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Calling a constructor, either one where you specify arguments for values, or use the implicit parameterless constructor."}),"\n",(0,a.jsxs)(t.li,{children:["Assigning a ",(0,a.jsx)(t.code,{children:"DateTime"})," to the return value of a property or method."]}),"\n",(0,a.jsxs)(t.li,{children:["Parsing a ",(0,a.jsx)(t.code,{children:"DateTime"})," value from its string representation."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"invoke-constructors",children:"Invoke constructors"}),"\n",(0,a.jsxs)(t.p,{children:["You call any of the overloads of the ",(0,a.jsx)(t.code,{children:"DateTime"})," constructor that specify elements of the date and time value (such as the year, month, and day, or the number of ticks). The following code creates a specific date using the ",(0,a.jsx)(t.code,{children:"DateTime"})," constructor specifying the year, month, day, hour, minute, and second:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'var date1 = new DateTime(2008, 5, 1, 8, 30, 52);\r\nConsole.WriteLine(date1);\r\n// Displays "5/1/2008 8:30:52" in en-US culture\n'})}),"\n",(0,a.jsx)(t.h3,{id:"assign-a-computed-value",children:"Assign a computed value"}),"\n",(0,a.jsxs)(t.p,{children:["You can assign the ",(0,a.jsx)(t.code,{children:"DateTime"})," object a date and time value returned by a property or method:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"DateTime date1 = DateTime.Now;\r\nDateTime date2 = DateTime.UtcNow;\r\nDateTime date3 = DateTime.Today;\n"})}),"\n",(0,a.jsxs)(t.h3,{id:"parse-a-string-that-represents-a-datetime",children:["Parse a string that represents a ",(0,a.jsx)(t.code,{children:"DateTime"})]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parse?view=net-8.0",children:(0,a.jsx)(t.code,{children:"Parse"})}),", ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parseexact?view=net-8.0",children:(0,a.jsx)(t.code,{children:"ParseExact"})}),", ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparseexact?view=net-8.0",children:(0,a.jsx)(t.code,{children:"TryParse"})}),", and ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparseexact?view=net-8.0",children:(0,a.jsx)(t.code,{children:"TryParseExact"})})," methods all convert a string to its equivalent date and time value:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'var dateString = "5/1/2008 8:30:52 AM";\r\nDateTime date1 =\r\n  DateTime.Parse(dateString, System.Globalization.CultureInfo.InvariantCulture);\r\nvar iso8601String = "20080501T08:30:52Z";\r\nDateTime dateISO8602 =\r\n  DateTime.ParseExact(iso8601String, "yyyyMMddTHH:mm:ssZ",\r\n                       System.Globalization.CultureInfo.InvariantCulture);\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"TryParse"})," and ",(0,a.jsx)(t.code,{children:"TryParseExact"})," methods indicate whether a string is a valid representation of a ",(0,a.jsx)(t.code,{children:"DateTime"})," value and, if it is, performs the conversion."]}),"\n",(0,a.jsx)(t.h2,{id:"datetime-values-and-their-string-representations",children:"DateTime values and their string representations"}),"\n",(0,a.jsxs)(t.p,{children:["The appearance of date and time values is dependent on culture, international standards, application requirements, and personal preference. The ",(0,a.jsx)(t.code,{children:"DateTime"})," structure offers flexibility in formatting date and time values through overloads of ToString."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"var date1 = new DateTime(2008, 3, 1, 7, 0, 0);\r\nConsole.WriteLine(date1.ToString());\r\n// For en-US culture, displays 3/1/2008 7:00:00 AM\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'var date1 = new DateTime(2008, 3, 1, 7, 0, 0);\r\nvar text =\r\n  date1.ToString(System.Globalization.CultureInfo.CreateSpecificCulture("fr-FR"));\r\nConsole.WriteLine(text);\r\n// Displays 01/03/2008 07:00:00\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>s});var a=n(7294);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);