"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[5636],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={id:"functions",title:"Functions",sidebar_position:3},i=void 0,s={unversionedId:"Web/typescript/core-concepts/functions",id:"Web/typescript/core-concepts/functions",title:"Functions",description:"Functions are the basic building block of any application, whether they\u2019re local functions, imported from another module, or methods on a class. They\u2019re also values, and just like other values, TypeScript has many ways to describe how functions can be called.",source:"@site/docs/Web/typescript/core-concepts/functions.md",sourceDirName:"Web/typescript/core-concepts",slug:"/Web/typescript/core-concepts/functions",permalink:"/LearningCollection/Web/typescript/core-concepts/functions",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Web/typescript/core-concepts/functions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"functions",title:"Functions",sidebar_position:3},sidebar:"finance",previous:{title:"Enums",permalink:"/LearningCollection/Web/typescript/core-concepts/enums"},next:{title:"Classes",permalink:"/LearningCollection/Web/typescript/core-concepts/classes"}},l={},c=[{value:"Type Expressions",id:"type-expressions",level:2},{value:"Rest Parameters",id:"rest-parameters",level:2},{value:"Overloads",id:"overloads",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Functions are the basic building block of any application, whether they\u2019re local functions, imported from another module, or methods on a class. They\u2019re also values, and just like other values, TypeScript has many ways to describe how functions can be called."),(0,a.kt)("h2",{id:"type-expressions"},"Type Expressions"),(0,a.kt)("p",null,"The simplest way to describe a function is with a function type expression. These types are syntactically similar to arrow functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'function greeter(fn: (a: string) => void) {\n  fn("Hello, World");\n}\n\nfunction printToConsole(s: string) {\n  console.log(s);\n}\n\ngreeter(printToConsole);\n')),(0,a.kt)("p",null,"The syntax ",(0,a.kt)("inlineCode",{parentName:"p"},"(a: string) => void")," means \u201ca function with one parameter, named ",(0,a.kt)("inlineCode",{parentName:"p"},"a"),", of type string, that doesn\u2019t have a return value\u201d. Just like with function declarations, if a parameter type isn\u2019t specified, it\u2019s implicitly ",(0,a.kt)("inlineCode",{parentName:"p"},"any"),"."),(0,a.kt)("p",null,"Of course, we can use a type alias to name a function type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type GreetFunction = (a: string) => void;\nfunction greeter(fn: GreetFunction) {\n  // ...\n}\n")),(0,a.kt)("h2",{id:"rest-parameters"},"Rest Parameters"),(0,a.kt)("p",null,"When a function has a rest parameter, it is treated as if it were an infinite series of optional parameters. This is unsound from a type system perspective, but from a runtime point of view the idea of an optional parameter is generally not well-enforced since passing ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," in that position is equivalent for most functions."),(0,a.kt)("p",null,"A rest parameter appears after all other parameters, and uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"...")," syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function multiply(n: number, ...m: number[]) {\n  return m.map((x) => n * x);\n}\n// 'a' gets value [10, 20, 30, 40]\nconst a = multiply(10, 1, 2, 3, 4);\n")),(0,a.kt)("p",null,"In TypeScript, the type annotation on these parameters is implicitly ",(0,a.kt)("inlineCode",{parentName:"p"},"any[]")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"any"),", and any type annotation given must be of the form ",(0,a.kt)("inlineCode",{parentName:"p"},"Array<T>")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"T[]"),", or a tuple type."),(0,a.kt)("p",null,"With tuples it is possible to limit the number of elements in the rest parameter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function multiply(n: number, ...m: [number, number, number]) {\n  return m.map((x) => n * x);\n}\n// 'a' gets value [10, 20, 30]\nconst a = multiply(10, 1, 2, 3);\n")),(0,a.kt)("h2",{id:"overloads"},"Overloads"),(0,a.kt)("p",null,"Some JavaScript functions can be called in a variety of argument counts and types. For example, you might write a function to produce a ",(0,a.kt)("inlineCode",{parentName:"p"},"Date")," that takes either a timestamp (one argument) or a month/day/year specification (three arguments)."),(0,a.kt)("p",null,"In TypeScript, we can specify a function that can be called in different ways by writing overload signatures:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function makeDate(timestamp: number): Date;\nfunction makeDate(m: number, d: number, y: number): Date;\nfunction makeDate(mOrTimestamp: number, d?: number, y?: number): Date {\n  if (d !== undefined && y !== undefined) {\n    return new Date(y, mOrTimestamp, d);\n  } else {\n    return new Date(mOrTimestamp);\n  }\n}\nconst d1 = makeDate(12345678);\nconst d2 = makeDate(5, 5, 5);\n// Error if we do this:\nconst d3 = makeDate(1, 3);\n")),(0,a.kt)("p",null,"In this example, we wrote two overloads: one accepting one argument, and another accepting three arguments. These first two signatures are called the overload signatures."),(0,a.kt)("p",null,"Then, we wrote a function implementation with a compatible signature (for all overload signature). Functions have an implementation signature, but this signature can\u2019t be called directly. Even though we wrote a function with two optional parameters after the required one, it can\u2019t be called with two parameters!"))}u.isMDXComponent=!0}}]);