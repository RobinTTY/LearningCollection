"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4462],{56851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(74848),i=t(28453);const r={id:"introductionToJavascript",title:"Introduction to Javascript"},s=void 0,l={id:"web/javascript/courses/codeacademy-course/introductionToJavascript",title:"Introduction to Javascript",description:"Keywords",source:"@site/docs/web/javascript/courses/codeacademy-course/README.md",sourceDirName:"web/javascript/courses/codeacademy-course",slug:"/web/javascript/courses/codeacademy-course/",permalink:"/LearningCollection/web/javascript/courses/codeacademy-course/",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/javascript/courses/codeacademy-course/README.md",tags:[],version:"current",frontMatter:{id:"introductionToJavascript",title:"Introduction to Javascript"},sidebar:"docs",previous:{title:"data-* and HTMLElement.dataset",permalink:"/LearningCollection/web/javascript/web-apis/dataAndDataset"},next:{title:"PennX - SD4x",permalink:"/LearningCollection/web/javascript/courses/edx-course/pennxSd4x"}},o={},c=[{value:"Keywords",id:"keywords",level:2},{value:"The Console",id:"the-console",level:2},{value:"Data Types",id:"data-types",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Built-in Objects",id:"built-in-objects",level:2},{value:"Variables",id:"variables",level:2},{value:"var",id:"var",level:3},{value:"let",id:"let",level:3},{value:"const",id:"const",level:3},{value:"The difference between <code>var</code> and <code>let</code>",id:"the-difference-between-var-and-let",level:3},{value:"String Interpolation",id:"string-interpolation",level:2},{value:"<code>typeof</code> operator",id:"typeof-operator",level:2},{value:"Truthy and Falsy",id:"truthy-and-falsy",level:2},{value:"Assignment via truthy/falsy values",id:"assignment-via-truthyfalsy-values",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"keywords",children:"Keywords"}),"\n",(0,a.jsx)(n.p,{children:"Keywords are words that are built into the JavaScript language, so the computer will recognize them and treats them specially."}),"\n",(0,a.jsx)(n.h2,{id:"the-console",children:"The Console"}),"\n",(0,a.jsxs)(n.p,{children:["In JavaScript, the ",(0,a.jsx)(n.code,{children:"console"})," keyword refers to an object, a collection of data and actions, that we can use in our code."]}),"\n",(0,a.jsxs)(n.p,{children:["One action, or method, that is built into the ",(0,a.jsx)(n.code,{children:"console"})," object is the ",(0,a.jsx)(n.code,{children:".log()"})," method."]}),"\n",(0,a.jsx)(n.h2,{id:"data-types",children:"Data Types"}),"\n",(0,a.jsx)(n.p,{children:"Data types are the classifications we give to the different kinds of data that we use in programming. In JavaScript, there are seven fundamental data types:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Number (integers or floating point)"}),"\n",(0,a.jsx)(n.li,{children:"String"}),"\n",(0,a.jsx)(n.li,{children:"Boolean"}),"\n",(0,a.jsx)(n.li,{children:"Null: intentional absence of a value"}),"\n",(0,a.jsx)(n.li,{children:"Undefined: the absence of a value"}),"\n",(0,a.jsx)(n.li,{children:"Symbol: unique identifiers, useful in more complex coding"}),"\n",(0,a.jsx)(n.li,{children:"Object"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The first 6 types are considererd primitive data types."}),"\n",(0,a.jsx)(n.h2,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,a.jsx)(n.p,{children:"An operator is a character that performs a task in our code. JavaScript has several built-in in arithmetic operators, that allow us to perform mathematical calculations on numbers. These include the following operators and their corresponding symbols:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Add (+)"}),"\n",(0,a.jsx)(n.li,{children:"Substract (-)"}),"\n",(0,a.jsx)(n.li,{children:"Multiplay (*)"}),"\n",(0,a.jsx)(n.li,{children:"Divide (/)"}),"\n",(0,a.jsx)(n.li,{children:"Remainder (%)"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"built-in-objects",children:"Built-in Objects"}),"\n",(0,a.jsxs)(n.p,{children:["In addition to console, there are other objects built into JavaScript. A list of them can be found ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects",children:"here"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,a.jsx)(n.p,{children:"In short, variables label and store data in memory. It is important to distinguish that variables are not values; they contain values and represent them with a name."}),"\n",(0,a.jsx)(n.h3,{id:"var",children:"var"}),"\n",(0,a.jsxs)(n.p,{children:["There were a lot of changes introduced in the ES6 version of JavaScript in 2015. One of the biggest changes was two new keywords, ",(0,a.jsx)(n.code,{children:"let"})," and ",(0,a.jsx)(n.code,{children:"const"}),", to create, or declare, variables. Prior to the ES6, programmers could only use the ",(0,a.jsx)(n.code,{children:"var"})," keyword to declare variables."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'var myName = "Arya";\nconsole.log(myName);\n// Output: Ary\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"var"}),", short for variable, is a JavaScript keyword that creates, or declares, a new variable."]}),"\n",(0,a.jsx)(n.h3,{id:"let",children:"let"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"let"})," keyword was introduced in ES6. The ",(0,a.jsx)(n.code,{children:"let"})," keyword signals that the variable can be reassigned a different value. we can declare a variable without assigning the variable a value. In such a case, the variable will be automatically initialized with a value of ",(0,a.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"const",children:"const"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"const"})," keyword was also introduced in ES6, and is short for the word constant. A ",(0,a.jsx)(n.code,{children:"const"})," variable cannot be reassigned because it is constant. If you try to reassign a const variable, you\u2019ll get a ",(0,a.jsx)(n.code,{children:"TypeError"}),". You need to initialize a ",(0,a.jsx)(n.code,{children:"const"})," variable with a value."]}),"\n",(0,a.jsxs)(n.h3,{id:"the-difference-between-var-and-let",children:["The difference between ",(0,a.jsx)(n.code,{children:"var"})," and ",(0,a.jsx)(n.code,{children:"let"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"let"})," allows you to declare variables that are limited to the scope of a block statement, or expression on which it is used, unlike the ",(0,a.jsx)(n.code,{children:"var"})," keyword, which declares a variable globally, or locally to an entire function regardless of block scope. The other difference between ",(0,a.jsx)(n.code,{children:"var"})," and ",(0,a.jsx)(n.code,{children:"let"})," is that the latter is initialized to a value only when a parser evaluates it."]}),"\n",(0,a.jsx)(n.h2,{id:"string-interpolation",children:"String Interpolation"}),"\n",(0,a.jsx)(n.p,{children:"In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const myPet = "armadillo";\nconsole.log(`I own a pet ${myPet}.`);\n// Output: I own a pet armadillo.\n'})}),"\n",(0,a.jsx)(n.p,{children:"One of the biggest benefits to using template literals is the readability of the code."}),"\n",(0,a.jsxs)(n.h2,{id:"typeof-operator",children:[(0,a.jsx)(n.code,{children:"typeof"})," operator"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"typeof"})," operator returns a string indicating the type of the unevaluated operand."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let newVariable = "Playing around with typeof.";\n\nconsole.log(typeof newVariable);\n// Output: string\n\nnewVariable = 1;\n\nconsole.log(typeof newVariable);\n// Output: number\n'})}),"\n",(0,a.jsx)(n.p,{children:"Note: The type of a variable is not fixed in JavaScript!"}),"\n",(0,a.jsx)(n.h2,{id:"truthy-and-falsy",children:"Truthy and Falsy"}),"\n",(0,a.jsxs)(n.p,{children:["In JavaScript, a ",(0,a.jsx)(n.em,{children:"truthy"}),' value is a value that is considered true when encountered in a Boolean context. All values are truthy unless they are defined as falsy (i.e., except for false, 0, -0, 0n, "", null, undefined, and NaN).']}),"\n",(0,a.jsx)(n.p,{children:"A falsy (sometimes written falsey) value is a value that is considered false when encountered in a Boolean context."}),"\n",(0,a.jsxs)(n.p,{children:["Complete list of falsy values: ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy",children:"MDN"})]}),"\n",(0,a.jsx)(n.h3,{id:"assignment-via-truthyfalsy-values",children:"Assignment via truthy/falsy values"}),"\n",(0,a.jsxs)(n.p,{children:["In a boolean condition, JavaScript assigns the truthy value to a variable if you use the ",(0,a.jsx)(n.code,{children:"||"})," operator in your assignment:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let defaultName = username || "Stranger";\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);