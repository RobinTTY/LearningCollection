"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[5559],{65659:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"csharp/entity-framework/querying-data/basic-querying","title":"Basic Querying","description":"Entity Framework Core uses Language-Integrated Query (LINQ) to query data from the database. EF Core passes a representation of the LINQ query to the database provider. Database providers in turn translate it to database-specific query language (for example, SQL for a relational database). Queries are always executed against the database even if the entities returned in the result already exist in the context.","source":"@site/docs/csharp/entity-framework/querying-data/basic-querying.md","sourceDirName":"csharp/entity-framework/querying-data","slug":"/csharp/entity-framework/querying-data/basic-querying","permalink":"/LearningCollection/csharp/entity-framework/querying-data/basic-querying","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/entity-framework/querying-data/basic-querying.md","tags":[],"version":"current","frontMatter":{"title":"Basic Querying"},"sidebar":"docs","previous":{"title":"Relationships","permalink":"/LearningCollection/csharp/entity-framework/creating-a-model/relationships"},"next":{"title":"Tracking Behavior","permalink":"/LearningCollection/csharp/entity-framework/querying-data/tracking-behavior"}}');var r=t(74848),i=t(28453);const s={title:"Basic Querying"},o=void 0,l={},d=[{value:"Loading all data",id:"loading-all-data",level:2},{value:"Loading a single entity",id:"loading-a-single-entity",level:2},{value:"<code>Find()</code>",id:"find",level:3},{value:"Filtering",id:"filtering",level:2},{value:"Ordering",id:"ordering",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Entity Framework Core uses Language-Integrated Query (LINQ) to query data from the database. EF Core passes a representation of the LINQ query to the database provider. Database providers in turn translate it to database-specific query language (for example, SQL for a relational database). Queries are always executed against the database even if the entities returned in the result already exist in the context."}),"\n",(0,r.jsx)(n.p,{children:"The following snippets show a few examples of how to achieve common tasks with Entity Framework Core."}),"\n",(0,r.jsx)(n.h2,{id:"loading-all-data",children:"Loading all data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using (var context = new BloggingContext())\n{\n    var blogs = context.Blogs.ToList();\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"loading-a-single-entity",children:"Loading a single entity"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using (var context = new BloggingContext())\n{\n    var blog = context.Blogs\n        .Single(b => b.BlogId == 1);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"find",children:(0,r.jsx)(n.code,{children:"Find()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Find"})," method on ",(0,r.jsx)(n.code,{children:"DbSet"})," uses the primary key value to attempt to find an entity tracked by the context. If the entity is not found in the context then a query will be sent to the database to find the entity there. ",(0,r.jsx)(n.code,{children:"Null"})," is returned if the entity is not found in the context or in the database."]}),"\n",(0,r.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using (var context = new BloggingContext())\n{\n    var blogs = context.Blogs\n        .Where(b => b.Url.Contains("dotnet"))\n        .ToList();\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"ordering",children:"Ordering"}),"\n",(0,r.jsxs)(n.p,{children:["Ordering can be done via the ",(0,r.jsx)(n.code,{children:"OrderBy"})," method. To for instance order a set of authors by last name and then first name we can do the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"var authorsByLastName = _context.Author\n    .OrderBy(a => a.LastName)\n    .ThenBy(a => a.FirstName)\n    .ToList();\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(96540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);