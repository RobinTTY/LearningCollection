"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8702],{982:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=i(4848),r=i(8453);const o={id:"usingTheDriver",title:"Using the Driver",sidebar_position:3},t=void 0,a={id:"databases/mongodb/m220n-mongodb-for-dotnet-developers/usingTheDriver",title:"Using the Driver",description:"mflix project structure",source:"@site/docs/databases/mongodb/m220n-mongodb-for-dotnet-developers/Using the Driver.md",sourceDirName:"databases/mongodb/m220n-mongodb-for-dotnet-developers",slug:"/databases/mongodb/m220n-mongodb-for-dotnet-developers/usingTheDriver",permalink:"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/usingTheDriver",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/databases/mongodb/m220n-mongodb-for-dotnet-developers/Using the Driver.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"usingTheDriver",title:"Using the Driver",sidebar_position:3},sidebar:"docs",previous:{title:"Getting Started",permalink:"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/gettingStarted"},next:{title:"User-Facing Backend",permalink:"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/userFacingBackend"}},c={},l=[{value:"mflix project structure",id:"mflix-project-structure",level:2},{value:"Approaches to working with data",id:"approaches-to-working-with-data",level:2},{value:"Async Programming Principles",id:"async-programming-principles",level:2},{value:"Synchronous",id:"synchronous",level:3},{value:"Asynchronous",id:"asynchronous",level:3},{value:"How to use the asynchronous model",id:"how-to-use-the-asynchronous-model",level:2},{value:"Synchronous",id:"synchronous-1",level:3},{value:"Asynchronous",id:"asynchronous-1",level:3},{value:"Asynchronous Repository Method",id:"asynchronous-repository-method",level:3},{value:"Using Projections with the driver",id:"using-projections-with-the-driver",level:2},{value:"Advanced Read Examples",id:"advanced-read-examples",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"mflix-project-structure",children:"mflix project structure"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"project structure",src:i(4882).A+"",width:"1359",height:"1440"})}),"\n",(0,s.jsx)(n.h2,{id:"approaches-to-working-with-data",children:"Approaches to working with data"}),"\n",(0,s.jsx)(n.p,{children:"The MongoDB driver supports many different approaches to working with your data. For instance you can read data in 4 different ways using the driver:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'// Using MQL as a string -> NOT TYPE SAFE\nvar filter = "{ price: { $gt: 400 } }";\nvar expensiveGuitars = guitarsCollection.Find(filter);\n\n// Using BsonDocument object -> NOT TYPE SAFE\nvar filter = new BsonDocument("price", new BsonDocument("$gt", 400));\nvar expensiveGuitars = guitarsCollection.Find(filter);\n\n// Using the Builders class -> Only field names NOT type safe\nvar builder = Builders<BsonDocument>.Filter;\nvar filter = builder.Gt("price", 400) & builder.Lt("price", 600);\nvar midrangeGuitars = guitarsCollection.Find(filter);\n\n// Using Mapping Classes and LINQ -> TPYE SAFE\nclass Guitar\n{\n    [BsonID]\n    public int Id { get; set; }\n    public string Make { get; set; }\n    public string Model { get; set; }\n    public double Price { get; set; }\n}\n\nvar guitars = new List<Guitar>();\nvar expensiveGuitars = guitars.Where(g => g.Price > 400).ToList();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"async-programming-principles",children:"Async Programming Principles"}),"\n",(0,s.jsx)(n.h3,{id:"synchronous",children:"Synchronous"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Request arrives"}),"\n",(0,s.jsx)(n.li,{children:"Thread from Thread pool is assigned"}),"\n",(0,s.jsx)(n.li,{children:"Thread makes request to external resource and waits for response"}),"\n",(0,s.jsx)(n.li,{children:"Thread can not handle any other requests until response is received"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Synchronous",src:i(5402).A+"",width:"1280",height:"720"})}),"\n",(0,s.jsx)(n.h3,{id:"asynchronous",children:"Asynchronous"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Request arrives"}),"\n",(0,s.jsx)(n.li,{children:"Thread from Thread pool is assigned"}),"\n",(0,s.jsx)(n.li,{children:"Thread makes request to external resource and returns immediately to the thread pool"}),"\n",(0,s.jsx)(n.li,{children:"When the external ressource returns the response, ASP.NET grabs any available thread to handle the call"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Asynchronous",src:i(5723).A+"",width:"1280",height:"720"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use-the-asynchronous-model",children:"How to use the asynchronous model"}),"\n",(0,s.jsx)(n.h3,{id:"synchronous-1",children:"Synchronous"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public ActionResult GetMovie(string movieId) { ... }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"asynchronous-1",children:"Asynchronous"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public async Task<ActionResult> GetMovieAsync(string movieId, CancellationToken cancellationToken = default) { ... }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"asynchronous-repository-method",children:"Asynchronous Repository Method"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public async Task<Movie> FetchMovieAsync(string movieId, CancellationToken cancellationToken = default)\n{\n    return await _movies.Collection\n        .Find.(Builders<Movie>.Filter.Empty)\n        .FirstOrDefaultAsync(cancellationToken);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"using-projections-with-the-driver",children:"Using Projections with the driver"}),"\n",(0,s.jsx)(n.p,{children:"To limit the amount of data that MongoDB sends to applications, you can include a projection document to specify or restrict fields to return. With the C# driver we do it like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"var projectionFilter = Builders<Movie>.Projection\n    .Include(m => m.Title)\n    .Include(m => m.Year)\n    .Include(m => m.Cast)\n    .Include(m => m.Id)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-read-examples",children:"Advanced Read Examples"}),"\n",(0,s.jsx)(n.p,{children:"Sorting first, limiting the results, and skipping so we get different results for each page:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"var sortByYearDescending = Builders<Movie>.Sort.Ascending(m => m.Year);\nvar movies = await _moviesCollection.Find<Movie>(Builders<Movie>.Filter.Empty)\n    .Sort(sortByYearDescending)\n    .Limit(moviesPerPage)\n    .Skip(pageNumber * moviesPerPage)\n    .ToListAsync();\n"})}),"\n",(0,s.jsx)(n.p,{children:"Search for any match between two arrays:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public async Task<IReadOnlyList<MovieByCountryProjection>> GetMoviesByCountryAsync(\n    CancellationToken cancellationToken = default,\n    params string[] countries\n    )\n{\n    var project = Builders<Movie>.Projection.Include(movie => movie.Title);\n\n    return await _moviesCollection\n        .Find(Builders<Movie>.Filter.AnyIn(movie => movie.Countries, countries))\n        .SortByDescending(m => m.Title)\n        .Project<MovieByCountryProjection>(project)\n        .ToListAsync(cancellationToken);\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4882:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/2021-06-14-51faf9252f9d104f6b3d7e074c1efad9.png"},5723:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/asynchronous-e675343820c33fb2eb9be9de00efb08b.gif"},5402:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/synchronous-f973ecbcf513c34771b2028fc5c056eb.gif"},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(6540);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);