"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8768],{73321:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"databases/mongodb/m220n-mongodb-for-dotnet-developers/adminBackend","title":"Admin Backend","description":"Read Concerns","source":"@site/docs/databases/mongodb/m220n-mongodb-for-dotnet-developers/Admin Backend.md","sourceDirName":"databases/mongodb/m220n-mongodb-for-dotnet-developers","slug":"/databases/mongodb/m220n-mongodb-for-dotnet-developers/adminBackend","permalink":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/adminBackend","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/databases/mongodb/m220n-mongodb-for-dotnet-developers/Admin Backend.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"adminBackend","title":"Admin Backend","sidebar_position":5},"sidebar":"docs","previous":{"title":"User-Facing Backend","permalink":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/userFacingBackend"},"next":{"title":"Resiliency","permalink":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/resiliency"}}');var l=t(74848),i=t(28453);const d={id:"adminBackend",title:"Admin Backend",sidebar_position:5},o=void 0,s={},c=[{value:"Read Concerns",id:"read-concerns",level:2},{value:"ReadConcern local",id:"readconcern-local",level:3},{value:"ReadConcern majority",id:"readconcern-majority",level:3},{value:"Other concern levels",id:"other-concern-levels",level:3},{value:"Ticket: User Report (Using group method)",id:"ticket-user-report-using-group-method",level:2},{value:"Bulk Writes",id:"bulk-writes",level:2},{value:"Ordered Bulk Write",id:"ordered-bulk-write",level:3},{value:"Unordered Bulk Write",id:"unordered-bulk-write",level:3},{value:"Using BulkWriteAsync to update many documents in a specific way",id:"using-bulkwriteasync-to-update-many-documents-in-a-specific-way",level:2},{value:"Example",id:"example",level:3}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"read-concerns",children:"Read Concerns"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:['Represent different levels of "read isolation"',"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:'if data can be read by clients before it has been replicated to a majority of nodes it is considered a low level of "read isolation"'}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"Can be used to specify a consistent view of the database"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"readconcern-local",children:"ReadConcern local"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The default read concern level"}),"\n",(0,l.jsx)(n.li,{children:"Does not check that data has been replicated"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"readconcern-majority",children:"ReadConcern majority"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Allows more durable reads"}),"\n",(0,l.jsx)(n.li,{children:"Only returns data that has been replicated to a majority of nodes (data might be more stale but more durable)"}),"\n",(0,l.jsx)(n.li,{children:"Used for mission critical data"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"other-concern-levels",children:"Other concern levels"}),"\n",(0,l.jsxs)(n.p,{children:["There are more concern levels available. See ",(0,l.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/read-concern/",children:"MongoDB Documentation"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"ticket-user-report-using-group-method",children:"Ticket: User Report (Using group method)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Task:"})," Build a pipeline that returns the 20 most frequent commenters on the MFlix site. You can do this by counting the number of occurrences of a user's email in the ",(0,l.jsx)(n.code,{children:"comments"})," collection. In addition, set the ReadConcern on the _commentsCollection to ensure the most accurate reads occur."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cs",children:"var result = await _commentsCollection\n  .WithReadConcern(ReadConcern.Majority)\n  .Aggregate()\n  .Group(x => x.Email, value => new ReportProjection { Id = value.Key, Count = value.Count() })\n  .Sort(Builders<ReportProjection>.Sort.Descending(c => c.Count))\n  .Limit(20)\n  .ToListAsync();\n\nreturn new TopCommentsProjection(result);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"bulk-writes",children:"Bulk Writes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Bulk writes allow database clients to send multiple writes"}),"\n",(0,l.jsx)(n.li,{children:"Can either be ordered or unordered"}),"\n",(0,l.jsx)(n.li,{children:"More performant than executing a write operation for each document"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"ordered-bulk-write",children:"Ordered Bulk Write"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The default setting for bulk writes in MongoDB"}),"\n",(0,l.jsxs)(n.li,{children:["Executes writes sequentially","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Will end execution after first write failure"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"Replica will execute writes in the order they were sent"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"unordered-bulk-write",children:"Unordered Bulk Write"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Has to be specified with the flag ",(0,l.jsx)(n.code,{children:"{ ordered: false }"})]}),"\n",(0,l.jsx)(n.li,{children:"Executes writes in parallel"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"using-bulkwriteasync-to-update-many-documents-in-a-specific-way",children:"Using BulkWriteAsync to update many documents in a specific way"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"BulkWriteAsync"})," method takes an ",(0,l.jsx)(n.code,{children:"IEnumerable"})," of the ",(0,l.jsx)(n.code,{children:"WriteModel"})," abstract class as input. There are several derived classes of ",(0,l.jsx)(n.code,{children:"WriteModel"}),", which allow you to perform different operations:"]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"center"},children:"C# Driver"}),(0,l.jsx)(n.th,{style:{textAlign:"center"},children:"MongoDB Shell equivalent"}),(0,l.jsx)(n.th,{style:{textAlign:"center"},children:"Operation"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"InsertOneModel"}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:(0,l.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/",children:"insertOne"})}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"Inserts the document"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"UpdateOneModel"}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:(0,l.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/",children:"updateOne"})}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"Updates one document that matches the filter definition"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"UpdateManyModel"}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:(0,l.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/",children:"updateMany"})}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"Updates all the documents that match the filter definition"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"ReplaceOneModel"}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:(0,l.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/method/db.collection.replaceOne/",children:"replaceOne"})}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"Replaces one document that matches the filter definition with the document provided"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"DeleteOneModel"}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:(0,l.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/",children:"deleteOne"})}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"Deletes one document that matches the filter definition"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"DeleteManyModel"}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:(0,l.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/method/db.collection.deleteMany/",children:"deleteMany"})}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"Deletes all the documents that match the filter definition"})]})]})]}),"\n",(0,l.jsxs)(n.p,{children:["These operations can be passed to the ",(0,l.jsx)(n.code,{children:"BulkWriteAsync"})," method and will be executed. They are equivalent to the MongoDB ",(0,l.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite",children:"db.collection.bulkWrite()"})," shell method."]}),"\n",(0,l.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cs",children:"var requests = new List<ReplaceOneModel<Movie>>();\ndatePipelineResults.ForEach(transformedMovie => requests.Add(new ReplaceOneModel<Movie>(Builders<Movie>.Filter.Where(movie => movie.Id == transformedMovie.Id), transformedMovie)));\nvar bulkWriteDatesResult = await _moviesCollection.BulkWriteAsync(requests);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var r=t(96540);const l={},i=r.createContext(l);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);