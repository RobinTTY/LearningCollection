"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[7895],{86134:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(74848),c=t(28453);const o={id:"functions",title:"Functions",sidebar_position:3},i=void 0,r={id:"databases/sql/core-concepts/functions",title:"Functions",description:"SQL has many built-in functions for performing calculations on data. The names of these functions are not standardized across different dialects of SQL.",source:"@site/docs/databases/sql/core-concepts/functions.md",sourceDirName:"databases/sql/core-concepts",slug:"/databases/sql/core-concepts/functions",permalink:"/LearningCollection/databases/sql/core-concepts/functions",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/databases/sql/core-concepts/functions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"functions",title:"Functions",sidebar_position:3},sidebar:"docs",previous:{title:"Altering Tables",permalink:"/LearningCollection/databases/sql/core-concepts/altering-tables"},next:{title:"Data Types",permalink:"/LearningCollection/databases/sql/core-concepts/database-design/data-types"}},a={},l=[{value:"Aggregate functions",id:"aggregate-functions",level:2},{value:"<code>AVG</code> function",id:"avg-function",level:3},{value:"<code>COUNT</code> function",id:"count-function",level:3},{value:"<code>SUM</code> function",id:"sum-function",level:3},{value:"<code>MIN</code> function",id:"min-function",level:3},{value:"<code>MAX</code> function",id:"max-function",level:3},{value:"Window Functions",id:"window-functions",level:2},{value:"Other Functions",id:"other-functions",level:2},{value:"<code>ROUND</code> function",id:"round-function",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"SQL has many built-in functions for performing calculations on data. The names of these functions are not standardized across different dialects of SQL."}),"\n",(0,s.jsx)(n.h2,{id:"aggregate-functions",children:"Aggregate functions"}),"\n",(0,s.jsx)(n.p,{children:"An aggregate function performs a calculation on a set of values, and returns a single value."}),"\n",(0,s.jsxs)(n.h3,{id:"avg-function",children:[(0,s.jsx)(n.code,{children:"AVG"})," function"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AVG()"})," function returns the average value of a numeric column."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT AVG(Price)\nFROM Products;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"count-function",children:[(0,s.jsx)(n.code,{children:"COUNT"})," function"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"COUNT()"})," function returns the number of rows that matches a specified criterion."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT COUNT(*)\nFROM employees;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"*"})," in this case refers to a column name. We don't care about the count of a specific column - we want to know the number of total records so we can use the wildcard ",(0,s.jsx)(n.code,{children:"(*)"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"sum-function",children:[(0,s.jsx)(n.code,{children:"SUM"})," function"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"SUM()"})," function returns the total sum of a numeric column."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT SUM(Quantity)\nFROM OrderDetails;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"min-function",children:[(0,s.jsx)(n.code,{children:"MIN"})," function"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MIN()"})," function returns the smallest value of the selected column."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT MIN(Price)\nFROM Products;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"max-function",children:[(0,s.jsx)(n.code,{children:"MAX"})," function"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MAX()"})," function returns the largest value of the selected column."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT MAX(Price)\nFROM Products;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"window-functions",children:"Window Functions"}),"\n",(0,s.jsx)(n.p,{children:"A window function performs a calculation across a set of table rows that are somehow related to the current row. This is comparable to the type of calculation that can be done with an aggregate function."}),"\n",(0,s.jsx)(n.p,{children:"But unlike regular aggregate functions, use of a window function does not cause rows to become grouped into a single output row \u2014 the rows retain their separate identities. Behind the scenes, the window function is able to access more than just the current row of the query result."}),"\n",(0,s.jsx)(n.p,{children:"The most practical example of this is a running total:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT duration_seconds,\nSUM(duration_seconds) OVER (ORDER BY start_time) AS running_total\nFROM films;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"other-functions",children:"Other Functions"}),"\n",(0,s.jsxs)(n.h3,{id:"round-function",children:[(0,s.jsx)(n.code,{children:"ROUND"})," function"]}),"\n",(0,s.jsx)(n.p,{children:"The ROUND() function rounds a number to a specified number of decimal places."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT ROUND(235.415, 2) AS RoundValue;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will return ",(0,s.jsx)(n.code,{children:"235.42"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(96540);const c={},o=s.createContext(c);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);