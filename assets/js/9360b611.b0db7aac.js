"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[102],{8605:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var t=i(5893),o=i(1151);const a={id:"conditional-rendering",title:"Conditional Rendering",sidebar_position:5},s=void 0,r={id:"web/react/core-concepts/describing-ui/conditional-rendering",title:"Conditional Rendering",description:"Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements,&&, and ? : operators.",source:"@site/docs/web/react/core-concepts/describing-ui/conditional-rendering.md",sourceDirName:"web/react/core-concepts/describing-ui",slug:"/web/react/core-concepts/describing-ui/conditional-rendering",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/conditional-rendering",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/react/core-concepts/describing-ui/conditional-rendering.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"conditional-rendering",title:"Conditional Rendering",sidebar_position:5},sidebar:"docs",previous:{title:"Passing Props",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/passing-props"},next:{title:"Rendering Lists",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/rendering-lists"}},c={},l=[{value:"Conditionally returning JSX",id:"conditionally-returning-jsx",level:2},{value:"Conditionally returning nothing with <code>null</code>",id:"conditionally-returning-nothing-with-null",level:2},{value:"Conditionally including JSX",id:"conditionally-including-jsx",level:2},{value:"Conditional (ternary) operator (<code>? :</code>)",id:"conditional-ternary-operator--",level:2},{value:"Logical AND operator (<code>&amp;&amp;</code>)",id:"logical-and-operator-",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like ",(0,t.jsx)(n.code,{children:"if"})," statements,",(0,t.jsx)(n.code,{children:"&&"}),", and ",(0,t.jsx)(n.code,{children:"? :"})," operators."]}),"\n",(0,t.jsx)(n.h2,{id:"conditionally-returning-jsx",children:"Conditionally returning JSX"}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s say you have a ",(0,t.jsx)(n.code,{children:"PackingList"})," component rendering several ",(0,t.jsx)(n.code,{children:"Item"}),"s, which can be marked as packed or not:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'function Item({ name, isPacked }) {\n  return <li className="item">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride\'s Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name="Space suit" \n        />\n        <Item \n          isPacked={true} \n          name="Helmet with a golden leaf" \n        />\n        <Item \n          isPacked={false} \n          name="Photo of Tam" \n        />\n      </ul>\n    </section>\n  );\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Notice that some of the ",(0,t.jsx)(n.code,{children:"Item"})," components have their ",(0,t.jsx)(n.code,{children:"isPacked"})," prop set to ",(0,t.jsx)(n.code,{children:"true"})," instead of ",(0,t.jsx)(n.code,{children:"false"}),". You want to add a checkmark (\u2714) to packed items if ",(0,t.jsx)(n.code,{children:"isPacked={true}"}),". You can write this as an ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",children:"if/else statement"})," like so:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'if (isPacked) {\n  return <li className="item">{name} \u2714</li>;\n}\nreturn <li className="item">{name}</li>;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"isPacked"})," prop is ",(0,t.jsx)(n.code,{children:"true"}),", this code returns a different JSX tree. With this change, some of the items get a checkmark at the end:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'function Item({ name, isPacked }) {\n  if (isPacked) {\n    return <li className="item">{name} \u2714</li>;\n  }\n  return <li className="item">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride\'s Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name="Space suit" \n        />\n        <Item \n          isPacked={true} \n          name="Helmet with a golden leaf" \n        />\n        <Item \n          isPacked={false} \n          name="Photo of Tam" \n        />\n      </ul>\n    </section>\n  );\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Try editing what gets returned in either case, and see how the result changes! Notice how you\u2019re creating branching logic with JavaScript\u2019s ",(0,t.jsx)(n.code,{children:"if"})," and ",(0,t.jsx)(n.code,{children:"return"})," statements. In React, control flow (like conditions) is handled by JavaScript."]}),"\n",(0,t.jsxs)(n.h2,{id:"conditionally-returning-nothing-with-null",children:["Conditionally returning nothing with ",(0,t.jsx)(n.code,{children:"null"})]}),"\n",(0,t.jsxs)(n.p,{children:["In some situations, you won\u2019t want to render anything at all. For example, say you don\u2019t want to show packed items at all. A component must return something. In this case, you can return ",(0,t.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'if (isPacked) {\n  return null;\n}\nreturn <li className="item">{name}</li>;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"isPacked"})," is true, the component will return nothing, ",(0,t.jsx)(n.code,{children:"null"}),". Otherwise, it will return JSX to render."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'function Item({ name, isPacked }) {\n  if (isPacked) {\n    return null;\n  }\n  return <li className="item">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride\'s Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name="Space suit" \n        />\n        <Item \n          isPacked={true} \n          name="Helmet with a golden leaf" \n        />\n        <Item \n          isPacked={false} \n          name="Photo of Tam" \n        />\n      </ul>\n    </section>\n  );\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In practice, returning ",(0,t.jsx)(n.code,{children:"null"})," from a component isn\u2019t common because it might surprise a developer trying to render it. More often, you would conditionally include or exclude the component in the parent component\u2019s JSX. Here\u2019s how to do that!"]}),"\n",(0,t.jsx)(n.h2,{id:"conditionally-including-jsx",children:"Conditionally including JSX"}),"\n",(0,t.jsx)(n.p,{children:"In the previous example, you controlled which (if any!) JSX tree would be returned by the component. You may already have noticed some duplication in the render output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'<li className="item">{name} \u2714</li>\n'})}),"\n",(0,t.jsx)(n.p,{children:"is very similar to"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'<li className="item">{name}</li>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Both of the conditional branches return ",(0,t.jsx)(n.code,{children:'<li className="item">...</li>'}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'if (isPacked) {\n  return <li className="item">{name} \u2714</li>;\n}\nreturn <li className="item">{name}</li>;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["While this duplication isn\u2019t harmful, it could make your code harder to maintain. What if you want to change the ",(0,t.jsx)(n.code,{children:"className"}),"? You\u2019d have to do it in two places in your code! In such a situation, you could conditionally include a little JSX to make your code more ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself",children:"DRY"}),"."]}),"\n",(0,t.jsxs)(n.h2,{id:"conditional-ternary-operator--",children:["Conditional (ternary) operator (",(0,t.jsx)(n.code,{children:"? :"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["JavaScript has a compact syntax for writing a conditional expression \u2014 the ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",children:"conditional operator"})," or \u201cternary operator\u201d. Instead of this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'if (isPacked) {\n  return <li className="item">{name} \u2714</li>;\n}\nreturn <li className="item">{name}</li>;\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can write this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"return (\n  <li className=\"item\">\n    {isPacked ? name + ' \u2714' : name}\n  </li>\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can read it as \u201cif ",(0,t.jsx)(n.code,{children:"isPacked"})," is true, then (",(0,t.jsx)(n.code,{children:"?"}),") render ",(0,t.jsx)(n.code,{children:"name + ' \u2714'"}),", otherwise (",(0,t.jsx)(n.code,{children:":"}),") render ",(0,t.jsx)(n.code,{children:"name\u201d"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Now let\u2019s say you want to wrap the completed item\u2019s text into another HTML tag, like ",(0,t.jsx)(n.code,{children:"<del>"})," to strike it out. You can add even more newlines and parentheses so that it\u2019s easier to nest more JSX in each of the cases:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'function Item({ name, isPacked }) {\n  return (\n    <li className="item">\n      {isPacked ? (\n        <del>\n          {name + \' \u2714\'}\n        </del>\n      ) : (\n        name\n      )}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride\'s Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name="Space suit" \n        />\n        <Item \n          isPacked={true} \n          name="Helmet with a golden leaf" \n        />\n        <Item \n          isPacked={false} \n          name="Photo of Tam" \n        />\n      </ul>\n    </section>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This style works well for simple conditions, but use it in moderation. If your components get messy with too much nested conditional markup, consider extracting child components to clean things up. In React, markup is a part of your code, so you can use tools like variables and functions to tidy up complex expressions."}),"\n",(0,t.jsxs)(n.h2,{id:"logical-and-operator-",children:["Logical AND operator (",(0,t.jsx)(n.code,{children:"&&"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["Another common shortcut you\u2019ll encounter is the logical AND (",(0,t.jsx)(n.code,{children:"&&"}),") operator. Inside React components, it often comes up when you want to render some JSX when the condition is true, or render nothing otherwise. With ",(0,t.jsx)(n.code,{children:"&&"}),", you could conditionally render the checkmark only if ",(0,t.jsx)(n.code,{children:"isPacked"})," is ",(0,t.jsx)(n.code,{children:"true"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"return (\n  <li className=\"item\">\n    {name} {isPacked && '\u2714'}\n  </li>\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can read this as \u201cif ",(0,t.jsx)(n.code,{children:"isPacked"}),", then (",(0,t.jsx)(n.code,{children:"&&"}),") render the checkmark, otherwise, render nothing\u201d. Here it is in action:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'function Item({ name, isPacked }) {\n  return (\n    <li className="item">\n      {name} {isPacked && \'\u2714\'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride\'s Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name="Space suit" \n        />\n        <Item \n          isPacked={true} \n          name="Helmet with a golden leaf" \n        />\n        <Item \n          isPacked={false} \n          name="Photo of Tam" \n        />\n      </ul>\n    </section>\n  );\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>s});var t=i(7294);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);