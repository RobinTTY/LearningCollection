"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[347],{78615:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"web/typescript/advanced-concepts/optional-chaining","title":"Optional Chaining","description":"optional chaining lets us write code where TypeScript can immediately stop running some expressions if we run into a null or undefined. We use the ?. operator for optional property accesses. When we write code like:","source":"@site/docs/web/typescript/advanced-concepts/optional-chaining.md","sourceDirName":"web/typescript/advanced-concepts","slug":"/web/typescript/advanced-concepts/optional-chaining","permalink":"/LearningCollection/web/typescript/advanced-concepts/optional-chaining","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/advanced-concepts/optional-chaining.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"optional-chaining","title":"Optional Chaining","sidebar_position":5},"sidebar":"docs","previous":{"title":"Index Signatures","permalink":"/LearningCollection/web/typescript/advanced-concepts/index-signatures"},"next":{"title":"Nullish Coalescing","permalink":"/LearningCollection/web/typescript/advanced-concepts/nullish-coalescing"}}');var o=i(74848),s=i(28453);const c={id:"optional-chaining",title:"Optional Chaining",sidebar_position:5},a=void 0,r={},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["optional chaining lets us write code where TypeScript can immediately stop running some expressions if we run into a ",(0,o.jsx)(n.code,{children:"null"})," or ",(0,o.jsx)(n.code,{children:"undefined"}),". We use the ",(0,o.jsx)(n.code,{children:"?."})," operator for optional property accesses. When we write code like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"let x = foo?.bar.baz();\n"})}),"\n",(0,o.jsxs)(n.p,{children:["this is a way of saying that when ",(0,o.jsx)(n.code,{children:"foo"})," is defined, ",(0,o.jsx)(n.code,{children:"foo.bar.baz()"})," will be computed; but when ",(0,o.jsx)(n.code,{children:"foo"})," is ",(0,o.jsx)(n.code,{children:"null"})," or ",(0,o.jsx)(n.code,{children:"undefined"}),", stop what we\u2019re doing and just return ",(0,o.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"More plainly, that code snippet is the same as writing the following:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"let x = foo === null || foo === undefined ? undefined : foo.bar.baz();\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var t=i(96540);const o={},s=t.createContext(o);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);