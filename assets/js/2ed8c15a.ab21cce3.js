"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4002],{21977:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"csharp/asp-net/core-concepts/handling-files","title":"Handling Files","description":"ASP.NET Web APIs are able to accept and return files. This page explains how this can be achieved.","source":"@site/docs/csharp/asp-net/core-concepts/handling-files.md","sourceDirName":"csharp/asp-net/core-concepts","slug":"/csharp/asp-net/core-concepts/handling-files","permalink":"/LearningCollection/csharp/asp-net/core-concepts/handling-files","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/asp-net/core-concepts/handling-files.md","tags":[],"version":"current","frontMatter":{"id":"handling-files","title":"Handling Files"},"sidebar":"docs","previous":{"title":"API Errors","permalink":"/LearningCollection/csharp/asp-net/core-concepts/api-errors"},"next":{"title":"Dependency Injection","permalink":"/LearningCollection/csharp/asp-net/core-concepts/dependency-injection"}}');var s=t(74848),o=t(28453);const l={id:"handling-files",title:"Handling Files"},a=void 0,r={},c=[{value:"Handling files in a request",id:"handling-files-in-a-request",level:2},{value:"Handling files as a response",id:"handling-files-as-a-response",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"ASP.NET Web APIs are able to accept and return files. This page explains how this can be achieved."}),"\n",(0,s.jsx)(n.h2,{id:"handling-files-in-a-request",children:"Handling files in a request"}),"\n",(0,s.jsx)(n.p,{children:"Accepting files via an ASP.NET Web API can be done via a form-data upload. This is the most popular/well-known upload method formatting the data you send as a set of key/value pairs."}),"\n",(0,s.jsxs)(n.p,{children:["You normally need to specify ",(0,s.jsx)(n.code,{children:"Content-Type"})," to ",(0,s.jsx)(n.code,{children:"multipart/form-data"})," in the request, and then use ",(0,s.jsx)(n.code,{children:"[FromForm]"})," attribute in MVC to bind values to variables (not actually explicitly necessary). Also, you can use the built-in ",(0,s.jsx)(n.code,{children:"IFormFile"})," class to access the file uploaded:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[HttpPost]\npublic async Task<IActionResult> PostFormData([FromForm] IFormFile file)\n{\n    // Validate the input. Put a limit on filesize to avoid large upload attacks.\n    // Only accept .pdf files (check content type)\n    if(file.Length == 0 ||file.Length > 20_971_520 || file.ContentType != "application/pdf")\n    {\n        return BadRequest("No file or an invalid one has been uploaded.");\n    }\n\n    var pathToFile = Path.Combine(Directory.GetCurrentDirectory(), $"uploaded_file_{Guid.NewGuid()}.pdf");\n\n    using (var fileStream = new FileStream(pathToFile, FileMode.Create))\n    {\n        file.CopyTo(fileStream);\n    }\n\n    // Created can also be returned of course\n    return Ok("Your file has been uploaded successfully.");\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"handling-files-as-a-response",children:"Handling files as a response"}),"\n",(0,s.jsx)(n.p,{children:"Returning files in a response is also possible and can be achieved as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[Route("api/files")]\n[ApiController]\npublic class FilesController : ControllerBase\n{\n    private readonly FileExtensionContentTypeProvider _fileExtensionContentTypeProvider;\n\n    public FilesController(FileExtensionContentTypeProvider fileExtensionContentTypeProvider)\n    {\n        _fileExtensionContentTypeProvider = fileExtensionContentTypeProvider\n            ?? throw new System.ArgumentNullException(nameof(fileExtensionContentTypeProvider));\n    }\n\n    [HttpGet("{fileId}")]\n    public ActionResult GetFile(string fileId)\n    {\n        var pathToFile = "someFilePath.pdf";\n\n        // check whether the file exists\n        if (!System.IO.File.Exists(pathToFile)) return NotFound();\n\n        if(!_fileExtensionContentTypeProvider.TryGetContentType(pathToFile, out var contentType))\n        {\n            // fallback/default value\n            contentType = "application/octet-stream";\n        }\n\n        var bytes = System.IO.File.ReadAllBytes(pathToFile);\n        return File(bytes, contentType, Path.GetFileName(pathToFile));\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We used the ",(0,s.jsx)(n.code,{children:"FileExtensionContentTypeProvider"})," here which needs to be registered first:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"builder.Services.AddSingleton<FileExtensionContentTypeProvider>();\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);