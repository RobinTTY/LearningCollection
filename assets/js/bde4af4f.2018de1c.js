"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[2625],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9214:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={id:"privateProtectedVsProtectedInternal",title:"Private protected vs protected internal access modifier"},i=void 0,c={unversionedId:"C-Sharp/privateProtectedVsProtectedInternal",id:"C-Sharp/privateProtectedVsProtectedInternal",title:"Private protected vs protected internal access modifier",description:"Before C# 7.2 we had protected internal modifier:",source:"@site/docs/C-Sharp/protected internal.md",sourceDirName:"C-Sharp",slug:"/C-Sharp/privateProtectedVsProtectedInternal",permalink:"/LearningCollection/C-Sharp/privateProtectedVsProtectedInternal",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/C-Sharp/protected internal.md",tags:[],version:"current",frontMatter:{id:"privateProtectedVsProtectedInternal",title:"Private protected vs protected internal access modifier"},sidebar:"finance",previous:{title:"Thread vs Task",permalink:"/LearningCollection/C-Sharp/threadVsTask"},next:{title:"Doctype",permalink:"/LearningCollection/Web/HTML/doctype"}},s={},l=[],p={toc:l};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Before C# 7.2 we had ",(0,a.kt)("inlineCode",{parentName:"p"},"protected internal")," modifier:"),(0,a.kt)("p",null,"This really means ",(0,a.kt)("strong",{parentName:"p"},"protected OR internal"),", that is - member A is ",(0,a.kt)("strong",{parentName:"p"},"accessible to child classes and also to any class in the current assembly"),', even if that class is not child of class A (so restriction implied by "protected" is relaxed). The internal modifier is also relaxed.'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"private protected")," really means protected AND internal:"),(0,a.kt)("p",null,'That is - member is accessible only to child classes which are in the same assembly, but not to child classes which are outside assembly (so restriction implied by "protected" is narrowed - becomes even more restrictive). That is useful if you build hierarchy of classes in your assembly and do not want any child classes from other assemblies to access certain parts of that hierarchy.'))}d.isMDXComponent=!0}}]);