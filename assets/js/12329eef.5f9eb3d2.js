"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[5292],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4287:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={id:"dataTypeLimitations",title:"Data Type Limitations",sidebar_position:3},i=void 0,s={unversionedId:"Databases/MongoDB/C-Sharp Driver/dataTypeLimitations",id:"Databases/MongoDB/C-Sharp Driver/dataTypeLimitations",title:"Data Type Limitations",description:"MongoDB stores data in BSON format. The BSON format has 21 data types.",source:"@site/docs/Databases/MongoDB/C-Sharp Driver/DataTypeLimitations.md",sourceDirName:"Databases/MongoDB/C-Sharp Driver",slug:"/Databases/MongoDB/C-Sharp Driver/dataTypeLimitations",permalink:"/LearningCollection/Databases/MongoDB/C-Sharp Driver/dataTypeLimitations",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Databases/MongoDB/C-Sharp Driver/DataTypeLimitations.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"dataTypeLimitations",title:"Data Type Limitations",sidebar_position:3},sidebar:"finance",previous:{title:"Distinct",permalink:"/LearningCollection/Databases/MongoDB/C-Sharp Driver/distinct"},next:{title:"Introduction",permalink:"/LearningCollection/Databases/MongoDB/M001 MongoDB Basics/mongoDbBasics"}},l={},p=[],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"MongoDB stores data in BSON format. The BSON format has 21 data types.\nThese data types are documented in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/bson-types/"},"MongoDB docs"),"."),(0,r.kt)("p",null,"The MongoDB C# driver has some limitations when writing C# data models to the database.\nThe driver can't handle all cases of writing unsigned data types like ",(0,r.kt)("inlineCode",{parentName:"p"},"uint")," to the database.\nThere are two options to handle these unsigned types:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Choose a signed data that can fit the unsigned value (e.g. instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"uint")," use ",(0,r.kt)("inlineCode",{parentName:"li"},"long"),")"),(0,r.kt)("li",{parentName:"ol"},"Annotate the property with ",(0,r.kt)("inlineCode",{parentName:"li"},"BsonRepresentation")," which defines the type the property is stored as in the database")),(0,r.kt)("p",null,"Example for option two:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyDataModel\n{\n    [BsonRepresentation(BsonType.Int64)]\n    public uint Value { get; set; }\n}\n")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Trying to store unsinged values in the database will cause a ",(0,r.kt)("strong",{parentName:"p"},"runtime exception"),".\nThe exception will look like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-none"},"Unhandled Exception: System.OverflowException: Value was either too large or too small for an Int32.\n   at System.Convert.ThrowInt32OverflowException()\n   at System.UInt32.System.IConvertible.ToInt32(IFormatProvider provider)\n   at MongoDB.Bson.Serialization.Serializers.EnumSerializer`1.Serialize(BsonSerializationContext context, BsonSerializationArgs args, TEnum value)\n"))))}m.isMDXComponent=!0}}]);