"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4179],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),h=i,f=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},3339:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const o={id:"queries",title:"Queries",sidebar_position:2},a=void 0,l={unversionedId:"apis/graphql/hot-chocolate/queries",id:"apis/graphql/hot-chocolate/queries",title:"Queries",description:"The query type in GraphQL represents a read-only view of all of our entities and ways to retrieve them.",source:"@site/docs/apis/graphql/hot-chocolate/queries.md",sourceDirName:"apis/graphql/hot-chocolate",slug:"/apis/graphql/hot-chocolate/queries",permalink:"/LearningCollection/apis/graphql/hot-chocolate/queries",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/apis/graphql/hot-chocolate/queries.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"queries",title:"Queries",sidebar_position:2},sidebar:"finance",previous:{title:"Introduction",permalink:"/LearningCollection/apis/graphql/hot-chocolate/introduction"},next:{title:"Mutations",permalink:"/LearningCollection/apis/graphql/hot-chocolate/mutations"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Lists",id:"lists",level:2},{value:"Usage",id:"usage-1",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The query type in GraphQL represents a read-only view of all of our entities and ways to retrieve them.\nA query type is required for every GraphQL server.\nQueries are expected to be side-effect free and are therefore parallelized by the execution engine."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"A query type can be defined like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Query\n{\n    public Book GetBook()\n    {\n        return new Book { Title  = "C# in depth", Author = "Jon Skeet" };\n    }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services\n            .AddGraphQLServer()\n            .AddQueryType<Query>();\n    }\n}\n\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Only one query type can be registered using ",(0,i.kt)("inlineCode",{parentName:"p"},"AddQueryType()"),". If we want to split up our query type into multiple classes, we can do so using ",(0,i.kt)("a",{parentName:"p",href:"https://chillicream.com/docs/hotchocolate/v13/defining-a-schema/extending-types"},"type extensions"),".")),(0,i.kt)("p",null,"A query type is just a regular object type, so everything that applies to an ",(0,i.kt)("a",{parentName:"p",href:"https://chillicream.com/docs/hotchocolate/v13/defining-a-schema/object-types"},"object type")," also applies to the query type (this is true for all root types)."),(0,i.kt)("h2",{id:"lists"},"Lists"),(0,i.kt)("p",null,"GraphQL allows us to return lists of elements from our fields.\nQuerying a list field will result in an ordered list containing elements with the specified sub-selection of fields.\nMore information about lists can be found in the ",(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#lists-and-non-null"},"official GraphQL documentation"),"."),(0,i.kt)("h3",{id:"usage-1"},"Usage"),(0,i.kt)("p",null,"If our field resolver returns a list type, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"IEnumerable<T>")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"IQueryable<T>"),", it will automatically be treated as a list type in the schema."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Query\n{\n    public List<User> GetUsers()\n    {\n        // Omitted code for brevity\n    }\n}\n")))}d.isMDXComponent=!0}}]);