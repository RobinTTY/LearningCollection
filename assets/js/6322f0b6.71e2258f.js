"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[5295],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var r=a.createContext({}),p=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(r.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=s,h=u["".concat(r,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),s=(t(7294),t(3905));const o={id:"basics",title:"Basics",sidebar_position:2},i=void 0,l={unversionedId:"Web/React/Main Concepts/basics",id:"Web/React/Main Concepts/basics",title:"Basics",description:"TODO: break out into multiple topics",source:"@site/docs/Web/React/Main Concepts/React Basics.md",sourceDirName:"Web/React/Main Concepts",slug:"/Web/React/Main Concepts/basics",permalink:"/LearningCollection/Web/React/Main Concepts/basics",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Web/React/Main Concepts/React Basics.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"basics",title:"Basics",sidebar_position:2},sidebar:"mySidebar",previous:{title:"JSX Syntax",permalink:"/LearningCollection/Web/React/Main Concepts/jsxSyntax"},next:{title:"Styling Components",permalink:"/LearningCollection/Web/React/Main Concepts/stylingComponents"}},r={},p=[{value:"Creating a new project",id:"creating-a-new-project",level:2},{value:"Project Checklist",id:"project-checklist",level:2},{value:"Structure of a React project",id:"structure-of-a-react-project",level:2},{value:"index.js",id:"indexjs",level:3},{value:"index.html",id:"indexhtml",level:3},{value:"App.js",id:"appjs",level:3},{value:"Creating a custom component",id:"creating-a-custom-component",level:2},{value:"Applying css to the component",id:"applying-css-to-the-component",level:3},{value:"JSX interpolation",id:"jsx-interpolation",level:3},{value:"Using props",id:"using-props",level:3},{value:"Composition and using props.children",id:"composition-and-using-propschildren",level:3},{value:"Arrow syntax",id:"arrow-syntax",level:3},{value:"React state and working with events",id:"react-state-and-working-with-events",level:2},{value:"Events",id:"events",level:3},{value:"The useState Hook",id:"the-usestate-hook",level:3},{value:"2 way bindings",id:"2-way-bindings",level:3},{value:"Passing data from child to parent",id:"passing-data-from-child-to-parent",level:3},{value:"Controlled Components",id:"controlled-components",level:3},{value:"Stateful and Stateless components",id:"stateful-and-stateless-components",level:3},{value:"Rendering Lists &amp; Conditional Content",id:"rendering-lists--conditional-content",level:2},{value:"Dynamic list elements",id:"dynamic-list-elements",level:3},{value:"Updating the list",id:"updating-the-list",level:3},{value:"Rendering conditional content",id:"rendering-conditional-content",level:3},{value:"Applying dynamic styles",id:"applying-dynamic-styles",level:3}],c={toc:p};function d(e){let{components:n,...o}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"TODO: break out into multiple topics")),(0,s.kt)("h2",{id:"creating-a-new-project"},"Creating a new project"),(0,s.kt)("p",null,"To create a new React project we simply use the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app <app-name>\n")),(0,s.kt)("h2",{id:"project-checklist"},"Project Checklist"),(0,s.kt)("p",null,"There are a few things that should be done to create good code with React:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Install the ",(0,s.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/eslint-plugin-react-hooks"},"React Hooks linter plugin")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://eslint.org/docs/rules/semi"},"Enforce semicolons")," through ESLint")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"This checklist is just based upon my own experience with React and JavaScript in general.")),(0,s.kt)("admonition",{type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"TODO: This checklist is under construction and not complete")),(0,s.kt)("h2",{id:"structure-of-a-react-project"},"Structure of a React project"),(0,s.kt)("p",null,"A very basic React project will look something like this:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"ProjectStructure",src:t(5226).Z,width:"240",height:"353"})),(0,s.kt)("h3",{id:"indexjs"},"index.js"),(0,s.kt)("p",null,"The entry point of our React application.\nLooks something like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'import ReactDOM from "react-dom";\n\n// would not work in plain javascript, there is no import of css files there\nimport "./index.css";\nimport App from "./App";\n\n// the app component gets inserted into the DOM inside the \'root\' element\nReactDOM.render(<App />, document.getElementById("root"));\n')),(0,s.kt)("h3",{id:"indexhtml"},"index.html"),(0,s.kt)("p",null,"Imports our React application and defines the root element where the application will be injected.\nLooks something like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <meta name="theme-color" content="#000000" />\n    <meta\n      name="description"\n      content="Web site created using create-react-app"\n    />\n    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />\n    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id="root"></div>\n  </body>\n</html>\n')),(0,s.kt)("h3",{id:"appjs"},"App.js"),(0,s.kt)("p",null,"Our root React component (a function component to be precise). It looks like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  // JSX syntax\n  return (\n    <div>\n      <h2>Let's get started!</h2>\n    </div>\n  );\n}\n\nexport default App;\n")),(0,s.kt)("h2",{id:"creating-a-custom-component"},"Creating a custom component"),(0,s.kt)("p",null,"A very basic custom component might look like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"function ExpenseItem() {\n  return (\n    <div>\n      <div>Date</div>\n      <div>\n        <h2>Title</h2>\n        <div>Amount</div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExpenseItem;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Custom components must start with a capital letter")," and are usually saved under a folder named 'components' in the project's src folder."),(0,s.kt)("h3",{id:"applying-css-to-the-component"},"Applying css to the component"),(0,s.kt)("p",null,"If we want to add css styling to our component we need to import the css file like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'import ExpenseItem from "./components/ExpenseItem";\n\nfunction App() {\n  return (\n    // instead of class we should use className here to reference the css classes.\n    <div className="expense-item">\n    ...\n')),(0,s.kt)("h3",{id:"jsx-interpolation"},"JSX interpolation"),(0,s.kt)("p",null,"Like with many other languages we can use interpolation with JSX.\nThis may look something like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'function ExpenseItem() {\n  const expenseDate = new Date(2021, 2, 28);\n  const expenseTitle = "Car Insurance";\n  const expenseAmount = 294.67;\n\n  return (\n    <div className="expense-item">\n      <div>{expenseDate.toISOString()}</div>\n      <div className="expense-item__description">\n        <h2>{expenseTitle}</h2>\n        <div className="expense-item__price">${expenseAmount}</div>\n      </div>\n    </div>\n  );\n}\n')),(0,s.kt)("h3",{id:"using-props"},"Using props"),(0,s.kt)("p",null,"Props are arguments passed into React components. Props are passed to components via HTML attributes.\nThis looks like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'// Inside the parent component (App)\nfunction App() {\n  const expenses = [\n    {\n      id: "e1",\n      title: "Toilet Paper",\n      amount: 94.12,\n      date: new Date(2020, 7, 14),\n    },\n    { id: "e2", title: "New TV", amount: 799.49, date: new Date(2021, 2, 12) },\n    {\n      id: "e3",\n      title: "Car Insurance",\n      amount: 294.67,\n      date: new Date(2021, 2, 28),\n    },\n    {\n      id: "e4",\n      title: "New Desk (Wooden)",\n      amount: 450,\n      date: new Date(2021, 5, 12),\n    },\n  ];\n\n  return (\n    <div>\n      <h2>Let\'s get started!</h2>\n      // passing in the props\n      <ExpenseItem\n        title={expenses[0].title}\n        amount={expenses[0].amount}\n        date={expenses[0].date}\n      ></ExpenseItem>\n      <ExpenseItem\n        title={expenses[1].title}\n        amount={expenses[1].amount}\n        date={expenses[1].date}\n      ></ExpenseItem>\n      <ExpenseItem\n        title={expenses[2].title}\n        amount={expenses[2].amount}\n        date={expenses[2].date}\n      ></ExpenseItem>\n      <ExpenseItem\n        title={expenses[3].title}\n        amount={expenses[3].amount}\n        date={expenses[3].date}\n      ></ExpenseItem>\n    </div>\n  );\n}\n\n// Inside the component which consumes the props (ExpenseItem)\nfunction ExpenseItem(props) {\n  return (\n    <div className="expense-item">\n      // using the props\n      <div>{props.date.toISOString()}</div>\n      <div className="expense-item__description">\n        <h2>{props.title}</h2>\n        <div className="expense-item__price">${props.amount}</div>\n      </div>\n    </div>\n  );\n}\n')),(0,s.kt)("h3",{id:"composition-and-using-propschildren"},"Composition and using props.children"),(0,s.kt)("p",null,"Sometimes you might want to have a component where you don't configure everything through props but where instead you're able to ",(0,s.kt)("strong",{parentName:"p"},"pass content between the opening and closing")," tags of that component. This is especially useful for components that represent 'generic boxes' and that don\u2019t know their children ahead of time."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'import "./Card.css";\n\nfunction Card(props) {\n  // this component allows us to append css classes through its props\n  const classes = "card " + props.className;\n  // props.children displays everything between the opening and closing tags of the Card component\n  return <div className={classes}>{props.children}</div>;\n}\n\nexport default Card;\n\n// using Card\n<Card className="expenses">\n  <ExpenseItem\n    title={props.expenses[0].title}\n    amount={props.expenses[0].amount}\n    date={props.expenses[0].date}\n  ></ExpenseItem>\n  ...\n</Card>;\n')),(0,s.kt)("h3",{id:"arrow-syntax"},"Arrow syntax"),(0,s.kt)("p",null,"We can also write our components with the arrow syntax, which looks like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"const App = () => {\n  const expenses = [...];\n\n  return (\n    <div>\n      <ExpenseList expenses={expenses} />\n    </div>\n  );\n};\n")),(0,s.kt)("h2",{id:"react-state-and-working-with-events"},"React state and working with events"),(0,s.kt)("h3",{id:"events"},"Events"),(0,s.kt)("p",null,"Attaching events to an element is simple. Take for instance the onclick event:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"<button onClick={clickHandler}>Change Title</button>\n")),(0,s.kt)("h3",{id:"the-usestate-hook"},"The useState Hook"),(0,s.kt)("p",null,'A Hook is a special function that lets you "hook into" React features. ',(0,s.kt)("inlineCode",{parentName:"p"},"useState")," is a hook that lets you add React state to function components. The ",(0,s.kt)("inlineCode",{parentName:"p"},"useState")," hook is used like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const ExpenseItem = (props) => {\n  // The hook function returns a pair of values, the first of which is the hook\'s current value,\n  // and the second is a function that should be called to update the hook\'s value.\n  const [title, setTitle] = useState(props.title);\n\n  const clickHandler = () => {\n    setTitle("Updated!");\n  };\n\n  return (\n      <div className="expense-item__description">\n        <h2>{title}</h2>\n        ...\n')),(0,s.kt)("h3",{id:"2-way-bindings"},"2 way bindings"),(0,s.kt)("p",null,"If we want to gather input from a form but also want to clear it after the user submitted it, we should use a 2 way binding. This allows us to listen to any changes in the form and clear it after the user submitted it."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'...\n\nconst submitHandler = (event) => {\n    // prevent page reload\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    // clear input fields after submit (state hook functions)\n    setEnteredTitle("");\n    setEnteredAmount("");\n    setEnteredDate("");\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className="new-expense__controls">\n        <div className="new-expense__control">\n          <label>Title</label>\n          <input\n            type="text"\n            // allows us to clear it after submit\n            value={enteredTitle}\n            // allows us to listen to changes\n            onChange={titleChangeHandler}\n          />\n        </div>\n        <div className="new-expense__control">\n          <label>Amount</label>\n          <input\n            type="number"\n            min="0.01"\n            step="0.01"\n            value={enteredAmount}\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className="new-expense__control">\n          <label>Date</label>\n          <input\n            type="date"\n            min="2019-01-01"\n            max="2022-12-31"\n            value={enteredDate}\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className="new-expense__actions">\n        <button type="submit">Add Expense</button>\n      </div>\n    </form>\n  );\n\n...\n')),(0,s.kt)("h3",{id:"passing-data-from-child-to-parent"},"Passing data from child to parent"),(0,s.kt)("p",null,"When we want to pass data from a child to a parent, we use props.",(0,s.kt)("br",{parentName:"p"}),"\n","Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'// parent component\nconst NewExpense = () => {\n  // Handles the submission of a new expense.\n  // Adds a random id to the expense data.\n  const saveExpenseDataHandler = (expenseData) => {\n    const expenseData = {\n      ...expenseData,\n      id: Math.random().toString(),\n    };\n\n    console.log("Saving expense data: ", expenseData);\n  };\n\n  return (\n    <div className="new-expense">\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\n    </div>\n  );\n};\n\n// child component\nconst submitHandler = (event) => {\n    ...\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    // call the passed down function to handle the newly added expense data\n    props.onSaveExpenseData(expenseData);\n\n    ...\n  };\n')),(0,s.kt)("h3",{id:"controlled-components"},"Controlled Components"),(0,s.kt)("p",null,"In HTML, form elements such as ",(0,s.kt)("inlineCode",{parentName:"p"},"<input>"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"<textarea>"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"<select>")," typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with ",(0,s.kt)("inlineCode",{parentName:"p"},"setState()"),"."),(0,s.kt)("p",null,'We can combine the two by making the React state be the "single source of truth". Then the ',(0,s.kt)("strong",{parentName:"p"},"React component that renders a form also controls what happens in that form on subsequent user input"),'. An input form element whose value is controlled by React in this way is called a "controlled component".'),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'// Component using the controlled component\nconst ExpenseList = (props) => {\n  const [selectedYear, setSelectedYear] = useState(2020);\n\n  const changeFilterHandler = (year) => {\n    setSelectedYear(year);\n    console.log(year);\n  };\n\n  return (\n    <div>\n      <Card className="expenses">\n        <ExpensesFilter\n          selected={selectedYear}\n          onChangeFilter={changeFilterHandler}\n        />\n        ...\n      </Card>\n    </div>\n  );\n};\n\n// controlled component ExpensesFilter\nconst ExpensesFilter = (props) => {\n  const dropdownChangeHandler = (event) => {\n    props.onChangeFilter(event.target.value);\n  };\n\n  return (\n    <div className="expenses-filter">\n      <div className="expenses-filter__control">\n        <label>Filter by year</label>\n        <select value={props.selected} onChange={dropdownChangeHandler}>\n          <option value="2022">2022</option>\n          <option value="2021">2021</option>\n          <option value="2020">2020</option>\n          <option value="2019">2019</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n')),(0,s.kt)("p",null,"Since the ",(0,s.kt)("inlineCode",{parentName:"p"},"value")," attribute is set on our ",(0,s.kt)("inlineCode",{parentName:"p"},"ExpensesFilter")," element (through the passed down ",(0,s.kt)("inlineCode",{parentName:"p"},"selected")," prop), the displayed value will always be the state ",(0,s.kt)("inlineCode",{parentName:"p"},"selectedYear"),", making the React state the source of truth. Since ",(0,s.kt)("inlineCode",{parentName:"p"},"changeFilterHandler")," runs on every new selection to update the React state, the year can then be used to filter the expenses."),(0,s.kt)("h3",{id:"stateful-and-stateless-components"},"Stateful and Stateless components"),(0,s.kt)("p",null,"In React, a stateful component is a component that holds some state. Stateless components, by contrast, have no state. Note that both types of components can use props."),(0,s.kt)("h2",{id:"rendering-lists--conditional-content"},"Rendering Lists & Conditional Content"),(0,s.kt)("h3",{id:"dynamic-list-elements"},"Dynamic list elements"),(0,s.kt)("p",null,"To generate the expenses list dynamically we can do this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const ExpenseList = (props) => {\n  ...\n  // generate one ExpenseItem for each expense that is passed down through props\n  return (\n    <div>\n      <Card className="expenses">\n        ...\n        {props.expenses.map((expense) => (\n          <ExpenseItem\n            key={expense.id}\n            title={expense.title}\n            amount={expense.amount}\n            date={expense.date}\n          />\n        ))}\n      </Card>\n    </div>\n  );\n};\n')),(0,s.kt)("h3",{id:"updating-the-list"},"Updating the list"),(0,s.kt)("p",null,"To update the list we need state in our App.js file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const dummyExpenses = [\n    ...\n    { id: "e2", title: "New TV", amount: 799.49, date: new Date(2021, 2, 12) },\n    ...\n  ];\n\nconst App = () => {\n  const [expenses, setExpenses] = useState(dummyExpenses);\n\n  const addExpenseHandler = (expense) => {\n    // add new expense to current list (this is how we should get the current state instead of\n    // accessing expenses directly)\n    setExpenses((prevExpenses) => {\n      return [expense, ...prevExpenses];\n    });\n  };\n\n  return (\n    <div>\n      <ExpenseList expenses={expenses} />\n      <NewExpense onAddExpense={addExpenseHandler} />\n    </div>\n  );\n};\n')),(0,s.kt)("h3",{id:"rendering-conditional-content"},"Rendering conditional content"),(0,s.kt)("p",null,"If we want for instance to display an info text if there are no items available if the list is filtered for a specific year, we can do it like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const ExpenseList = (props) => {\n  const [selectedYear, setSelectedYear] = useState("2020");\n\n  const changeFilterHandler = (year) => {\n    setSelectedYear(year);\n    console.log(year);\n  };\n\n  const filteredExpenses = props.expenses.filter(\n    (expenses) => expenses.date.getFullYear().toString() === selectedYear\n  );\n\n  // expressions can just use vanilla javascript ternary operators to render conditional content\n  return (\n    <div>\n      <Card className="expenses">\n        <ExpensesFilter\n          selected={selectedYear}\n          onChangeFilter={changeFilterHandler}\n        />\n        {filteredExpenses.length == 0 ? (\n          <p>No expenses for this timeframe.</p>\n        ) : (\n          filteredExpenses.map((expense) => (\n            <ExpenseItem\n              key={expense.id}\n              title={expense.title}\n              amount={expense.amount}\n              date={expense.date}\n            />\n          ))\n        )}\n      </Card>\n    </div>\n  );\n};\n')),(0,s.kt)("p",null,"Alternatively we can place the logic outside of our return statement to make it easier to read:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const ExpenseList = (props) => {\n  const [selectedYear, setSelectedYear] = useState("2020");\n\n  const changeFilterHandler = (year) => {\n    setSelectedYear(year);\n    console.log(year);\n  };\n\n  const filteredExpenses = props.expenses.filter(\n    (expenses) => expenses.date.getFullYear().toString() === selectedYear\n  );\n\n  let expensesContent = <p>No expenses for this time frame.</p>;\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map((expense) => (\n      <ExpenseItem\n        key={expense.id}\n        title={expense.title}\n        amount={expense.amount}\n        date={expense.date}\n      />\n    ));\n  }\n\n  return (\n    <div>\n      <Card className="expenses">\n        <ExpensesFilter\n          selected={selectedYear}\n          onChangeFilter={changeFilterHandler}\n        />\n        {expensesContent}\n      </Card>\n    </div>\n  );\n};\n')),(0,s.kt)("h3",{id:"applying-dynamic-styles"},"Applying dynamic styles"),(0,s.kt)("p",null,"React can also apply styling dynamically:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const ChartBar = (props) => {\n  let barFillHeight = "0%";\n  if (props.max > 0) {\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + "%";\n  }\n\n  // We use the barFillHeight variable to apply the height to the bar element\n  return (\n    <div className="chart-bar">\n      <div className="chart-bar__inner">\n        <div\n          className="chart-bar__fill"\n          style={{ height: barFillHeight }}\n        ></div>\n      </div>\n      <div className="chart-bar__label">{props.label}</div>\n    </div>\n  );\n};\n')))}d.isMDXComponent=!0},5226:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/ReactProjectStructure-05ce33e657ad167fb0eb0ea0688b49b5.PNG"}}]);