"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[7013],{98868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"web/typescript/decorators/introduction","title":"Introduction","description":"With the introduction of Classes in TypeScript and ES6, there now exist certain scenarios that require additional features to support annotating or modifying classes and class members. Decorators provide a way to add both annotations and a meta-programming syntax for class declarations and members.","source":"@site/docs/web/typescript/decorators/introduction.md","sourceDirName":"web/typescript/decorators","slug":"/web/typescript/decorators/introduction","permalink":"/LearningCollection/web/typescript/decorators/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/decorators/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"introduction","title":"Introduction","sidebar_position":1},"sidebar":"docs","previous":{"title":"Readonly<Type>","permalink":"/LearningCollection/web/typescript/utility-types/readonly"},"next":{"title":"Class Decorators","permalink":"/LearningCollection/web/typescript/decorators/class-decorators"}}');var r=n(74848),a=n(28453);const i={id:"introduction",title:"Introduction",sidebar_position:1},s=void 0,c={},l=[{value:"Capabilities",id:"capabilities",level:2},{value:"Decorator Factories",id:"decorator-factories",level:2},{value:"Decorator Composition",id:"decorator-composition",level:2}];function d(e){const t={admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["With the introduction of Classes in TypeScript and ES6, there now exist certain scenarios that require additional features to support annotating or modifying classes and class members. ",(0,r.jsx)(t.strong,{children:"Decorators provide a way to add both annotations and a meta-programming syntax for class declarations and members."})]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Decorators are an experimental feature that may change in future releases.\nTo use the feature set the ",(0,r.jsx)(t.code,{children:"experimentalDecorators"})," compiler option to ",(0,r.jsx)(t.code,{children:"true"})," either on the command line or in your ",(0,r.jsx)(t.code,{children:"tsconfig.json"}),"."]})}),"\n",(0,r.jsx)(t.h2,{id:"capabilities",children:"Capabilities"}),"\n",(0,r.jsxs)(t.p,{children:["A Decorator is a special kind of declaration that can be attached to a class declaration, method, accessor, property, or parameter. Decorators use the form ",(0,r.jsx)(t.code,{children:"@expression"}),", where ",(0,r.jsx)(t.code,{children:"expression"})," must evaluate to a function that will be called at runtime with information about the decorated declaration."]}),"\n",(0,r.jsxs)(t.p,{children:["For example, given the decorator ",(0,r.jsx)(t.code,{children:"@sealed"})," we might write the ",(0,r.jsx)(t.code,{children:"sealed"})," function as follows:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"function sealed(target) {\n  // do something with 'target' ...\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Decorators have three primary capabilities:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"They can replace the value that is being decorated with a matching value that has the same semantics. (e.g. a decorator can replace a method with another method, a field with another field, a class with another class, and so on)."}),"\n",(0,r.jsx)(t.li,{children:"They can provide access to the value that is being decorated via accessor functions which they can then choose to share."}),"\n",(0,r.jsx)(t.li,{children:"They can initialize the value that is being decorated, running additional code after the value has been fully defined. In cases where the value is a member of class, then initialization occurs once per instance."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Essentially, decorators can be used to metaprogram and add functionality to a value, without fundamentally changing its external behavior."}),"\n",(0,r.jsx)(t.h2,{id:"decorator-factories",children:"Decorator Factories"}),"\n",(0,r.jsxs)(t.p,{children:["If we want to ",(0,r.jsx)(t.strong,{children:"customize how a decorator is applied to a declaration"}),", we can write a decorator factory. A Decorator Factory is simply a ",(0,r.jsx)(t.strong,{children:"function that returns the expression that will be called"})," by the decorator at runtime."]}),"\n",(0,r.jsx)(t.p,{children:"We can write a decorator factory in the following fashion:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// this is the decorator factory, it sets up\n// the returned decorator function\nfunction color(value: string) {\n  return function (target) {\n    // this is the decorator\n    // do something with 'target' and 'value'...\n  };\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"decorator-composition",children:"Decorator Composition"}),"\n",(0,r.jsx)(t.p,{children:"Multiple decorators can be applied to a declaration, for example on a single line:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"@f @g x\n"})}),"\n",(0,r.jsx)(t.p,{children:"On multiple lines:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"@f\n@g\nx\n"})}),"\n",(0,r.jsx)(t.p,{children:"The following steps are performed when evaluating multiple decorators on a single declaration in TypeScript:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The expressions for each decorator are evaluated top-to-bottom"}),"\n",(0,r.jsx)(t.li,{children:"The results are then called as functions from bottom-to-top"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"If we were to use decorator factories, we can observe this evaluation order with the following example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'function first() {\n  console.log("first(): factory evaluated");\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    console.log("first(): called");\n  };\n}\n\nfunction second() {\n  console.log("second(): factory evaluated");\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    console.log("second(): called");\n  };\n}\n\nclass ExampleClass {\n  @first()\n  @second()\n  method() {}\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Which would print this output to the console:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"first(): factory evaluated\nsecond(): factory evaluated\nsecond(): called\nfirst(): called\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(96540);const r={},a=o.createContext(r);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);