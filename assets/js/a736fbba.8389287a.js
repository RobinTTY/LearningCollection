"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8769],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,h=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7649:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={id:"semaphoreVsMutex",title:"Semaphore vs Mutex"},i=void 0,s={unversionedId:"general-concepts/semaphoreVsMutex",id:"general-concepts/semaphoreVsMutex",title:"Semaphore vs Mutex",description:"Mutex",source:"@site/docs/general-concepts/Semaphore vs Mutex.md",sourceDirName:"general-concepts",slug:"/general-concepts/semaphoreVsMutex",permalink:"/LearningCollection/general-concepts/semaphoreVsMutex",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/general-concepts/Semaphore vs Mutex.md",tags:[],version:"current",frontMatter:{id:"semaphoreVsMutex",title:"Semaphore vs Mutex"},sidebar:"docs",previous:{title:"Remote Procedure Call (RPC)",permalink:"/LearningCollection/general-concepts/rpc"},next:{title:"Stack vs Heap",permalink:"/LearningCollection/general-concepts/stackVsHeap"}},l={},c=[{value:"Mutex",id:"mutex",level:2},{value:"Mutual Exclusion Semaphores",id:"mutual-exclusion-semaphores",level:3},{value:"Semaphore",id:"semaphore",level:2},{value:"Binary Semaphore",id:"binary-semaphore",level:3},{value:"Difference",id:"difference",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"mutex"},"Mutex"),(0,a.kt)("p",null,"A synchronization primitive that can also be used for interprocess synchronization."),(0,a.kt)("h3",{id:"mutual-exclusion-semaphores"},"Mutual Exclusion Semaphores"),(0,a.kt)("p",null,"Mutual Exclusion semaphores are used to protect shared resources (data structure, file, etc..)."),(0,a.kt)("p",null,'A Mutex semaphore is "owned" by the task that takes it. If Task B attempts to semGive a mutex currently held by Task A, Task B\'s call will return an error and fail.'),(0,a.kt)("p",null,"Mutexes always use the following sequence:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"SemTake"),(0,a.kt)("li",{parentName:"ul"},"Critical Section"),(0,a.kt)("li",{parentName:"ul"},"SemGive")),(0,a.kt)("h2",{id:"semaphore"},"Semaphore"),(0,a.kt)("p",null,"Limits the number of threads that can access a resource or pool of resources concurrently."),(0,a.kt)("h3",{id:"binary-semaphore"},"Binary Semaphore"),(0,a.kt)("p",null,"Binary Semaphore address a totally different question:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Task B is pended waiting for something to happen (a sensor being tripped for example)."),(0,a.kt)("li",{parentName:"ul"},"Sensor Trips and an Interrupt Service Routine runs. It needs to notify a task of the trip."),(0,a.kt)("li",{parentName:"ul"},"Task B should run and take appropriate actions for the sensor trip. Then go back to waiting.")),(0,a.kt)("p",null,"Note that with a binary semaphore, it is OK for B to take the semaphore and A to give it.\nAgain, a binary semaphore is NOT protecting a resource from access. The act of Giving and Taking a semaphore are fundamentally decoupled.\nIt typically makes little sense for the same task to so a give and a take on the same binary semaphore."),(0,a.kt)("h2",{id:"difference"},"Difference"),(0,a.kt)("p",null,'Mutex is for exclusive access to a resource. A Binary semaphore should be used for Synchronization (i.e. "Hey Someone! This occurred!").'))}m.isMDXComponent=!0}}]);