"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[5696],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>u});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),m=l(t),u=o,h=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return t?n.createElement(h,i(i({ref:r},d),{},{components:t})):n.createElement(h,i({ref:r},d))}));function u(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8954:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=t(7462),o=(t(7294),t(3905));const a={id:"errorBoundaries",title:"Error Boundaries",sidebar_position:5},i=void 0,c={unversionedId:"Web/React/Advanced Concepts/errorBoundaries",id:"Web/React/Advanced Concepts/errorBoundaries",title:"Error Boundaries",description:"Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.",source:"@site/docs/Web/React/Advanced Concepts/Error Boundaries.md",sourceDirName:"Web/React/Advanced Concepts",slug:"/Web/React/Advanced Concepts/errorBoundaries",permalink:"/LearningCollection/Web/React/Advanced Concepts/errorBoundaries",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Web/React/Advanced Concepts/Error Boundaries.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"errorBoundaries",title:"Error Boundaries",sidebar_position:5},sidebar:"finance",previous:{title:"React.memo",permalink:"/LearningCollection/Web/React/Advanced Concepts/reactMemo"},next:{title:"HTTP Requests in React",permalink:"/LearningCollection/Web/React/Related Concepts/httpRequestsInReact"}},s={},l=[{value:"componentDidCatch()",id:"componentdidcatch",level:2},{value:"Syntax",id:"syntax",level:3},{value:"static getDerivedStateFromError()",id:"static-getderivedstatefromerror",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Example",id:"example",level:2}],d={toc:l};function p(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Error boundaries are React components that ",(0,o.kt)("strong",{parentName:"p"},"catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI")," instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Error boundaries do ",(0,o.kt)("strong",{parentName:"p"},"not")," catch errors for:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Event handlers (see ",(0,o.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/error-boundaries.html#how-about-event-handlers"},"documentation"),")"),(0,o.kt)("li",{parentName:"ul"},"Asynchronous code (e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"setTimeout")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"requestAnimationFrame")," callbacks)"),(0,o.kt)("li",{parentName:"ul"},"Server side rendering"),(0,o.kt)("li",{parentName:"ul"},"Errors thrown in the error boundary itself (rather than its children)"))),(0,o.kt)("p",null,"A class component becomes an error boundary if it defines either (or both) of the lifecycle methods ",(0,o.kt)("inlineCode",{parentName:"p"},"static getDerivedStateFromError()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"componentDidCatch()"),". Use ",(0,o.kt)("inlineCode",{parentName:"p"},"static getDerivedStateFromError()")," to render a fallback UI after an error has been thrown. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"componentDidCatch()")," to log error information. Error boundaries work like a JavaScript ",(0,o.kt)("inlineCode",{parentName:"p"},"catch {}")," block, but for components."),(0,o.kt)("h2",{id:"componentdidcatch"},"componentDidCatch()"),(0,o.kt)("p",null,"This lifecycle is invoked after an error has been thrown by a descendant component. It receives two parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"error")," - The error that was thrown"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"info")," - An object with a componentStack key containing ",(0,o.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/error-boundaries.html#component-stack-traces"},"information about which component threw the error"),".")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"componentDidCatch()")," is called during the \u201ccommit\u201d phase, so side-effects are permitted. It should be used for things like logging errors."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Production and development builds of React slightly differ in the way ",(0,o.kt)("inlineCode",{parentName:"p"},"componentDidCatch()")," handles errors. On development, the errors will bubble up to ",(0,o.kt)("inlineCode",{parentName:"p"},"window"),", this means that any ",(0,o.kt)("inlineCode",{parentName:"p"},"window.onerror")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"window.addEventListener('error', callback)")," will intercept the errors that have been caught by ",(0,o.kt)("inlineCode",{parentName:"p"},"componentDidCatch()"),". On production, instead, the errors will not bubble up, which means any ancestor error handler will only receive errors not explicitly caught by ",(0,o.kt)("inlineCode",{parentName:"p"},"componentDidCatch()"),".")),(0,o.kt)("h3",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"componentDidCatch(error, info);\n")),(0,o.kt)("h2",{id:"static-getderivedstatefromerror"},"static getDerivedStateFromError()"),(0,o.kt)("p",null,"This lifecycle is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"getDerivedStateFromError()")," is called during the \u201crender\u201d phase, so side-effects are not permitted. For those use cases, use ",(0,o.kt)("inlineCode",{parentName:"p"},"componentDidCatch()")," instead.")),(0,o.kt)("h3",{id:"syntax-1"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"static getDerivedStateFromError(error);\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Define the error boundary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  // invoked after an error has been thrown by a descendant component\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n")),(0,o.kt)("p",null,"Then you can use it as a regular component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<ErrorBoundary>\n  <MyWidget />\n</ErrorBoundary>\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Error boundaries ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-faq.html#do-hooks-cover-all-use-cases-for-classes"},"cannot be implemented as functional components")," as of today. There is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/issues/19630#issuecomment-675390931"},"no timeline")," for the implementation as a hook.")))}p.isMDXComponent=!0}}]);