"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[7917],{6721:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=s(4848),a=s(8453);const r={id:"advancedCrudOperations",title:"Advanced CRUD operations",sidebar_position:5},t=void 0,l={id:"databases/mongodb/m001-mongodb-basics/advancedCrudOperations",title:"Advanced CRUD operations",description:"MQL Operators",source:"@site/docs/databases/mongodb/m001-mongodb-basics/Advanced CRUD operations.md",sourceDirName:"databases/mongodb/m001-mongodb-basics",slug:"/databases/mongodb/m001-mongodb-basics/advancedCrudOperations",permalink:"/LearningCollection/databases/mongodb/m001-mongodb-basics/advancedCrudOperations",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/databases/mongodb/m001-mongodb-basics/Advanced CRUD operations.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"advancedCrudOperations",title:"Advanced CRUD operations",sidebar_position:5},sidebar:"docs",previous:{title:"Querying, Creating, Updating and Deleting documents with Mongo shell",permalink:"/LearningCollection/databases/mongodb/m001-mongodb-basics/queryingCreatingUpdatingDeleting"},next:{title:"Indexing and Aggregation Pipeline",permalink:"/LearningCollection/databases/mongodb/m001-mongodb-basics/IndexingAggregationsPipeline"}},o={},d=[{value:"MQL Operators",id:"mql-operators",level:2},{value:"Update Operators",id:"update-operators",level:3},{value:"$ Operator",id:"-operator",level:3},{value:"Query Operators",id:"query-operators",level:3},{value:"Comparison Operators",id:"comparison-operators",level:4},{value:"Logic Operators",id:"logic-operators",level:3},{value:"$and is the default operator",id:"and-is-the-default-operator",level:4},{value:"Quizzes",id:"quizzes",level:4},{value:"Quiz 1",id:"quiz-1",level:5},{value:"Quiz 2",id:"quiz-2",level:5},{value:"Expressive query operator",id:"expressive-query-operator",level:3},{value:"MQL syntax vs aggregation syntax",id:"mql-syntax-vs-aggregation-syntax",level:4},{value:"Quiz",id:"quiz",level:4},{value:"Array Operators",id:"array-operators",level:3},{value:"Lab 1",id:"lab-1",level:4},{value:"Lab 2",id:"lab-2",level:4},{value:"Projection",id:"projection",level:3},{value:"$elemMatch",id:"elemmatch",level:3},{value:"Lab",id:"lab",level:4},{value:"IMPORTANT",id:"important",level:4},{value:"Array Operators and Sub-Documents",id:"array-operators-and-sub-documents",level:3},{value:"Lab 1",id:"lab-1-1",level:4},{value:"Lab 2",id:"lab-2-1",level:4}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"mql-operators",children:"MQL Operators"}),"\n",(0,i.jsx)(n.h3,{id:"update-operators",children:"Update Operators"}),"\n",(0,i.jsxs)(n.p,{children:["Example: $inc, $set, $unset",(0,i.jsx)(n.br,{}),"\n","Enable us to modify data in the database."]}),"\n",(0,i.jsx)(n.h3,{id:"-operator",children:"$ Operator"}),"\n",(0,i.jsx)(n.p,{children:"The $ operator has multiple uses:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"precedes MQL operators"}),"\n",(0,i.jsx)(n.li,{children:"precedes aggregation pipeline stages"}),"\n",(0,i.jsx)(n.li,{children:"allows access to field values"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"query-operators",children:"Query Operators"}),"\n",(0,i.jsx)(n.p,{children:"Provide additional ways to locate data within the database."}),"\n",(0,i.jsx)(n.h4,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$eq"})," ",(0,i.jsx)(n.code,{children:"(==)"}),": ",(0,i.jsx)(n.strong,{children:"Eq"}),"ual to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$ne"})," ",(0,i.jsx)(n.code,{children:"(!=)"}),": ",(0,i.jsx)(n.strong,{children:"N"}),"ot ",(0,i.jsx)(n.strong,{children:"e"}),"qual to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$gt"})," ",(0,i.jsx)(n.code,{children:"(>)"}),": ",(0,i.jsx)(n.strong,{children:"G"}),"reater ",(0,i.jsx)(n.strong,{children:"t"}),"han"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$lt"})," ",(0,i.jsx)(n.code,{children:"(<)"}),": ",(0,i.jsx)(n.strong,{children:"L"}),"ess ",(0,i.jsx)(n.strong,{children:"t"}),"han"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$gte"})," ",(0,i.jsx)(n.code,{children:"(>=)"}),": ",(0,i.jsx)(n.strong,{children:"G"}),"reater ",(0,i.jsx)(n.strong,{children:"t"}),"han or ",(0,i.jsx)(n.strong,{children:"e"}),"qual to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$lte"})," ",(0,i.jsx)(n.code,{children:"(<=)"}),": ",(0,i.jsx)(n.strong,{children:"L"}),"ess ",(0,i.jsx)(n.strong,{children:"t"}),"han or ",(0,i.jsx)(n.strong,{children:"e"}),"qual to"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Syntax to use them:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ <field>: { <operator>: <value> } }\n\n// Example:\n\n{ "tripduration": { "$lte" : 60 } }\n\n// 2 Conditions:\n\n{ "tripduration": { "$lte" : 60 }, "usertype": { "$ne": "Subscriber" } }\n'})}),"\n",(0,i.jsx)(n.p,{children:"With mongodb shell we can query like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'db.trips.find({ "tripduration": { "$lte" : 70 },\n                "usertype": { "$eq": "Customer" }}).pretty()\n\n// This is equivalent to (implicit equality operator):\n\ndb.trips.find({ "tripduration": { "$lte" : 70 },\n                "usertype": "Customer" }).pretty()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"logic-operators",children:"Logic Operators"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"$and"}),":"]})," Match all of the specified query clauses"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"$or"}),":"]})," At least one of the query clauses is matched"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"$nor"}),":"]})," Fail to match both given clauses"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"{ <operator> : [ { statement1 }, { statement2 }, ... ] }\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"$not:"})," Negates the query requirement"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"{ $not: { statement } }\n"})}),"\n",(0,i.jsx)(n.h4,{id:"and-is-the-default-operator",children:"$and is the default operator"}),"\n",(0,i.jsx)(n.p,{children:"A query like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ "tripduration": 60, "usertype": "Subscriber" }\n'})}),"\n",(0,i.jsx)(n.p,{children:"already contains an implicit $and. The explicit typing looks like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ "$and": [{ "tripduration": 60 }, { "usertype": "Subscriber" }] }\n'})}),"\n",(0,i.jsx)(n.p,{children:"Another example:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"implicitAnd",src:s(3189).A+"",width:"1181",height:"472"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," Explicitly use $and when you need to include the same operator more than once in a query"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"and",src:s(9262).A+"",width:"919",height:"242"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'db.routes.find({ "$and": [ { "$or" :[ { "dst_airport": "KZN" },\n                                    { "src_airport": "KZN" } ]\n                           },\n                          { "$or" :[ { "airplane": "CR2" },\n                                     { "airplane": "A81" } ]\n                          }\n                         ]}).pretty()\n'})}),"\n",(0,i.jsx)(n.h4,{id:"quizzes",children:"Quizzes"}),"\n",(0,i.jsx)(n.h5,{id:"quiz-1",children:"Quiz 1"}),"\n",(0,i.jsx)(n.p,{children:"How many zips in the sample_training.zips dataset are neither over-populated nor under-populated?"}),"\n",(0,i.jsx)(n.p,{children:"In this case, we consider population of more than 1,000,000 to be over- populated and less than 5,000 to be under-populated."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{ "pop": { "$lt": 1000000 }, "pop": { "$gt": 5000 } }\n'})}),"\n",(0,i.jsx)(n.h5,{id:"quiz-2",children:"Quiz 2"}),"\n",(0,i.jsx)(n.p,{children:"How many companies in the sample_training.companies dataset were"}),"\n",(0,i.jsx)(n.p,{children:"either founded in 2004"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[and] either have the social category_code [or] web category_code,"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"[or] were founded in the month of October"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[and] also either have the social category_code [or] web category_code?"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "$or": [\n    {\n      "$and": [\n        { "founded_year": 2004 },\n        { "$or": [{ "category_code": "social" }, { "category_code": "web" }] }\n      ]\n    },\n    {\n      "$and": [\n        { "founded_month": 10 },\n        { "$or": [{ "category_code": "social" }, { "category_code": "web" }] }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"expressive-query-operator",children:"Expressive query operator"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"$expr allows the use of aggregation expressions withing the query language"}),"\n",(0,i.jsx)(n.li,{children:"$expr allows us to use variables and conditional statements"}),"\n",(0,i.jsx)(n.li,{children:"Reminder: $ denotes the use of an operator or addresses the field value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"{ $expr: { <expression> } }\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.p,{children:"Find all documents where the trip started and ended at the same station:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ "$expr": { "$eq": [ "$end station id", "$start station id"] } }\n'})}),"\n",(0,i.jsx)(n.p,{children:"This allows us to compare values that vary from document to document instead of one specific value."}),"\n",(0,i.jsx)(n.h4,{id:"mql-syntax-vs-aggregation-syntax",children:"MQL syntax vs aggregation syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"aggregation",src:s(3863).A+"",width:"1171",height:"589"})}),"\n",(0,i.jsxs)(n.p,{children:["From ",(0,i.jsx)(n.a,{href:"https://github.com/Automattic/mongoose/issues/6453",children:"Github"}),":"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"If all you need to do is grab a set of documents, or specific paths from documents, find is the way to go. Aggregation provides a set of operations ( stages ) which allow you to transform the data before it's returned from the server. The decision of which to use ultimately boils down to whether or not you need/want to reshape the data before returning it from the db or just returning what exists in the db as is."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"quiz",children:"Quiz"}),"\n",(0,i.jsx)(n.p,{children:"How many companies in the sample_training.companies collection have the same permalink as their twitter_username?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{ "$expr": { "$eq": ["$permalink", "$twitter_username"] } }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"array-operators",children:"Array Operators"}),"\n",(0,i.jsx)(n.p,{children:"To work with array fields we can use the $all operator:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'db.listingsAndReviews.find({ "amenities": {\n                                  "$size": 20,\n                                  "$all": [ "Internet", "Wifi",  "Kitchen",\n                                           "Heating", "Family/kid friendly",\n                                           "Washer", "Dryer", "Essentials",\n                                           "Shampoo", "Hangers",\n                                           "Hair dryer", "Iron",\n                                           "Laptop friendly workspace" ]\n                                         }\n                            }).pretty()\n'})}),"\n",(0,i.jsx)(n.p,{children:"This will find all documents with exactly 20 amenities which include all the amenities listed in the query array."}),"\n",(0,i.jsx)(n.h4,{id:"lab-1",children:"Lab 1"}),"\n",(0,i.jsx)(n.p,{children:"What is the name of the listing in the sample_airbnb.listingsAndReviews dataset that accommodates more than 6 people and has exactly 50 reviews?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{ "$and": [{ "accommodates": { "$gt": 6 } }, { "reviews": { "$size": 50 } }] }\n'})}),"\n",(0,i.jsx)(n.h4,{id:"lab-2",children:"Lab 2"}),"\n",(0,i.jsx)(n.p,{children:'Using the sample_airbnb.listingsAndReviews collection find out how many documents have the "property_type" "House", and include "Changing table" as one of the "amenities"?'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "$and": [\n    { "property_type": "House" },\n    { "amenities": { "$all": ["Changing table"] } }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"projection",children:"Projection"}),"\n",(0,i.jsx)(n.p,{children:"By default, queries in MongoDB return all fields in matching documents. To limit the amount of data that MongoDB sends to applications, you can include a projection document to specify or restrict fields to return."}),"\n",(0,i.jsx)(n.p,{children:"Syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"db.<collection>.find({ <query> }, { <projection> })\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1: include the field"}),"\n",(0,i.jsx)(n.li,{children:"0: exclude the field"}),"\n",(0,i.jsx)(n.li,{children:"Use only 1s or only 0s (other than excluding the _id while specifying included fields)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsxs)(n.p,{children:["Find all documents with exactly 20 amenities which include all the amenities listed in the query array, and ",(0,i.jsx)(n.strong,{children:"display their price and address"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'db.listingsAndReviews.find({ "amenities":\n        { "$size": 20, "$all": [ "Internet", "Wifi",  "Kitchen", "Heating",\n                                 "Family/kid friendly", "Washer", "Dryer",\n                                 "Essentials", "Shampoo", "Hangers",\n                                 "Hair dryer", "Iron",\n                                 "Laptop friendly workspace" ] } },\n                            {"price": 1, "address": 1}).pretty()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"elemmatch",children:"$elemMatch"}),"\n",(0,i.jsxs)(n.p,{children:["Matches documents that contain an array field with at least one element that matches the specified query criteria ",(0,i.jsx)(n.strong,{children:"or"})," projects only the array elements with at least one element that matches the specified criteria."]}),"\n",(0,i.jsx)(n.p,{children:"Syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ <field>: { "$elemMatch": { <field>: <value> } } }\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsxs)(n.p,{children:["Find all documents where the student in ",(0,i.jsx)(n.strong,{children:"class 431"})," received a ",(0,i.jsx)(n.strong,{children:"grade higher than 85"})," for any type of assignment:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'db.grades.find({ "class_id": 431 },\n               { "scores": { "$elemMatch": { "score": { "$gt": 85 } } }\n             }).pretty()\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example 2:"}),"\n",(0,i.jsx)(n.p,{children:"Given the following documents in the scores collection:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"{ _id: 1, results: [ 82, 85, 88 ] }\n{ _id: 2, results: [ 75, 88, 89 ] }\n"})}),"\n",(0,i.jsx)(n.p,{children:"The following query matches only those documents where the results array contains at least one element that is both greater than or equal to 80 and is less than 85:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"db.scores.find(\n   { results: { $elemMatch: { $gte: 80, $lt: 85 } } }\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"The query returns the following document since the element 82 is both greater than or equal to 80 and is less than 85:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ "_id" : 1, "results" : [ 82, 85, 88 ] }\n'})}),"\n",(0,i.jsx)(n.h4,{id:"lab",children:"Lab"}),"\n",(0,i.jsx)(n.p,{children:"How many companies in the sample_training.companies collection have offices in the city of Seattle?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ "offices.city": "Seattle"  }\n'})}),"\n",(0,i.jsx)(n.p,{children:"or $elemMatch operator allows us to specify multiple criteria on an array of embedded documents such that at least one embedded document satisfies all the specified criteria:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ "offices": { $elemMatch: { city: "Seattle" } } }\n'})}),"\n",(0,i.jsx)(n.h4,{id:"important",children:"IMPORTANT"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"$elemMatch is not the same logic as dot notation."})," $elemMatch requires the same nested elements to have the values. Using dot notation allows for any nested elements to have these values."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"{ _id : 1 , array : [ { a : 1 , b : 2 } , { a : 3 , b : 3 } ] }\n{ _id : 2 , array : [ { a : 1 , b : 3 } , { a : 3 , b : 4 } ] }\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"find( { array.a : 1 , array.b : 3 } ) // will find both documents.\nfind( { array : { $elemMatch : { a : 1 , b : 3 } } } ) // will only find _id:2.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["More info here: ",(0,i.jsx)(n.a,{href:"https://docs.mongodb.com/manual/tutorial/query-array-of-documents/",children:"Documentation"})]}),"\n",(0,i.jsx)(n.h3,{id:"array-operators-and-sub-documents",children:"Array Operators and Sub-Documents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dot-notation is used to access sub documents"}),"\n",(0,i.jsx)(n.li,{children:"With this notation we can access arbitrarily deep nested fields"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'// 1 level deep\ndb.trips.findOne({ "start station location.type": "Point" })\n\n// 4 levels deep (0 indicates first array element in this case)\ndb.companies.find({ "relationships.0.person.last_name": "Zuckerberg" },\n                  { "name": 1 }).pretty()\n'})}),"\n",(0,i.jsx)(n.h4,{id:"lab-1-1",children:"Lab 1"}),"\n",(0,i.jsx)(n.p,{children:"How many trips in the sample_training.trips collection started at stations that are to the west of the -74 longitude coordinate?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ "start station location.coordinates.0": {"$lt": -74} }\n'})}),"\n",(0,i.jsx)(n.h4,{id:"lab-2-1",children:"Lab 2"}),"\n",(0,i.jsx)(n.p,{children:"How many inspections from the sample_training.inspections collection were conducted in the city of NEW YORK?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'{ "address.city": "NEW YORK" }\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3863:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/aggregation-7fef12b6bea9c6817881115d6a317aee.PNG"},9262:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/and-39c4205db394466de4ac6d6331012b4d.png"},3189:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/implicitAnd-0e815688b1a402ade96f5930d1cb8459.png"},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const a={},r=i.createContext(a);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);