"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[9963],{42463:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"databases/mongodb/m001-mongodb-basics/IndexingAggregationsPipeline","title":"Indexing and Aggregation Pipeline","description":"Aggregation Framework","source":"@site/docs/databases/mongodb/m001-mongodb-basics/Indexing and Aggregation Pipeline.md","sourceDirName":"databases/mongodb/m001-mongodb-basics","slug":"/databases/mongodb/m001-mongodb-basics/IndexingAggregationsPipeline","permalink":"/LearningCollection/databases/mongodb/m001-mongodb-basics/IndexingAggregationsPipeline","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/databases/mongodb/m001-mongodb-basics/Indexing and Aggregation Pipeline.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"IndexingAggregationsPipeline","title":"Indexing and Aggregation Pipeline","sidebar_position":6},"sidebar":"docs","previous":{"title":"Advanced CRUD operations","permalink":"/LearningCollection/databases/mongodb/m001-mongodb-basics/advancedCrudOperations"},"next":{"title":"Introduction","permalink":"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/m220n"}}');var s=i(74848),r=i(28453);const d={id:"IndexingAggregationsPipeline",title:"Indexing and Aggregation Pipeline",sidebar_position:6},a=void 0,o={},l=[{value:"Aggregation Framework",id:"aggregation-framework",level:2},{value:"Syntax",id:"syntax",level:3},{value:"$group operator",id:"group-operator",level:3},{value:"Examples",id:"examples",level:3},{value:"Lab: Aggregation Framework",id:"lab-aggregation-framework",level:3},{value:"$sort and $limit operator",id:"sort-and-limit-operator",level:3},{value:"Indexes",id:"indexes",level:2},{value:"When to index",id:"when-to-index",level:3},{value:"Create an index",id:"create-an-index",level:3},{value:"Compound Index",id:"compound-index",level:3},{value:"Upsert - Update or Insert",id:"upsert---update-or-insert",level:2},{value:"Quiz",id:"quiz",level:3}];function c(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"aggregation-framework",children:"Aggregation Framework"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"another way to query data in MongoDB"}),"\n",(0,s.jsx)(n.li,{children:"everything that can be done with the query language can also be done with the aggregation framework"}),"\n",(0,s.jsx)(n.li,{children:"new ways to work with data like group, compute, reshape, etc."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.p,{children:"Find all documents that have Wifi as one of the amenities. Only include price and address in the resulting cursor:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// with MQL\ndb.listingsAndReviews.find({ "amenities": "Wifi" },\n                           { "price": 1, "address": 1, "_id": 0 }).pretty()\n\n// with the aggregation framework\ndb.listingsAndReviews.aggregate([\n                                  { "$match": { "amenities": "Wifi" } },\n                                  { "$project": { "price": 1,\n                                                  "address": 1,\n                                                  "_id": 0 }}]).pretty()\n'})}),"\n",(0,s.jsx)(n.p,{children:"With the aggregation framework we can build pipelines:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"aggregation pipeline",src:i(6573).A+"",width:"1109",height:"672"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," It matters in which order the different pipeline stages are since each pipeline stage uses the results of the preceding stage."]}),"\n",(0,s.jsx)(n.h3,{id:"group-operator",children:"$group operator"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{alt:"group",src:i(30712).A+"",width:"1151",height:"531"}),"\n",(0,s.jsx)(n.img,{alt:"group2",src:i(99275).A+"",width:"1089",height:"621"})]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Project only the address field value for each document, then group all documents into one document per address.country value:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'db.listingsAndReviews.aggregate([ { "$project": { "address": 1, "_id": 0 }},\n                                  { "$group": { "_id": "$address.country" }}])\n'})}),"\n",(0,s.jsx)(n.p,{children:"Result:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"{ _id: 'Turkey' }\n{ _id: 'Spain' }\n{ _id: 'Portugal' }\n{ _id: 'Hong Kong' }\n{ _id: 'China' }\n{ _id: 'United States' }\n{ _id: 'Australia' }\n{ _id: 'Canada' }\n{ _id: 'Brazil' }\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Project only the address field value for each document, then group all documents into one document per address.country value, and count one for each document in each group:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'db.listingsAndReviews.aggregate([\n                                  { "$project": { "address": 1, "_id": 0 }},\n                                  { "$group": { "_id": "$address.country",\n                                                "count": { "$sum": 1 } } }\n                                ])\n'})}),"\n",(0,s.jsx)(n.p,{children:"Result:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"{ _id: 'United States', count: 1222 }\n{ _id: 'Hong Kong', count: 600 }\n{ _id: 'Turkey', count: 661 }\n{ _id: 'Spain', count: 633 }\n{ _id: 'Brazil', count: 606 }\n{ _id: 'Portugal', count: 555 }\n{ _id: 'Canada', count: 649 }\n{ _id: 'China', count: 19 }\n{ _id: 'Australia', count: 610 }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"lab-aggregation-framework",children:"Lab: Aggregation Framework"}),"\n",(0,s.jsx)(n.p,{children:"What room types are present in the sample_airbnb.listingsAndReviews collection?"}),"\n",(0,s.jsx)(n.p,{children:"Query:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'db.listingsAndReviews.aggregate([ { "$group": { "_id": "$room_type" } }])\n'})}),"\n",(0,s.jsx)(n.p,{children:"Result:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"{ _id: 'Entire home/apt' }\n{ _id: 'Private room' }\n{ _id: 'Shared room' }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sort-and-limit-operator",children:"$sort and $limit operator"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"$sort"})," Syntax:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// 1: increasing sort, -1: decreasing sort\ndb.zips.find().sort({ "pop": 1 })\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"$limit"})," Syntax:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// only return 10 results of the resulting sort cursor\ndb.zips.find().sort({ "pop": -1 }).limit(10)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"indexes",children:"Indexes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Indexes are special data structures that store a small portion of the collection's data set in an easy to traverse form"}),"\n",(0,s.jsx)(n.li,{children:"Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query statement"}),"\n",(0,s.jsx)(n.li,{children:"Indexes therefore make queries more efficient"}),"\n",(0,s.jsx)(n.li,{children:"They are one of the most impactful ways to improve query performance"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"when-to-index",children:"When to index"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Support often used queries"}),"\n",(0,s.jsx)(n.li,{children:"For example if you often use a specific field for filtering and aggregation it is useful to create an index for this field"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"create-an-index",children:"Create an index"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Creates an index in increasing order\n// It doesn\'t really matter whether the index was created in increasing or decreasing order when it is a simple single-field index.\ndb.trips.createIndex({ "birth year": 1 })\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Queries",src:i(57349).A+"",width:"1170",height:"261"})}),"\n",(0,s.jsx)(n.p,{children:"First query can use the index, second query needs to scan full collection for the filter but can use the index for the sort."}),"\n",(0,s.jsx)(n.h3,{id:"compound-index",children:"Compound Index"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"MongoDB also supports user-defined indexes on multiple fields, i.e. compound indexes"}),"\n",(0,s.jsxs)(n.li,{children:["The order of fields listed in a compound index has significance. For instance, if a compound index consists of ",(0,s.jsx)(n.code,{children:"{ userid: 1, score: -1 }"}),", the index sorts first by userid and then, within each userid value, sorts by score"]}),"\n",(0,s.jsx)(n.li,{children:"For compound indexes and sort operations, the sort order (i.e. ascending or descending) of the index keys can determine whether the index can support a sort operation"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"compund index",src:i(17616).A+"",width:"1152",height:"629"})}),"\n",(0,s.jsx)(n.p,{children:"Helps with the query at the bottom since the documents are indexed by the station id and already sorted (indexed) by the birth year."}),"\n",(0,s.jsx)(n.h2,{id:"upsert---update-or-insert",children:"Upsert - Update or Insert"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition:"})," Upsert will update if a matching document exists otherwise it will insert a new document"]}),"\n",(0,s.jsx)(n.p,{children:"Everything in MQL that is used to locate a document in a collection can also be used to modify this document:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"db.collection.updateOne({<query to locate>}, {<update>})\n"})}),"\n",(0,s.jsx)(n.p,{children:"Upsert is a hybrid of update and insert, it should only be used when it is needed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// upsert is by default false\ndb.collection.updateOne({<query>},{<update>},{"upsert": true})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"quiz",children:"Quiz"}),"\n",(0,s.jsx)(n.p,{children:"How does the upsert option work?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Claim:"})," It is used with the update operator, and needs to have its value specified every time that the update operator is called.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Answer:"})," This is incorrect. The upsert option only needs its value specified if you want to change the default false setting to true."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Claim:"})," By default upsert is set to false.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Answer:"})," This is correct. If the upsert option is not specified, then it will have the value of false by default."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Claim:"})," When upsert is set to true and the query predicate returns an empty cursor, the update operation creates a new document using the directive from the query predicate and the update predicate.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Answer:"})," This is correct. When upsert is set to true it can perform an insert if the query predicate doesn't return a matching document."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Claim:"})," When upsert is set to false and the query predicate returns an empty cursor then there will be no updated documents as a result of this operation.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Answer:"})," This is correct. When upsert is set to false an update will happen only when the query predicate is matched with a document from the collection."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},6573:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/AggregationPipeline-d390c3bf1e78d0964af09f51bdec4bb9.png"},17616:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/CompoundIndex-6d318dda7b3275a05d3061e6559e016a.png"},30712:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Group-9e60df73a5e003fd0dbfd57ac3765db4.png"},99275:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Group2-386e9168c7bfebd9f21781b165e9c402.png"},57349:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Queries-17fd69e458f022e9cc1de9dce07b97a0.png"},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>a});var t=i(96540);const s={},r=t.createContext(s);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);