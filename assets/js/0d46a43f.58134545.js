"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[3833],{21991:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"kubernetes/cka-exam/questions","title":"CKA Exam Questions","description":"Scale a deployment","source":"@site/docs/kubernetes/cka-exam/questions.md","sourceDirName":"kubernetes/cka-exam","slug":"/kubernetes/cka-exam/questions","permalink":"/LearningCollection/kubernetes/cka-exam/questions","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/kubernetes/cka-exam/questions.md","tags":[],"version":"current","frontMatter":{"id":"questions","title":"CKA Exam Questions"},"sidebar":"docs","previous":{"title":"CKA Exam notes","permalink":"/LearningCollection/kubernetes/cka-exam/"},"next":{"title":"Core Components","permalink":"/LearningCollection/kubernetes/core-components"}}');var i=a(74848),t=a(28453);const o={id:"questions",title:"CKA Exam Questions"},r=void 0,l={},c=[{value:"Scale a deployment",id:"scale-a-deployment",level:2},{value:"Create a NodePort service for a deployment",id:"create-a-nodeport-service-for-a-deployment",level:2},{value:"Create a PersistentVolume",id:"create-a-persistentvolume",level:2},{value:"Creating an Ingress resource",id:"creating-an-ingress-resource",level:2},{value:"Monitor cluster and application resources",id:"monitor-cluster-and-application-resources",level:2},{value:"Configure Pod admission and scheduling",id:"configure-pod-admission-and-scheduling",level:2},{value:"Multicontainer Pod",id:"multicontainer-pod",level:2},{value:"Monitor logs of a container",id:"monitor-logs-of-a-container",level:2},{value:"Add a sidecar container which runs a specific bash command",id:"add-a-sidecar-container-which-runs-a-specific-bash-command",level:2},{value:"Manage role based access control",id:"manage-role-based-access-control",level:2},{value:"Troubleshoot cluster with taints",id:"troubleshoot-cluster-with-taints",level:2},{value:"Use ConfigMaps and Secrets to configure applications",id:"use-configmaps-and-secrets-to-configure-applications",level:2},{value:"Use ConfigMaps and Secrets to configure applications",id:"use-configmaps-and-secrets-to-configure-applications-1",level:2},{value:"Define and enforce Network Policies",id:"define-and-enforce-network-policies",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"scale-a-deployment",children:"Scale a deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl scale deployment <deployment-name> --replicas=<number>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-a-nodeport-service-for-a-deployment",children:"Create a NodePort service for a deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl expose deployment <deployment-name> --type=NodePort <service-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-a-persistentvolume",children:"Create a PersistentVolume"}),"\n",(0,i.jsxs)(n.p,{children:["Create a PersistentVolume named ",(0,i.jsx)(n.code,{children:"my-pv"})," with access mode ",(0,i.jsx)(n.code,{children:"ReadWriteOnce"})," and size ",(0,i.jsx)(n.code,{children:"10Gi"})," using hostPath"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: my-pv\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n   path: /data/my-pv\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-an-ingress-resource",children:"Creating an Ingress resource"}),"\n",(0,i.jsx)(n.p,{children:"Create an Ingress resource named luau that routes traffic on the path /aloha to the aloha service on port 54321"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: luau\nspec:\n  rules:\n    - http:\n        paths:\n          - path: /aloha\n            pathType: Prefix\n            backend:\n              service:\n                name: aloha\n                port:\n                  number: 54321    \n"})}),"\n",(0,i.jsx)(n.h2,{id:"monitor-cluster-and-application-resources",children:"Monitor cluster and application resources"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Identify all Pods in the integration namespace with the label ",(0,i.jsx)(n.code,{children:"app=intensive"})]}),"\n",(0,i.jsx)(n.li,{children:"Determine which of these Pods is using the most CPU resources"}),"\n",(0,i.jsx)(n.li,{children:"Write the name of the Pod consuming the most CPU resources to /opt/cka/answers/cpu_pod_01.txt"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl top pods -n integration # List all pods in the integration namespace and their CPU usage\nkubectl get pods -n integration -L app=intensive # List pods with label app=intensive\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configure-pod-admission-and-scheduling",children:"Configure Pod admission and scheduling"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create a Pod named noded that uses the nginx image"}),"\n",(0,i.jsx)(n.li,{children:"Ensure the Pod is scheduled to a node labeled disk=nvme"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: noded\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n  nodeSelector:\n    disk: nvme\n"})}),"\n",(0,i.jsx)(n.h2,{id:"multicontainer-pod",children:"Multicontainer Pod"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create a pod named multicontainer that has two containers:"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A container running the redis:6.2.6 image"}),"\n",(0,i.jsx)(n.li,{children:"A container running the nginx:1.21.6 image"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: multicontainer\nspec:\n  containers:\n    - name: redis\n      image: redis:6.2.6\n    - name: nginx\n      image: nginx:1.21.6\n"})}),"\n",(0,i.jsx)(n.h2,{id:"monitor-logs-of-a-container",children:"Monitor logs of a container"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl logs <pod-name> -c <container-name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"add-a-sidecar-container-which-runs-a-specific-bash-command",children:"Add a sidecar container which runs a specific bash command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: logger\nspec:\n  containers:\n    - name: loggingpod\n      image: busybox\n      args: [/bin/sh, -c, "i=0; while true; do echo \'$i: $(date)\' >> /var/log/log01.log; i=$((i+1)); sleep 10; done"]\n      volumeMounts:\n        - name: logz\n          mountPath: /var/log\n    - name: sidecar\n      image: busybox\n      command: ["/bin/sh", "-c", "tail -f /var/log/log01.log"]\n      volumeMounts:\n        - name: logz\n          mountPath: /var/log\n  volumes:\n    - name: logz\n      emptyDir: {}\n  nodeName: node-1\n'})}),"\n",(0,i.jsx)(n.h2,{id:"manage-role-based-access-control",children:"Manage role based access control"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create a ClusterRole named app-creator that allows create permissions for Deployments, StatefulSets, and DaemonSets"}),"\n",(0,i.jsx)(n.li,{children:"Create a ServiceAccount named app-dev"}),"\n",(0,i.jsx)(n.li,{children:"Bind the ServiceAccount app-dev to the ClusterRole app-creator using a ClusterRoleBinding"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: app-creator\nrules:\n  - apiGroups: ["apps"]\n    resources: ["deployments", "statefulsets", "daemonsets"]\n    verbs: ["create"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"To find out which apiGroups are available, you can use the command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl api-resources | grep Stateful # Will show that StatefulSets belong to apps/v1\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: app-dev\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: app-dev-binding\nsubjects:\n  - kind: ServiceAccount\n    name: app-dev\n    namespace: default\nroleRef:\n  kind: ClusterRole\n  name: app-creator\n  apiGroup: rbac.authorization.k8s.io\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshoot-cluster-with-taints",children:"Troubleshoot cluster with taints"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Inspect the nodes controller and node-1 for any taints they have. Write the results to heir respective files"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl describe node controller | grep -i Taints\nkubectl describe node node-1 | grep -i Taints\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The flag ",(0,i.jsx)(n.code,{children:"-i"}),' is used to perform a case-insensitive search for the term "Taints". Just in case you don\'t know how it is capitalized.']}),"\n",(0,i.jsx)(n.h2,{id:"use-configmaps-and-secrets-to-configure-applications",children:"Use ConfigMaps and Secrets to configure applications"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a ConfigMap called metal-cm containing the file ",(0,i.jsx)(n.code,{children:"~/mycode/yaml/metal.html"})]}),"\n",(0,i.jsxs)(n.li,{children:['To the deployment "enter-sandman" add the metal-cm ConfigMap mounted to the path ',(0,i.jsx)(n.code,{children:"var/www/index.html"})]}),"\n",(0,i.jsx)(n.li,{children:"Create the deployment in the metallica namespace"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl create configmap metal-cm --from-file=~/mycode/yaml/metal.html -n metallica\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: enter-sandman\n  namespace: metallica\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: enter-sandman\n  template:\n    metadata:\n      labels:\n        app: enter-sandman\n    spec:\n      containers:\n        - name: web\n          image: nginx\n          volumeMounts:\n            - name: metal-volume\n              mountPath: /var/www/index.html\n      volumes:\n        - name: metal-volume\n          configMap:\n            name: metal-cm\n"})}),"\n",(0,i.jsx)(n.h2,{id:"use-configmaps-and-secrets-to-configure-applications-1",children:"Use ConfigMaps and Secrets to configure applications"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"You will adjust an existing pod named kiwi-secret-pod in namespace kiwi"}),"\n",(0,i.jsxs)(n.li,{children:["Make a new secret named juicysecret. It must contain the following key/value pairs:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"username=kiwis"}),"\n",(0,i.jsx)(n.li,{children:"password=aredelicious"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Make this content available in the pod kiwi-secret-pod as environment variables USERKIWI and PASSKIWI"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Secret\nmetadata:\n  name: juicysecret\n  namespace: kiwi\ntype: Opaque\ndata:\n  username: kiwis\n  password: aredelicious\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kiwi-secret-pod\n  namespace: kiwi\nspec:\n  containers:\n    - name: kiwi-container\n      image: kiwi-image\n      env:\n        - name: USERKIWI\n          valueFrom:\n            secretKeyRef:\n              name: juicysecret\n              key: username\n        - name: PASSKIWI\n          valueFrom:\n            secretKeyRef:\n              name: juicysecret\n              key: password\n"})}),"\n",(0,i.jsx)(n.h2,{id:"define-and-enforce-network-policies",children:"Define and enforce Network Policies"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"In namespace cherry you'll find two deployments named pit and stem. Both deployments are exposed via a service."}),"\n",(0,i.jsxs)(n.li,{children:["Make a NetworkPolicy named cherry-control that:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"prevents outgoing traffic from the pit deployment"}),"\n",(0,i.jsx)(n.li,{children:"Except to that of the stem deployment"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: cherry-control\n  namespace: cherry\nspec:\n  podSelector:\n    matchLabels:\n      app: pit\n  policyTypes:\n  - Ingress\n  - Egress\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          app: stem\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var s=a(96540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);