"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[2098],{95148:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"cloud/aws/certified-developer-associate/elastic-beanstalk","title":"Elastic Beanstalk","description":"- Uses all the component\u2019s we\u2019ve seen before: EC2, ASG, ELB, RDS","source":"@site/docs/cloud/aws/certified-developer-associate/elastic-beanstalk.md","sourceDirName":"cloud/aws/certified-developer-associate","slug":"/cloud/aws/certified-developer-associate/elastic-beanstalk","permalink":"/LearningCollection/cloud/aws/certified-developer-associate/elastic-beanstalk","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/cloud/aws/certified-developer-associate/elastic-beanstalk.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"title":"Elastic Beanstalk","sidebar_position":13},"sidebar":"docs","previous":{"title":"ECS, ECR, Fargate","permalink":"/LearningCollection/cloud/aws/certified-developer-associate/ecs-ecr-fargate"},"next":{"title":"CloudFormation","permalink":"/LearningCollection/cloud/aws/certified-developer-associate/cloudformation"}}');var s=i(74848),t=i(28453);const o={title:"Elastic Beanstalk",sidebar_position:13},a=void 0,r={},c=[{value:"Components",id:"components",level:2},{value:"Web Server Tier vs. Worker Tier",id:"web-server-tier-vs-worker-tier",level:3},{value:"Deployment Modes",id:"deployment-modes",level:2},{value:"Deployment Options for Updates",id:"deployment-options-for-updates",level:3},{value:"Deployment Modes - Summary",id:"deployment-modes---summary",level:3},{value:"Deployment Process",id:"deployment-process",level:3},{value:"Lifecycle Policy",id:"lifecycle-policy",level:2},{value:"Elastic Beanstalk CLI",id:"elastic-beanstalk-cli",level:2},{value:"Elastic Beanstalk Extensions",id:"elastic-beanstalk-extensions",level:2},{value:"Under the Hood",id:"under-the-hood",level:2},{value:"Cloning",id:"cloning",level:3},{value:"Migration: Load Balancer",id:"migration-load-balancer",level:3},{value:"RDS with Elastic Beanstalk",id:"rds-with-elastic-beanstalk",level:3},{value:"Migration",id:"migration",level:4}];function d(e){const n={h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses all the component\u2019s we\u2019ve seen before: EC2, ASG, ELB, RDS"}),"\n",(0,s.jsxs)(n.li,{children:["Managed service","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Automatically handles capacity provisioning, load balancing, scaling, application health monitoring, instance configuration, \u2026"}),"\n",(0,s.jsx)(n.li,{children:"Just the application code is the responsibility of the developer"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"We still have full control over the configuration"}),"\n",(0,s.jsx)(n.li,{children:"Beanstalk is free but you pay for the underlying instances"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Application:"})," collection of Elastic Beanstalk components (environments, versions, configurations, \u2026)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Application Version:"})," an iteration of your application code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Environment"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Collection of AWS resources running an application version (only one application version at a time)"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tiers:"})," Web Server Environment Tier & Worker Environment Tier"]}),"\n",(0,s.jsx)(n.li,{children:"You can create multiple environments (dev, test, prod, \u2026)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"bean-lifecycle",src:i(45108).A+"",width:"1336",height:"340"})}),"\n",(0,s.jsx)(n.h3,{id:"web-server-tier-vs-worker-tier",children:"Web Server Tier vs. Worker Tier"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"web-server-vs-worker",src:i(24620).A+"",width:"1725",height:"778"})}),"\n",(0,s.jsx)(n.h2,{id:"deployment-modes",children:"Deployment Modes"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"bean-deployment-modes",src:i(97764).A+"",width:"1432",height:"691"})}),"\n",(0,s.jsx)(n.h3,{id:"deployment-options-for-updates",children:"Deployment Options for Updates"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"All at once (deploy all in one go)"})," \u2013 fastest, but instances aren\u2019t available to serve traffic for a bit (downtime)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"fastest"}),"\n",(0,s.jsx)(n.li,{children:"Application has downtime"}),"\n",(0,s.jsx)(n.li,{children:"No additional cost"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rolling:"})," update a few instances at a time (bucket), and then move onto the next bucket once the first bucket is healthy","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Application is running below capacity"}),"\n",(0,s.jsx)(n.li,{children:"Can set the bucket size"}),"\n",(0,s.jsx)(n.li,{children:"Application is running both versions simultaneously"}),"\n",(0,s.jsx)(n.li,{children:"No additional cost"}),"\n",(0,s.jsx)(n.li,{children:"Long deployment"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rolling with additional batches:"})," like rolling, but spins up new instances to move the batch (so that the old application is still available)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Application is running at capacity"}),"\n",(0,s.jsx)(n.li,{children:"Can set the bucket size"}),"\n",(0,s.jsx)(n.li,{children:"Application is running both versions simultaneously"}),"\n",(0,s.jsx)(n.li,{children:"Small additional cost"}),"\n",(0,s.jsx)(n.li,{children:"Additional batch is removed at the end of the deployment"}),"\n",(0,s.jsx)(n.li,{children:"Good for prod"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Immutable:"})," spins up new instances in a new ASG, deploys version to these instances, and then swaps all the instances when everything is healthy","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Zero downtime"}),"\n",(0,s.jsx)(n.li,{children:"New Code is deployed to new instances on a temporary ASG"}),"\n",(0,s.jsx)(n.li,{children:"High cost, double capacity"}),"\n",(0,s.jsx)(n.li,{children:"Longest deployment"}),"\n",(0,s.jsx)(n.li,{children:"Quick rollback in case of failures (just terminate new ASG)"}),"\n",(0,s.jsx)(n.li,{children:"Great for prod"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Blue Green:"})," create a new environment and switch over when ready","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Not a \u201cdirect feature\u201d of Elastic Beanstalk"}),"\n",(0,s.jsx)(n.li,{children:"Zero downtime and release facility"}),"\n",(0,s.jsx)(n.li,{children:"Create a new \u201cstage\u201d environment and deploy v2 there"}),"\n",(0,s.jsx)(n.li,{children:"The new environment (green) can be validated independently and roll back if issues"}),"\n",(0,s.jsx)(n.li,{children:"Route 53 can be setup using weighted policies to redirect a little bit of traffic to the stage environment"}),"\n",(0,s.jsx)(n.li,{children:"Using Beanstalk, \u201cswap URLs\u201d when done with the environment test"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Traffic Splitting:"})," canary testing \u2013 send a small % of traffic to new deployment","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Canary Testing"}),"\n",(0,s.jsx)(n.li,{children:"New application version is deployed to a temporary ASG with the same capacity"}),"\n",(0,s.jsx)(n.li,{children:"A small % of traffic is sent to the temporary ASG for a configurable amount of time"}),"\n",(0,s.jsx)(n.li,{children:"Deployment health is monitored"}),"\n",(0,s.jsx)(n.li,{children:"If there\u2019s a deployment failure, this triggers an automated rollback (very quick)"}),"\n",(0,s.jsx)(n.li,{children:"No application downtime"}),"\n",(0,s.jsx)(n.li,{children:"New instances are migrated from the temporary to the original ASG"}),"\n",(0,s.jsx)(n.li,{children:"Old application version is then terminated"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"deployment-modes---summary",children:"Deployment Modes - Summary"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"bean-deployment-summary",src:i(80044).A+"",width:"1260",height:"565"})}),"\n",(0,s.jsx)(n.h3,{id:"deployment-process",children:"Deployment Process"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Describe dependencies (requirements.txt for Python, package.json for Node.js)"}),"\n",(0,s.jsxs)(n.li,{children:["Package code as zip, and describe dependencies","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Python: requirements.txt"}),"\n",(0,s.jsx)(n.li,{children:"Node.js: package.json"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Console: upload zip file (creates new app version), and then deploy"}),"\n",(0,s.jsx)(n.li,{children:"CLI: create new app version using CLI (uploads zip), and then deploy"}),"\n",(0,s.jsx)(n.li,{children:"Elastic Beanstalk will deploy the zip on each EC2 instance, resolve dependencies and start the application"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"lifecycle-policy",children:"Lifecycle Policy"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Elastic Beanstalk can store at most 1000 application versions"}),"\n",(0,s.jsx)(n.li,{children:"If you don\u2019t remove old versions, you won\u2019t be able to deploy anymore"}),"\n",(0,s.jsxs)(n.li,{children:["To phase out old application versions, use a lifecycle policy","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Based on time (old versions are removed)"}),"\n",(0,s.jsx)(n.li,{children:"Based on space (when you have too many versions)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Versions that are currently used won\u2019t be deleted"}),"\n",(0,s.jsx)(n.li,{children:"Option not to delete the source bundle in S3 to prevent data loss"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"elastic-beanstalk-cli",children:"Elastic Beanstalk CLI"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We can install an additional CLI called the \u201cEB cli\u201d which makes working with Beanstalk from the CLI easier"}),"\n",(0,s.jsxs)(n.li,{children:["Basic commands are:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"eb create"}),"\n",(0,s.jsx)(n.li,{children:"eb status"}),"\n",(0,s.jsx)(n.li,{children:"eb health"}),"\n",(0,s.jsx)(n.li,{children:"eb events"}),"\n",(0,s.jsx)(n.li,{children:"eb logs"}),"\n",(0,s.jsx)(n.li,{children:"eb open"}),"\n",(0,s.jsx)(n.li,{children:"eb deploy"}),"\n",(0,s.jsx)(n.li,{children:"eb config"}),"\n",(0,s.jsx)(n.li,{children:"eb terminate"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"It\u2019s helpful for your automated deployment pipelines!"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"elastic-beanstalk-extensions",children:"Elastic Beanstalk Extensions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A zip file containing our code must be deployed to Elastic Beanstalk"}),"\n",(0,s.jsx)(n.li,{children:"All the parameters set in the UI can be configured with code using files"}),"\n",(0,s.jsxs)(n.li,{children:["Requirements:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"in the .ebextensions/ directory in the root of source code"}),"\n",(0,s.jsx)(n.li,{children:"YAML / JSON format"}),"\n",(0,s.jsx)(n.li,{children:".config extensions (example: logging.config)"}),"\n",(0,s.jsx)(n.li,{children:"Able to modify some default settings using: option_settings"}),"\n",(0,s.jsx)(n.li,{children:"Ability to add resources such as RDS, ElastiCache, DynamoDB, etc\u2026"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Resources managed by .ebextensions get deleted if the environment goes away"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"under-the-hood",children:"Under the Hood"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Under the hood, Elastic Beanstalk relies on CloudFormation"}),"\n",(0,s.jsx)(n.li,{children:"CloudFormation is used to provision other AWS services (we\u2019ll see later)"}),"\n",(0,s.jsx)(n.li,{children:"Use case: you can define CloudFormation resources in your .ebextensions to provision ElastiCache, an S3 bucket, anything you want!"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cloning",children:"Cloning"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Clone an environment with the exact same configuration"}),"\n",(0,s.jsx)(n.li,{children:"Useful for deploying a \u201ctest\u201d version of your application"}),"\n",(0,s.jsxs)(n.li,{children:["All resources and configuration are preserved:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load Balancer type and configuration"}),"\n",(0,s.jsx)(n.li,{children:"RDS database type (but the data is not preserved)"}),"\n",(0,s.jsx)(n.li,{children:"Environment variables"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"After cloning an environment, you can change settings"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"migration-load-balancer",children:"Migration: Load Balancer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"After creating an Elastic Beanstalk environment, you cannot change the Elastic Load Balancer type (only the configuration)"}),"\n",(0,s.jsxs)(n.li,{children:["To migrate:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"create a new environment with the same configuration except LB (can\u2019t clone)"}),"\n",(0,s.jsx)(n.li,{children:"deploy your application onto the new environment"}),"\n",(0,s.jsx)(n.li,{children:"perform a CNAME swap or Route 53 update"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rds-with-elastic-beanstalk",children:"RDS with Elastic Beanstalk"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"RDS can be provisioned with Beanstalk, which is great for dev / test"}),"\n",(0,s.jsx)(n.li,{children:"This is not great for prod as the database lifecycle is tied to the Beanstalk environment lifecycle"}),"\n",(0,s.jsx)(n.li,{children:"The best for prod is to separately create an RDS database and provide our EB application with the connection string"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"migration",children:"Migration"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a snapshot of RDS DB (as a safeguard)"}),"\n",(0,s.jsx)(n.li,{children:"Go to the RDS console and protect the RDS database from deletion"}),"\n",(0,s.jsx)(n.li,{children:"Create a new Elastic Beanstalk environment, without RDS, point your application to existing RDS"}),"\n",(0,s.jsx)(n.li,{children:"perform a CNAME swap (blue/green) or Route 53 update, confirm working"}),"\n",(0,s.jsx)(n.li,{children:"Terminate the old environment (RDS won\u2019t be deleted)"}),"\n",(0,s.jsx)(n.li,{children:"Delete CloudFormation stack (in DELETE_FAILED state)"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},97764:(e,n,i)=>{i.d(n,{A:()=>l});const l=i.p+"assets/images/bean-deployment-modes-e69cd61a2a9cb03cb89f63d4a489a8b0.png"},80044:(e,n,i)=>{i.d(n,{A:()=>l});const l=i.p+"assets/images/bean-deployment-summary-1ea6a4fb8e312f4baee37bc41b700303.png"},45108:(e,n,i)=>{i.d(n,{A:()=>l});const l=i.p+"assets/images/bean-lifecycle-f73c4e86d9f738a66d4443b24f285b2a.png"},24620:(e,n,i)=>{i.d(n,{A:()=>l});const l=i.p+"assets/images/web-server-vs-worker-4b05dc906e63761b36778106071a02d3.png"},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var l=i(96540);const s={},t=l.createContext(s);function o(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);