"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4013],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,h=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3252:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={id:"miscellaneous-concepts",title:"Miscellaneous Concepts",sidebar_position:1},l=void 0,s={unversionedId:"apis/graphql/advanced-concepts/miscellaneous-concepts",id:"apis/graphql/advanced-concepts/miscellaneous-concepts",title:"Miscellaneous Concepts",description:"There are many more concepts in GraphQL, this page introduces some of them.",source:"@site/docs/apis/graphql/advanced-concepts/miscellaneous-concepts.md",sourceDirName:"apis/graphql/advanced-concepts",slug:"/apis/graphql/advanced-concepts/miscellaneous-concepts",permalink:"/LearningCollection/apis/graphql/advanced-concepts/miscellaneous-concepts",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/apis/graphql/advanced-concepts/miscellaneous-concepts.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"miscellaneous-concepts",title:"Miscellaneous Concepts",sidebar_position:1},sidebar:"docs",previous:{title:"Pagination",permalink:"/LearningCollection/apis/graphql/pagination"},next:{title:"Introspection",permalink:"/LearningCollection/apis/graphql/advanced-concepts/introspection"}},o={},p=[{value:"Enhancing Reusability with Fragments",id:"enhancing-reusability-with-fragments",level:2},{value:"Parameterizing Fields with Arguments",id:"parameterizing-fields-with-arguments",level:2},{value:"Named Query Results with Aliases",id:"named-query-results-with-aliases",level:2},{value:"Advanced SDL",id:"advanced-sdl",level:2},{value:"Object &amp; Scalar Types",id:"object--scalar-types",level:3},{value:"Enums",id:"enums",level:3},{value:"Interfaces",id:"interfaces",level:3},{value:"Union types",id:"union-types",level:3}],c={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There are many more concepts in GraphQL, this page introduces some of them."),(0,r.kt)("h2",{id:"enhancing-reusability-with-fragments"},"Enhancing Reusability with Fragments"),(0,r.kt)("p",null,"Fragments are a handy feature to help to improve the structure and reusability of your GraphQL code. A fragment is a collection of fields on a specific type."),(0,r.kt)("p",null,"Let\u2019s assume we have the following type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type User {\n  name: String!\n  age: Int!\n  email: String!\n  street: String!\n  zipcode: String!\n  city: String!\n}\n")),(0,r.kt)("p",null,"Here, we could represent all the information that relates to the user\u2019s physical address into a fragment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"fragment addressDetails on User {\n  name\n  street\n  zipcode\n  city\n}\n")),(0,r.kt)("p",null,"Now, when writing a query to access the address information of a user, we can use the following syntax to refer to the fragment and save the work to actually spell out the four fields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allUsers {\n    ...addressDetails\n  }\n}\n")),(0,r.kt)("p",null,"This query is equivalent to writing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allUsers {\n    name\n    street\n    zipcode\n    city\n  }\n}\n")),(0,r.kt)("h2",{id:"parameterizing-fields-with-arguments"},"Parameterizing Fields with Arguments"),(0,r.kt)("p",null,"In GraphQL type definitions, each field can take zero or more arguments. Similar to arguments that are passed into functions in typed programming languages, each argument needs to have a name and a type. In GraphQL, it\u2019s also possible to specify default values for arguments."),(0,r.kt)("p",null,"As an example, let\u2019s consider a part of the schema that we saw in the beginning:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  allUsers: [User!]!\n}\n\ntype User {\n  name: String!\n  age: Int!\n}\n")),(0,r.kt)("p",null,"We could now add an argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"allUsers")," field that allows us to pass an argument to filter users and include only those above a certain age. We also specify a default value so that by default all users will be returned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  allUsers(olderThan: Int = -1): [User!]!\n}\n")),(0,r.kt)("p",null,"This ",(0,r.kt)("inlineCode",{parentName:"p"},"olderThan")," argument can now be passed into the query using the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allUsers(olderThan: 30) {\n    name\n    age\n  }\n}\n")),(0,r.kt)("h2",{id:"named-query-results-with-aliases"},"Named Query Results with Aliases"),(0,r.kt)("p",null,"One of GraphQL\u2019s major strengths is that it lets you send multiple queries in a single request. However, since the response data is shaped after the structure of the fields being requested, you might run into naming issues when you\u2019re sending multiple queries asking for the same fields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  User(id: "1") {\n    name\n  }\n  User(id: "2") {\n    name\n  }\n}\n')),(0,r.kt)("p",null,"In fact, this will produce an error with a GraphQL server, since it\u2019s the same field but different arguments. The only way to send a query like that would be to use aliases, i.e. specifying names for the query results:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  first: User(id: "1") {\n    name\n  }\n  second: User(id: "2") {\n    name\n  }\n}\n')),(0,r.kt)("p",null,"In the result, the server would now name each ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," object according to the specified alias:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "first": {\n    "name": "Alice"\n  },\n  "second": {\n    "name": "Sarah"\n  }\n}\n')),(0,r.kt)("h2",{id:"advanced-sdl"},"Advanced SDL"),(0,r.kt)("p",null,"The SDL offers a couple of language features that weren\u2019t discussed in the previous chapter. In the following, we\u2019ll discuss those by practical examples."),(0,r.kt)("h3",{id:"object--scalar-types"},"Object & Scalar Types"),(0,r.kt)("p",null,"In GraphQL, there are two different kinds of types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scalar types")," represent concrete units of data. The GraphQL spec has five predefined scalars: as ",(0,r.kt)("inlineCode",{parentName:"li"},"String"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Int"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Float"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Boolean"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"ID"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object types")," have fields that express the properties of that type and are composable. Examples of object types are the ",(0,r.kt)("inlineCode",{parentName:"li"},"User")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"Post")," types we saw in the previous section.")),(0,r.kt)("p",null,"In every GraphQL schema, you can define your own scalar and object types. An often cited example for a custom scalar would be a ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," type where the implementation needs to define how that type is validated, serialized, and deserialized."),(0,r.kt)("h3",{id:"enums"},"Enums"),(0,r.kt)("p",null,"GraphQL allows you to define enumerations types (short enums), a language feature to express the semantics of a type that has a fixed set of values. We could thus define a type called ",(0,r.kt)("inlineCode",{parentName:"p"},"Weekday")," to represent all the days of a week:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"enum Weekday {\n  MONDAY\n  TUESDAY\n  WEDNESDAY\n  THURSDAY\n  FRIDAY\n  SATURDAY\n  SUNDAY\n}\n")),(0,r.kt)("p",null,"Note that technically enums are special kinds of scalar types."),(0,r.kt)("h3",{id:"interfaces"},"Interfaces"),(0,r.kt)("p",null,"An interface can be used to describe a type in an abstract way. It allows you to specify a set of fields that any concrete type, which implements this interface, needs to have. In many GraphQL schemas, every type is required to have an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," field. Using interfaces, this requirement can be expressed by defining an interface with this field and then making sure that all custom types implement it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"interface Node {\n  id: ID!\n}\n\ntype User implements Node {\n  id: ID!\n  name: String!\n  age: Int!\n}\n")),(0,r.kt)("h3",{id:"union-types"},"Union types"),(0,r.kt)("p",null,"Union types can be used to express that a type should be either of a collection of other types. They are best understood by means of an example. Let\u2019s consider the following types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type Adult {\n  name: String!\n  work: String!\n}\n\ntype Child {\n  name: String!\n  school: String!\n}\n")),(0,r.kt)("p",null,"Now, we could define a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," type to be the union of ",(0,r.kt)("inlineCode",{parentName:"p"},"Adult")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Child"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"union Person = Adult | Child\n")),(0,r.kt)("p",null,"This brings up a different problem: In a GraphQL query where we ask to retrieve information about a ",(0,r.kt)("inlineCode",{parentName:"p"},"Child")," but only have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," type to work with, how do we know whether we can actually access this field?"),(0,r.kt)("p",null,"If you are querying a field that returns an interface or a union type, you will need to use inline fragments to access data on the underlying concrete type. It's easiest to see with an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"title=Query",title:"Query"},"query HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n    ... on Human {\n      height\n    }\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Variables",title:"Variables"},'{\n  "ep": "JEDI"\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Response",title:"Response"},'{\n  "data": {\n    "hero": {\n      "name": "R2-D2",\n      "primaryFunction": "Astromech"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"In this query, the ",(0,r.kt)("inlineCode",{parentName:"p"},"hero")," field returns the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Character"),", which might be either a ",(0,r.kt)("inlineCode",{parentName:"p"},"Human")," or a ",(0,r.kt)("inlineCode",{parentName:"p"},"Droid")," depending on the ",(0,r.kt)("inlineCode",{parentName:"p"},"episode")," argument. In the direct selection, you can only ask for fields that exist on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Character")," interface, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,r.kt)("p",null,"To ask for a field on the concrete type, you need to use an inline fragment with a type condition. Because the first fragment is labeled as ",(0,r.kt)("inlineCode",{parentName:"p"},"... on Droid"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryFunction")," field will only be executed if the ",(0,r.kt)("inlineCode",{parentName:"p"},"Character")," returned from ",(0,r.kt)("inlineCode",{parentName:"p"},"hero")," is of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Droid")," type. Similarly for the ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," field for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Human")," type."))}u.isMDXComponent=!0}}]);