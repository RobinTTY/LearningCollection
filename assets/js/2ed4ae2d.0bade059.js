"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[9029],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return d}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return r?t.createElement(h,s(s({ref:n},p),{},{components:r})):t.createElement(h,s({ref:n},p))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1961:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var t=r(7462),a=r(3366),o=(r(7294),r(3905)),s=["components"],i={id:"javascriptRefresher",title:"Javascript Refresher"},l=void 0,c={unversionedId:"Web/JavaScript/Courses/Packt Course/javascriptRefresher",id:"Web/JavaScript/Courses/Packt Course/javascriptRefresher",isDocsHomePage:!1,title:"Javascript Refresher",description:"let & const",source:"@site/docs/Web/JavaScript/Courses/Packt Course/README.md",sourceDirName:"Web/JavaScript/Courses/Packt Course",slug:"/Web/JavaScript/Courses/Packt Course/javascriptRefresher",permalink:"/LearningCollection/Web/JavaScript/Courses/Packt Course/javascriptRefresher",editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Web/JavaScript/Courses/Packt Course/README.md",version:"current",frontMatter:{id:"javascriptRefresher",title:"Javascript Refresher"},sidebar:"mySidebar",previous:{title:"Introduction to Javascript",permalink:"/LearningCollection/Web/JavaScript/Courses/Codeacademy Course/introductionToJavascript"},next:{title:"PennX - SD4x",permalink:"/LearningCollection/Web/JavaScript/Courses/edX Course/pennxSd4x"}},p=[{value:"let &amp; const",id:"let--const",children:[{value:"Example let vs var",id:"example-let-vs-var",children:[]}]},{value:"Arrow functions",id:"arrow-functions",children:[{value:"Example",id:"example",children:[]}]},{value:"Exports and Imports (Modules)",id:"exports-and-imports-modules",children:[{value:"Example",id:"example-1",children:[]}]},{value:"Classes",id:"classes",children:[{value:"Example",id:"example-2",children:[]}]},{value:"Spread Operator &amp; Rest Parameters",id:"spread-operator--rest-parameters",children:[{value:"The Spread Operator",id:"the-spread-operator",children:[]},{value:"Rest Parameters",id:"rest-parameters",children:[]}]},{value:"Destructuring",id:"destructuring",children:[{value:"Example",id:"example-5",children:[]}]}],u={toc:p};function m(e){var n=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"let--const"},"let & const"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// use let for values that are variable\nlet a = 1;\n// use const for values that are constant\nconst b = 1;\n")),(0,o.kt)("p",null,"Note: Variables declared with the ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," keyword are scoped to the immediate function body (hence the function scope) while ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," variables are scoped to the immediate enclosing block denoted by { } (hence the block scope)."),(0,o.kt)("h3",{id:"example-let-vs-var"},"Example let vs var"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function run() {\n  var foo = "Foo";\n  let bar = "Bar";\n\n  console.log(foo, bar); // Foo Bar\n\n  {\n    var moo = "Mooo";\n    let baz = "Bazz";\n    console.log(moo, baz); // Mooo Bazz\n  }\n\n  console.log(moo); // Mooo => initialized with var\n  console.log(baz); // ReferenceError => initialized with let\n}\n\nrun();\n')),(0,o.kt)("h2",{id:"arrow-functions"},"Arrow functions"),(0,o.kt)("p",null,"Arrow functions are defined using the '=>' syntax. They are syntactic sugar for the function expression and are more concise. They do have some ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"},"limitations")," though."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// traditional function declaration\nfunction printMyName(name) {\n  console.log(name);\n}\n\nprintMyName("Robin");\n\n// arrow function\nconst printMyName = (name) => {\n  console.log(name);\n};\n\nprintMyName("Robin");\n\n// Special case of only returning (kind of like C#)\nconst multiply = (number) => number * 2;\n\nconsole.log(multiply(2));\n')),(0,o.kt)("h2",{id:"exports-and-imports-modules"},"Exports and Imports (Modules)"),(0,o.kt)("p",null,"A module is essentially a reusable piece of JavaScript which exports specific objects, making them available for other modules to require in their programs."),(0,o.kt)("h3",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// person.js\nconst person = {\n    name: 'Robin'\n}\nexport default Robin\n\n// utility.js\nexport const clean = () => { ... }\nexport const baseDate = 10;\n\n// app.js\nimport person from './person';  // don't need curly braces since it's the default export\nimport prs from './person';     // the name we import it as doesn't matter\n\nimport { baseData } from './utility.js';        // we need to explicitly target which export we want since we have no default\nimport { clean as cln } from './utility.js';    // we can also assign an alias here\nimport * as bundled from './utility.js';        // we can also use the * operator to import everything, access via bundled.clean() for instance\n")),(0,o.kt)("p",null,"If a module defines a default export then you can import that default export by omitting the curly braces."),(0,o.kt)("h2",{id:"classes"},"Classes"),(0,o.kt)("p",null,"Classes are a template for creating objects. Classes in JS are built on prototypes but also have some syntax and semantics that are not shared with ES5 class-like semantics."),(0,o.kt)("h3",{id:"example-2"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// with EcmaScript 6\nclass Human {\n  constructor() {\n    this.gender = "male";\n  }\n\n  printGender() {\n    console.log(this.gender);\n  }\n}\n\nclass Person extends Human {\n  constructor() {\n    // super must always be called if a class is being extended\n    super();\n    this.name = "Robin";\n  }\n\n  printMyName() {\n    console.log(this.name);\n  }\n}\n\nconst person = new Person();\nperson.printMyName();\nperson.printGender();\n\n// with EcmaScript 7 (proposal) - https://github.com/tc39/proposal-class-fields\nclass Human {\n  // no more \'this\' keyword here\n  gender = "male";\n\n  printGender = () => {\n    console.log(this.gender);\n  };\n}\n\nclass Person extends Human {\n  name = "Robin";\n\n  printMyName = () => {\n    console.log(this.name);\n  };\n}\n\nconst person = new Person();\nperson.printMyName();\nperson.printGender();\n')),(0,o.kt)("h2",{id:"spread-operator--rest-parameters"},"Spread Operator & Rest Parameters"),(0,o.kt)("h3",{id:"the-spread-operator"},"The Spread Operator"),(0,o.kt)("p",null,"The spread operator \u201cspreads\u201d the values in an iterable (arrays, strings) across zero or more arguments or elements."),(0,o.kt)("h4",{id:"example-3"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5, 6];\n\nconsole.log(arr2); // [1, 2, 3, 4, 5, 6]\n")),(0,o.kt)("h3",{id:"rest-parameters"},"Rest Parameters"),(0,o.kt)("p",null,"The rest parameter gives us an easier and cleaner way of working with an indefinite number of parameters."),(0,o.kt)("h4",{id:"example-4"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function sortArgs(...args) {\n  return args.sort();\n}\n")),(0,o.kt)("h2",{id:"destructuring"},"Destructuring"),(0,o.kt)("p",null,"The destructuring assignment syntax makes it possible to unpack values from arrays, or properties from objects, into distinct variables."),(0,o.kt)("h3",{id:"example-5"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Array destructuring\nlet a, b, rest;\n[a, b, ...rest] = [10, 20, 30, 40, 50];\nconsole.log(rest); // [30, 40, 50]\n\n// Object destructuring\nlet { x, y, ...z } = { x: 10, y: 20, a: 30, b: 40 };\nconsole.log(z); // { a: 30, b: 40 }\n")))}m.isMDXComponent=!0}}]);