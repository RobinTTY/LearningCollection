"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[64],{45044:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"csharp/core-concepts/operators/range-operator","title":"Range Operator (..)","description":"The .. operator specifies the start and end of a range of indices as its operands. The range operator is used to specify the start and end of a range for a sequence.","source":"@site/docs/csharp/core-concepts/operators/range-operator.md","sourceDirName":"csharp/core-concepts/operators","slug":"/csharp/core-concepts/operators/range-operator","permalink":"/LearningCollection/csharp/core-concepts/operators/range-operator","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/core-concepts/operators/range-operator.md","tags":[],"version":"current","frontMatter":{"title":"Range Operator (..)"},"sidebar":"docs","previous":{"title":"Null-coalescing operator (??)","permalink":"/LearningCollection/csharp/core-concepts/operators/null-coalescing-operator"},"next":{"title":"IEnumerable","permalink":"/LearningCollection/csharp/core-concepts/interfaces/ienumerable"}}');var s=r(74848),o=r(28453);const c={title:"Range Operator (..)"},i=void 0,a={},l=[];function d(e){const n={code:"code",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".."})," operator specifies the start and end of a range of indices as its operands. The range operator is used to specify the start and end of a range for a sequence."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var people = new string[] { "Jane", "Jean", "Grey", "Marcus", "Theophilus", "Keje" };\nvar all = people[..];           // contains all elements\nvar firstFour = people[..4];    // contains the first four elements\nvar lastTwo = people[4..];      // contains "Theophilus" and "Keje"\n'})}),"\n",(0,s.jsx)(n.p,{children:"The following table shows various ways to express collection ranges:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Range operator expression"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:".."})}),(0,s.jsx)(n.td,{children:"All values in the collection."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"..end"})}),(0,s.jsxs)(n.td,{children:["Values from the ",(0,s.jsx)(n.code,{children:"start"})," to the ",(0,s.jsx)(n.code,{children:"end"})," exclusively."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"start.."})}),(0,s.jsxs)(n.td,{children:["Values from the ",(0,s.jsx)(n.code,{children:"start"})," to the ",(0,s.jsx)(n.code,{children:"end"})," inclusively."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"start..end"})}),(0,s.jsxs)(n.td,{children:["Values from the ",(0,s.jsx)(n.code,{children:"start"})," inclusively to the ",(0,s.jsx)(n.code,{children:"end"})," exclusively."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"^start.."})}),(0,s.jsxs)(n.td,{children:["Values from the ",(0,s.jsx)(n.code,{children:"start"})," inclusively to the end counting from the ",(0,s.jsx)(n.code,{children:"end"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"..^end"})}),(0,s.jsxs)(n.td,{children:["Values from the ",(0,s.jsx)(n.code,{children:"start"})," to the end exclusively counting from the ",(0,s.jsx)(n.code,{children:"end"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"start..^end"})}),(0,s.jsxs)(n.td,{children:["Values from ",(0,s.jsx)(n.code,{children:"start"})," inclusively to ",(0,s.jsx)(n.code,{children:"end"})," exclusively counting from the end."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"^start..^end"})}),(0,s.jsxs)(n.td,{children:["Values from ",(0,s.jsx)(n.code,{children:"start"})," inclusively to ",(0,s.jsx)(n.code,{children:"end"})," exclusively both counting from the end."]})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"The following example demonstrates the effect of using all the ranges presented in the preceding table:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'int[] oneThroughTen = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\nWrite(oneThroughTen, ..);\nWrite(oneThroughTen, ..3);\nWrite(oneThroughTen, 2..);\nWrite(oneThroughTen, 3..5);\nWrite(oneThroughTen, ^2..);\nWrite(oneThroughTen, ..^3);\nWrite(oneThroughTen, 3..^4);\nWrite(oneThroughTen, ^4..^2);\n\nstatic void Write(int[] values, Range range) =>\n    Console.WriteLine($"{range}:\\t{string.Join(", ", values[range])}");\n// Sample output:\n//      0..^0:      1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n//      0..3:       1, 2, 3\n//      2..^0:      3, 4, 5, 6, 7, 8, 9, 10\n//      3..5:       4, 5\n//      ^2..^0:     9, 10\n//      0..^3:      1, 2, 3, 4, 5, 6, 7\n//      3..^4:      4, 5, 6\n//      ^4..^2:     7, 8\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var t=r(96540);const s={},o=t.createContext(s);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);