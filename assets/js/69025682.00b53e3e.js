"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[2854],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=s,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5997:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),s=(n(7294),n(3905));const a={title:"Tuples"},o=void 0,i={unversionedId:"csharp/core-concepts/types/tuples",id:"csharp/core-concepts/types/tuples",title:"Tuples",description:"In C#, a tuple is a data structure which organizes data, holding two or more fields of any type. A tuple is typically created by placing 2 or more expressions separated by commas, within a set of parentheses:",source:"@site/docs/csharp/core-concepts/types/tuples.md",sourceDirName:"csharp/core-concepts/types",slug:"/csharp/core-concepts/types/tuples",permalink:"/LearningCollection/csharp/core-concepts/types/tuples",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/core-concepts/types/tuples.md",tags:[],version:"current",frontMatter:{title:"Tuples"},sidebar:"docs",previous:{title:"Enums",permalink:"/LearningCollection/csharp/core-concepts/types/enums"},next:{title:"Null-conditional operator (?)",permalink:"/LearningCollection/csharp/core-concepts/operators/null-conditional-operator"}},l={},c=[{value:"Use cases of tuples",id:"use-cases-of-tuples",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In C#, a tuple is a data structure which organizes data, holding two or more fields of any type. A tuple is typically created by placing 2 or more expressions separated by commas, within a set of parentheses:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'string boast = "All you need to know";\nbool success = !string.IsNullOrWhiteSpace(boast);\n\n// A tuple with three fields (triple)\n(bool, int, string) triple = (success, 42, boast);\n')),(0,s.kt)("p",null,"A tuple can be used in assignment and initialization operations, as a return value or a method argument. Fields are extracted using dot syntax. By default, the first field is ",(0,s.kt)("inlineCode",{parentName:"p"},"Item1"),", the second ",(0,s.kt)("inlineCode",{parentName:"p"},"Item2"),", etc. Non-default names are discussed below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"// initialization\n(int, int, int) vertices = (90, 45, 45);\n\n// assignment\nvertices = (60, 60, 60);\n\n//  return value\n(bool, int) GetSameOrBigger(int num1, int num2)\n{\n    return (num1 == num2, num1 > num2 ? num1 : num2);\n}\n\n// method argument\nint Add((int, int) operands)\n{\n    return operands.Item1 + operands.Item2;\n}\n")),(0,s.kt)("p",null,"Field names Item1 etc. do not make for readable code. The code below shows 2 ways to name the fields of tuples:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'// name items in declaration\n(bool success, string message) results = (true, "well done!");\nbool mySuccess = results.success;\nstring myMessage = results.message;\n\n// name items in creating expression\nvar results2 = (success: true, message: "well done!");\nbool mySuccess2 = results2.success;\nstring myMessage2 = results2.message;\n')),(0,s.kt)("h2",{id:"use-cases-of-tuples"},"Use cases of tuples"),(0,s.kt)("p",null,"One of the most common use cases of tuples is as a method return type. That is, instead of defining ",(0,s.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/method-parameters#out-parameter-modifier"},"out method parameters"),", you can group method results in a tuple return type, as the following example shows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'(int min, int max) FindMinMax(int[] input)\n{\n    ...\n}\n\nvar xs = new[] { 4, 7, 9 };\nvar limits = FindMinMax(xs);\nConsole.WriteLine($"Limits of [{string.Join(" ", xs)}] are {limits.min} and {limits.max}");\n\nvar ys = new[] { -9, 0, 67, 100 };\nvar (minimum, maximum) = FindMinMax(ys);\nConsole.WriteLine($"Limits of [{string.Join(" ", ys)}] are {minimum} and {maximum}");\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"As the preceding example shows, you can work with the returned tuple instance directly or ",(0,s.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples#tuple-assignment-and-deconstruction"},"deconstruct")," it into separate variables."),(0,s.kt)("li",{parentName:"ul"},"You can also use tuple types instead of ",(0,s.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types"},"anonymous types"),"; for example, in LINQ queries. For more information, see ",(0,s.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/standard/base-types/choosing-between-anonymous-and-tuple"},"Choosing between anonymous and tuple types"),"."),(0,s.kt)("li",{parentName:"ul"},"Typically, you use tuples to group loosely related data elements. In public APIs, consider defining a ",(0,s.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/class"},"class")," or a ",(0,s.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct"},"structure")," type.")))}m.isMDXComponent=!0}}]);