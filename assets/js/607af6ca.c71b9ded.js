"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[3261],{3213:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>v,frontMatter:()=>d,metadata:()=>r,toc:()=>l});var i=t(5893),o=t(1151);const d={id:"events",title:"Events",sidebar_position:6},s=void 0,r={id:"csharp/core-concepts/events",title:"Events",description:"- A mechanism for communication between objects",source:"@site/docs/csharp/core-concepts/events.md",sourceDirName:"csharp/core-concepts",slug:"/csharp/core-concepts/events",permalink:"/LearningCollection/csharp/core-concepts/events",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/core-concepts/events.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"events",title:"Events",sidebar_position:6},sidebar:"docs",previous:{title:"Closures",permalink:"/LearningCollection/csharp/core-concepts/closures"},next:{title:"Assembly",permalink:"/LearningCollection/csharp/advanced-concepts/classes/assemblyClass"}},c={},l=[{value:"Terms",id:"terms",level:2},{value:"Delegates",id:"delegates",level:2},{value:"What do we need to do?",id:"what-do-we-need-to-do",level:2},{value:"Example",id:"example",level:2},{value:"Example 2: Simplification",id:"example-2-simplification",level:2},{value:"Source",id:"source",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A mechanism for communication between objects"}),"\n",(0,i.jsxs)(n.li,{children:["Used in building ",(0,i.jsx)(n.em,{children:"Loosely Coupled Applications"})]}),"\n",(0,i.jsx)(n.li,{children:"Helps extending applications"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"terms",children:"Terms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Event sender: called ",(0,i.jsx)(n.strong,{children:"publisher"})," or event sender"]}),"\n",(0,i.jsxs)(n.li,{children:["Event receiver: called ",(0,i.jsx)(n.strong,{children:"subscriber"})," or event receiver"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"delegates",children:"Delegates"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Agreement/Contract between Publisher and Subscriber"}),"\n",(0,i.jsx)(n.li,{children:"Determines the signature of the event handler method in the subscriber"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"what-do-we-need-to-do",children:"What do we need to do?"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Define a delegate"}),"\n",(0,i.jsx)(n.li,{children:"Define an event based on that delegate"}),"\n",(0,i.jsx)(n.li,{children:"Raise the event"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'class Program\n{\n\tstatic void Main(string[] args)\n\t{\n\t\tvar video = new Video() { Title = "Video 1" };\n\t\tvar videoEncoder = new VideoEncoder();  // publisher\n\t\tvar mailService = new MailService();    // subscriber\n\n\t\t// subscribe: register event handler (add reference to handler method)\n\t\tvideoEncoder.VideoEncoded += mailService.OnVideoEncoded;\n\t\tvideoEncoder.Encode(video);\n\t}\n}\n\n// Publisher\npublic class VideoEncoder\n{\n\t// The delegate which defines how the handling method has to look\n\tpublic delegate void VideoEncodedEventHandler(object source, VideoEventArgs args);\n\t// The event which gets raised\n\tpublic event VideoEncodedEventHandler VideoEncoded;\n\n\tpublic void Encode(Video video)\n\t{\n\t\t// do some work\n\t\t...\n\t\t// raise the event\n\t\tOnVideoEncoded(video);\n\t}\n\n\t// it is convention to make these handlers protected virtual and void\n\tprotected virtual void OnVideoEncoded(Video video)\n\t{\n\t\t// check if there are any subscribers\n\t\tif (VideoEncoded != null)\n\t\t{\n\t\t\tVideoEncoded(this, new VideoEventArgs(){ Video = video });\n\t\t}\n\t}\n}\n\npublic class VideoEventArgs : EventArgs\n{\n\tpublic Video Video { get; set; }\n}\n\n// Subscriber\npublic class MailService{\n\t// Event Handler: called by publisher when the event is raised\n\tpublic void OnVideEncoded(object source, VideoEventArgs e)\n\t{\n\t\t// do some work: e.g. send an email\n\t\t...\n\t\t// use event args\n\t\tConsole.WriteLine(e.Video.Title);\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example-2-simplification",children:"Example 2: Simplification"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'class Program\n{\n\tstatic void Main(string[] args)\n\t{\n\t\tvar video = new Video() { Title = "Video 1" };\n\t\tvar videoEncoder = new VideoEncoder();  // publisher\n\t\tvar mailService = new MailService();    // subscriber\n\n\t\t// subscribe: register event handler (add reference to handler method)\n\t\tvideoEncoder.VideoEncoded += mailService.OnVideoEncoded;\n\t\tvideoEncoder.Encode(video);\n\t}\n}\n\n// Publisher\npublic class VideoEncoder\n{\n\t// !!The event which gets raised (NOW WITH EventHandler)!!\n\tpublic event EventHandler<VideoEventArgs> VideoEncoded;\n\n\tpublic void Encode(Video video)\n\t{\n\t\t// do some work\n\t\t...\n\t\t// raise the event\n\t\tOnVideoEncoded(video);\n\t}\n\n\t// it is convention to make these handlers protected virtual and void\n\tprotected virtual void OnVideoEncoded(Video video)\n\t{\n\t\t// check if there are any subscribers\n\t\tif (VideoEncoded != null)\n\t\t{\n\t\t\tVideoEncoded(this, new VideoEventArgs(){ Video = video });\n\t\t}\n\t}\n}\n\npublic class VideoEventArgs : EventArgs\n{\n\tpublic Video Video { get; set; }\n}\n\n// Subscriber\npublic class MailService{\n\t// Event Handler: called by publisher when the event is raised\n\tpublic void OnVideEncoded(object source, VideoEventArgs e)\n\t{\n\t\t// do some work: e.g. send an email\n\t\t...\n\t\t// use event args\n\t\tConsole.WriteLine(e.Video.Title);\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"source",children:"Source"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=jQgwEsJISy0",children:"C# Events and Delegates Made Simple | Mosh"})})]})}function v(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var i=t(7294);const o={},d=i.createContext(o);function s(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);