"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[2441],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(a),m=l,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return a?n.createElement(k,o(o({ref:t},c),{},{components:a})):n.createElement(k,o({ref:t},c))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9589:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const r={id:"querying-tables",title:"Querying Tables",sidebar_position:3},o=void 0,i={unversionedId:"Databases/sql/core-concepts/querying-tables",id:"Databases/sql/core-concepts/querying-tables",title:"Querying Tables",description:"SELECT statement",source:"@site/docs/Databases/sql/core-concepts/querying-tables.md",sourceDirName:"Databases/sql/core-concepts",slug:"/Databases/sql/core-concepts/querying-tables",permalink:"/LearningCollection/Databases/sql/core-concepts/querying-tables",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Databases/sql/core-concepts/querying-tables.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"querying-tables",title:"Querying Tables",sidebar_position:3},sidebar:"finance",previous:{title:"Database Schema",permalink:"/LearningCollection/Databases/sql/core-concepts/database-schema"},next:{title:"Altering Tables",permalink:"/LearningCollection/Databases/sql/core-concepts/altering-tables"}},s={},p=[{value:"<code>SELECT</code> statement",id:"select-statement",level:2},{value:"Selecting a single field",id:"selecting-a-single-field",level:3},{value:"Selecting multiple fields",id:"selecting-multiple-fields",level:3},{value:"Selecting all fields",id:"selecting-all-fields",level:3},{value:"<code>AS</code> keyword",id:"as-keyword",level:3},{value:"<code>SELECT DISTINCT</code> statement",id:"select-distinct-statement",level:3},{value:"<code>WHERE</code> clause",id:"where-clause",level:2},{value:"Equality operators",id:"equality-operators",level:3},{value:"Checking for NULL values",id:"checking-for-null-values",level:3},{value:"<code>BETWEEN</code> operator",id:"between-operator",level:3},{value:"<code>AND</code> operator",id:"and-operator",level:3},{value:"<code>OR</code> operator",id:"or-operator",level:3},{value:"<code>IN</code> operator",id:"in-operator",level:3},{value:"<code>LIKE</code> operator",id:"like-operator",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,l.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"select-statement"},(0,l.kt)("inlineCode",{parentName:"h2"},"SELECT")," statement"),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT"),' statement is the most common operation in SQL - often called a "query". ',(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," retrieves data from one or more tables. Standard ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," statements do not alter the state of the database."),(0,l.kt)("h3",{id:"selecting-a-single-field"},"Selecting a single field"),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," statement begins with the keyword ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," followed by the fields you want to retrieve:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id from users;\n")),(0,l.kt)("p",null,"After specifying fields, you need to indicate which table you want to pull the records from using the ",(0,l.kt)("inlineCode",{parentName:"p"},"from")," statement followed by the name of the table."),(0,l.kt)("h3",{id:"selecting-multiple-fields"},"Selecting multiple fields"),(0,l.kt)("p",null,"To select multiple fields, we separate them with a comma:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, name from users;\n")),(0,l.kt)("h3",{id:"selecting-all-fields"},"Selecting all fields"),(0,l.kt)("p",null,"To select all fields, we use the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," wildcard:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from users;\n")),(0,l.kt)("h3",{id:"as-keyword"},(0,l.kt)("inlineCode",{parentName:"h3"},"AS")," keyword"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"AS"),' keyword allows us to "alias" a piece of data in our query. The alias only exists for the duration of the query.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT employee_id AS id, employee_name AS name\nFROM employees;\n")),(0,l.kt)("h3",{id:"select-distinct-statement"},(0,l.kt)("inlineCode",{parentName:"h3"},"SELECT DISTINCT")," statement"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT DISTINCT")," statement allows us to retrieve unique values in a column. For example, if we want to get a list of all the unique cities in our ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT city FROM users;\n")),(0,l.kt)("h2",{id:"where-clause"},(0,l.kt)("inlineCode",{parentName:"h2"},"WHERE")," clause"),(0,l.kt)("p",null,"We often want to look at specific user data within that table without retrieving all the other records in the table. SQL accepts a ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause within a query that allows us to filter the data based on a condition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT email FROM users WHERE name = 'John';\n")),(0,l.kt)("p",null,"This will return all the emails of users named John."),(0,l.kt)("h3",{id:"equality-operators"},"Equality operators"),(0,l.kt)("p",null,"SQL has a few different equality operators:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"="),": equal to"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<>")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"!="),": not equal to"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},">"),": greater than"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<"),": less than"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},">="),": greater than or equal to"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<="),": less than or equal to")),(0,l.kt)("h3",{id:"checking-for-null-values"},"Checking for NULL values"),(0,l.kt)("p",null,"You can use a ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to filter values by whether or not they're ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,l.kt)("p",null,"To get values that are ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM users WHERE first_name IS NULL;\n")),(0,l.kt)("p",null,"To get values that are ",(0,l.kt)("strong",{parentName:"p"},"not")," ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM users WHERE first_name IS NOT NULL;\n")),(0,l.kt)("h3",{id:"between-operator"},(0,l.kt)("inlineCode",{parentName:"h3"},"BETWEEN")," operator"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"BETWEEN")," operator allows us to filter data within a range. For example, to get all users with an ID between 1 and 10:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM users WHERE id BETWEEN 1 AND 10;\n")),(0,l.kt)("h3",{id:"and-operator"},(0,l.kt)("inlineCode",{parentName:"h3"},"AND")," operator"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause can contain one or many ",(0,l.kt)("inlineCode",{parentName:"p"},"AND")," operators. The AND operator is used to filter records based on more than one condition, like if you want to return all customers from Spain that starts with the letter 'G':"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM customers\nWHERE country='Spain'\nAND customerName LIKE 'G%';\n")),(0,l.kt)("h3",{id:"or-operator"},(0,l.kt)("inlineCode",{parentName:"h3"},"OR")," operator"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause can contain one or many ",(0,l.kt)("inlineCode",{parentName:"p"},"OR")," operators. The ",(0,l.kt)("inlineCode",{parentName:"p"},"OR")," operator is used to filter records based on more than one condition, like if you want to return all customers from Spain or Mexico:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM customers\nWHERE country='Spain'\nOR country='Mexico';\n")),(0,l.kt)("h3",{id:"in-operator"},(0,l.kt)("inlineCode",{parentName:"h3"},"IN")," operator"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"IN")," operator allows you to specify multiple values in a ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause. The ",(0,l.kt)("inlineCode",{parentName:"p"},"IN")," operator is a shorthand for multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"OR")," conditions."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM customers\nWHERE country IN ('Spain', 'Mexico');\n")),(0,l.kt)("h3",{id:"like-operator"},(0,l.kt)("inlineCode",{parentName:"h3"},"LIKE")," operator"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"LIKE")," operator is used in a ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to search for a specified pattern in a column. There are two wildcards often used in conjunction with the LIKE operator:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"%"),": The percent sign represents zero, one, or multiple characters"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_"),": The underscore represents a single character")),(0,l.kt)("p",null,"For example, to get all users whose name starts with the letter 'J':"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users\nWHERE name LIKE 'J%';\n")))}d.isMDXComponent=!0}}]);