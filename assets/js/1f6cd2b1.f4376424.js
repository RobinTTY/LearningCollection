"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[5806],{18260:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var s=t(74848),o=t(28453);const a={id:"type-guards",title:"Type Guards",sidebar_position:2},r=void 0,i={id:"web/typescript/advanced-concepts/type-guards",title:"Type Guards",description:"Type Guards allow you to narrow down the type of an object within a conditional block.",source:"@site/docs/web/typescript/advanced-concepts/type-guards.md",sourceDirName:"web/typescript/advanced-concepts",slug:"/web/typescript/advanced-concepts/type-guards",permalink:"/LearningCollection/web/typescript/advanced-concepts/type-guards",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/advanced-concepts/type-guards.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"type-guards",title:"Type Guards",sidebar_position:2},sidebar:"docs",previous:{title:"Intersection Types",permalink:"/LearningCollection/web/typescript/advanced-concepts/intersections"},next:{title:"Discriminated Unions",permalink:"/LearningCollection/web/typescript/advanced-concepts/discriminated-unions"}},c={},d=[{value:"<code>typeof</code> type guards",id:"typeof-type-guards",level:2},{value:"Usage",id:"usage",level:3},{value:"<code>instanceof</code> type guards",id:"instanceof-type-guards",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Examples",id:"examples",level:3},{value:"<code>in</code> type guards",id:"in-type-guards",level:2},{value:"Usage",id:"usage-2",level:3}];function p(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Type Guards allow you to narrow down the type of an object within a conditional block."}),"\n",(0,s.jsxs)(n.h2,{id:"typeof-type-guards",children:[(0,s.jsx)(n.code,{children:"typeof"})," type guards"]}),"\n",(0,s.jsxs)(n.p,{children:["As we\u2019ve seen, JavaScript supports a ",(0,s.jsx)(n.code,{children:"typeof"}),' operator which can give very basic information about the type of values we have at runtime. TypeScript expects this to return a certain set of strings ("string", "number", etc.). In TypeScript, checking against the value returned by ',(0,s.jsx)(n.code,{children:"typeof"})," is a type guard. ",(0,s.jsx)(n.code,{children:"typeof"})," is used for Typescript built-in types."]}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'var str = "Hello World";\nconsole.log(typeof str); //string\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"instanceof-type-guards",children:[(0,s.jsx)(n.code,{children:"instanceof"})," type guards"]}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript has an operator for checking whether or not a value is an \u201cinstance\u201d of another value. More specifically, in JavaScript ",(0,s.jsx)(n.code,{children:"x instanceof Foo"})," checks whether the prototype chain of ",(0,s.jsx)(n.code,{children:"x"})," contains ",(0,s.jsx)(n.code,{children:"Foo.prototype"}),". ",(0,s.jsx)(n.code,{children:"instanceof"}),' is used for custom types and "complex" built-in types (e.g. RegExp, Array, Object).']}),"\n",(0,s.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"{2}",children:"function logValue(x: Date | string) {\n  if (x instanceof Date) {\n    console.log(x.toUTCString());\n  } else {\n    console.log(x.toUpperCase());\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"/regularexpression/ instanceof RegExp; // true\ntypeof /regularexpression/; // object\n\n[] instanceof Array; // true\ntypeof []; //object\n\n{} instanceof Object; // true\ntypeof {}; // object\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"in-type-guards",children:[(0,s.jsx)(n.code,{children:"in"})," type guards"]}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript has an operator for determining if an object has a property with a name: the ",(0,s.jsx)(n.code,{children:"in"})," operator. TypeScript takes this into account as a way to narrow down potential types."]}),"\n",(0,s.jsx)(n.h3,{id:"usage-2",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'interface A {\n  x: number;\n}\ninterface B {\n  y: string;\n}\n\nfunction doStuff(q: A | B) {\n  if ("x" in q) {\n    // q: A\n  } else {\n    // q: B\n  }\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(96540);const o={},a=s.createContext(o);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);