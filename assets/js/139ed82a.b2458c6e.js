"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4854],{91165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"csharp/libraries/hot-chocolate/types/interfaces","title":"Interfaces","description":"An interface is an abstract type that defines a certain set of fields that an object type or another interface must include to implement the interface. Interfaces can only be used as output types, meaning we can\'t use interfaces as arguments or as fields on input object types.","source":"@site/docs/csharp/libraries/hot-chocolate/types/interfaces.md","sourceDirName":"csharp/libraries/hot-chocolate/types","slug":"/csharp/libraries/hot-chocolate/types/interfaces","permalink":"/LearningCollection/csharp/libraries/hot-chocolate/types/interfaces","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/libraries/hot-chocolate/types/interfaces.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"interfaces","title":"Interfaces","sidebar_position":4},"sidebar":"docs","previous":{"title":"Input Objects","permalink":"/LearningCollection/csharp/libraries/hot-chocolate/types/input-objects"},"next":{"title":"Unions","permalink":"/LearningCollection/csharp/libraries/hot-chocolate/types/unions"}}');var i=n(74848),a=n(28453);const r={id:"interfaces",title:"Interfaces",sidebar_position:4},c=void 0,o={},l=[];function p(e){const t={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"An interface is an abstract type that defines a certain set of fields that an object type or another interface must include to implement the interface. Interfaces can only be used as output types, meaning we can't use interfaces as arguments or as fields on input object types."}),"\n",(0,i.jsx)(t.p,{children:"Interfaces can be defined like the following:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"public interface IMessage\n{\n    User Author { get; set; }\n\n    DateTime CreatedAt { get; set; }\n}\n\npublic class TextMessage : IMessage\n{\n    public User Author { get; set; }\n\n    public DateTime CreatedAt { get; set; }\n\n    public string Content { get; set; }\n}\n\npublic class Query\n{\n    public IMessage[] GetMessages()\n    {\n        // Omitted code for brevity\n    }\n}\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["We have to explicitly register the interface implementations: ",(0,i.jsx)(t.code,{children:"services.AddGraphQLServer().AddType<TextMessageType>()"})]})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);