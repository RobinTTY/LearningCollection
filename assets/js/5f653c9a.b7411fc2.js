"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[5186],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(t),u=r,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[d]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={id:"passing-props",title:"Passing Props",sidebar_position:4},i=void 0,p={unversionedId:"web/react/core-concepts/describing-ui/passing-props",id:"web/react/core-concepts/describing-ui/passing-props",title:"Passing Props",description:"React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.",source:"@site/docs/web/react/core-concepts/describing-ui/passing-props.md",sourceDirName:"web/react/core-concepts/describing-ui",slug:"/web/react/core-concepts/describing-ui/passing-props",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/passing-props",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/react/core-concepts/describing-ui/passing-props.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"passing-props",title:"Passing Props",sidebar_position:4},sidebar:"docs",previous:{title:"JavaScript in JSX",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/javascript-in-jsx"},next:{title:"Conditional Rendering",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/conditional-rendering"}},s={},l=[{value:"Familiar props",id:"familiar-props",level:2},{value:"Passing props to a component",id:"passing-props-to-a-component",level:2},{value:"Step 1: Pass props to the child component",id:"step-1-pass-props-to-the-child-component",level:3},{value:"Step 2: Read props inside the child component",id:"step-2-read-props-inside-the-child-component",level:3},{value:"Specifying a default value for a prop",id:"specifying-a-default-value-for-a-prop",level:2},{value:"Forwarding props with the JSX spread syntax",id:"forwarding-props-with-the-jsx-spread-syntax",level:2},{value:"Passing JSX as children",id:"passing-jsx-as-children",level:2},{value:"How props change over time",id:"how-props-change-over-time",level:2}],c={toc:l},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions."),(0,r.kt)("h2",{id:"familiar-props"},"Familiar props"),(0,r.kt)("p",null,"Props are the information that you pass to a JSX tag. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"className"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"alt"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"width"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," are some of the props you can pass to an ",(0,r.kt)("inlineCode",{parentName:"p"},"<img>"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Avatar() {\n  return (\n    <img\n      className="avatar"\n      src="https://i.imgur.com/1bX5QH6.jpg"\n      alt="Lin Lanying"\n      width={100}\n      height={100}\n    />\n  );\n}\n\nexport default function Profile() {\n  return <Avatar />;\n}\n')),(0,r.kt)("p",null,"The props you can pass to an ",(0,r.kt)("inlineCode",{parentName:"p"},"<img>")," tag are predefined (ReactDOM conforms to ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/html52/semantics-embedded-content.html#the-img-element"},"the HTML standard"),"). But you can pass any props to your own components, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"<Avatar>"),", to customize them."),(0,r.kt)("h2",{id:"passing-props-to-a-component"},"Passing props to a component"),(0,r.kt)("p",null,"In this code, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Profile")," component isn\u2019t passing any props to its child component, ",(0,r.kt)("inlineCode",{parentName:"p"},"Avatar"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default function Profile() {\n  return <Avatar />;\n}\n")),(0,r.kt)("p",null,"You can give ",(0,r.kt)("inlineCode",{parentName:"p"},"Avatar")," some props in two steps."),(0,r.kt)("h3",{id:"step-1-pass-props-to-the-child-component"},"Step 1: Pass props to the child component"),(0,r.kt)("p",null,"First, pass some props to ",(0,r.kt)("inlineCode",{parentName:"p"},"Avatar"),". For example, let\u2019s pass two props: ",(0,r.kt)("inlineCode",{parentName:"p"},"person")," (an object), and ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," (a number):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function Profile() {\n  return (\n    <Avatar person={{ name: "Lin Lanying", imageId: "1bX5QH6" }} size={100} />\n  );\n}\n')),(0,r.kt)("h3",{id:"step-2-read-props-inside-the-child-component"},"Step 2: Read props inside the child component"),(0,r.kt)("p",null,"You can read these props by adding them to the function signature of ",(0,r.kt)("inlineCode",{parentName:"p"},"Avatar"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Avatar({ person, size }) {\n  // person and size are available here\n}\n")),(0,r.kt)("p",null,"Add some logic to ",(0,r.kt)("inlineCode",{parentName:"p"},"Avatar")," that uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"person")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," props for rendering, and you\u2019re done. Now you can configure ",(0,r.kt)("inlineCode",{parentName:"p"},"Avatar")," to render in many different ways with different props."),(0,r.kt)("p",null,"You can think of props like \u201cknobs\u201d that you can adjust. They serve the same role as arguments serve for functions\u2014in fact, props are the only argument to your component! React component functions accept a single argument, a ",(0,r.kt)("inlineCode",{parentName:"p"},"props")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Avatar(props) {\n  let person = props.person;\n  let size = props.size;\n  // ...\n}\n")),(0,r.kt)("p",null,"Usually you don\u2019t need the whole ",(0,r.kt)("inlineCode",{parentName:"p"},"props")," object itself, so you destructure it into individual props."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Don\u2019t miss the pair of ",(0,r.kt)("inlineCode",{parentName:"p"},"{")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"}")," curlies inside of ",(0,r.kt)("inlineCode",{parentName:"p"},"(")," and ",(0,r.kt)("inlineCode",{parentName:"p"},")")," when declaring props:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Avatar({ person, size }) {\n  // ...\n}\n"))),(0,r.kt)("h2",{id:"specifying-a-default-value-for-a-prop"},"Specifying a default value for a prop"),(0,r.kt)("p",null,"If you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," and the default value right after the parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Avatar({ person, size = 100 }) {\n  // ...\n}\n")),(0,r.kt)("p",null,"Now, if ",(0,r.kt)("inlineCode",{parentName:"p"},"<Avatar person={...} />")," is rendered with no ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop, the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," will be set to 100. The default value is only used if the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop is missing or if you pass ",(0,r.kt)("inlineCode",{parentName:"p"},"size={undefined}"),". But if you pass ",(0,r.kt)("inlineCode",{parentName:"p"},"size={null}")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"size={0}"),", the default value will not be used."),(0,r.kt)("h2",{id:"forwarding-props-with-the-jsx-spread-syntax"},"Forwarding props with the JSX spread syntax"),(0,r.kt)("p",null,"Sometimes, passing props gets very repetitive:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Profile({ person, size, isSepia, thickBorder }) {\n  return (\n    <div className="card">\n      <Avatar\n        person={person}\n        size={size}\n        isSepia={isSepia}\n        thickBorder={thickBorder}\n      />\n    </div>\n  );\n}\n')),(0,r.kt)("p",null,"There\u2019s nothing wrong with repetitive code\u2014it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this ",(0,r.kt)("inlineCode",{parentName:"p"},"Profile")," does with ",(0,r.kt)("inlineCode",{parentName:"p"},"Avatar"),". Because they don\u2019t use any of their props directly, it can make sense to use a more concise \u201cspread\u201d syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Profile(props) {\n  return (\n    <div className="card">\n      <Avatar {...props} />\n    </div>\n  );\n}\n')),(0,r.kt)("p",null,"This forwards all of ",(0,r.kt)("inlineCode",{parentName:"p"},"Profile"),"\u2019s props to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Avatar")," without listing each of their names. ",(0,r.kt)("strong",{parentName:"p"},"Use spread syntax with restraint.")," If you\u2019re using it in every other component, something is wrong. Often, it indicates that you should split your components and pass children as JSX. More on that next!"),(0,r.kt)("h2",{id:"passing-jsx-as-children"},"Passing JSX as children"),(0,r.kt)("p",null,"Sometimes you\u2019ll want to nest your own components the same way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Card>\n  <Avatar />\n</Card>\n")),(0,r.kt)("p",null,"When you nest content inside a JSX tag, the parent component will receive that content in a prop called ",(0,r.kt)("inlineCode",{parentName:"p"},"children"),". For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Card")," component below will receive a ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," prop set to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Avatar />")," and render it in a wrapper div:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="app.js"',title:'"app.js"'},'import Avatar from "./Avatar.js";\n\nfunction Card({ children }) {\n  return <div className="card">{children}</div>;\n}\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{\n          name: "Katsuko Saruhashi",\n          imageId: "YfeOqp2",\n        }}\n      />\n    </Card>\n  );\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Avatar.js"',title:'"Avatar.js"'},'import { getImageUrl } from "./utils.js";\n\nexport default function Avatar({ person, size }) {\n  return (\n    <img\n      className="avatar"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="utils.js"',title:'"utils.js"'},'export function getImageUrl(person, size = "s") {\n  return "https://i.imgur.com/" + person.imageId + size + ".jpg";\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Card")," component can wrap any nested content. It doesn\u2019t need to \u201cknow\u201d what\u2019s being rendered inside of it. You will see this flexible pattern in many places. You can think of a component with a ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," prop as having a \u201chole\u201d that can be \u201cfilled in\u201d by its parent components with arbitrary JSX. You will often use the ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," prop for visual wrappers: panels, grids, etc."),(0,r.kt)("h2",{id:"how-props-change-over-time"},"How props change over time"),(0,r.kt)("p",null,"A component may receive different props over time. Props reflect a component\u2019s data at any point in time, rather than only in the beginning. However, props are ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Immutable_object"},"immutable"),"\u2014a term from computer science meaning \u201cunchangeable\u201d. When a component needs to change its props (for example, in response to a user interaction or new data), it will have to \u201cask\u201d its parent component to pass it different props\u2014a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Don\u2019t try to \u201cchange props\u201d. When you need to respond to the user input (like changing the selected color), you will need to \u201cset state\u201d.")))}m.isMDXComponent=!0}}]);