"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4832],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=i.createContext({}),l=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return i.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(t),g=a,m=p["".concat(d,".").concat(g)]||p[g]||u[g]||r;return t?i.createElement(m,o(o({ref:n},c),{},{components:t})):i.createElement(m,o({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4797:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=t(7462),a=(t(7294),t(3905));const r={id:"queryingCreatingUpdatingDeleting",title:"Querying, Creating, Updating and Deleting documents with Mongo shell",sidebar_position:4},o=void 0,s={unversionedId:"Databases/MongoDB/M001 MongoDB Basics/queryingCreatingUpdatingDeleting",id:"Databases/MongoDB/M001 MongoDB Basics/queryingCreatingUpdatingDeleting",title:"Querying, Creating, Updating and Deleting documents with Mongo shell",description:"Querying data",source:"@site/docs/Databases/MongoDB/M001 MongoDB Basics/Querying, Creating, Updating and Deleting document.md",sourceDirName:"Databases/MongoDB/M001 MongoDB Basics",slug:"/Databases/MongoDB/M001 MongoDB Basics/queryingCreatingUpdatingDeleting",permalink:"/LearningCollection/Databases/MongoDB/M001 MongoDB Basics/queryingCreatingUpdatingDeleting",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Databases/MongoDB/M001 MongoDB Basics/Querying, Creating, Updating and Deleting document.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"queryingCreatingUpdatingDeleting",title:"Querying, Creating, Updating and Deleting documents with Mongo shell",sidebar_position:4},sidebar:"finance",previous:{title:"Importing and Exporting data",permalink:"/LearningCollection/Databases/MongoDB/M001 MongoDB Basics/importingExportingData"},next:{title:"Advanced CRUD operations",permalink:"/LearningCollection/Databases/MongoDB/M001 MongoDB Basics/advancedCrudOperations"}},d={},l=[{value:"Querying data",id:"querying-data",level:2},{value:"Queries",id:"queries",level:3},{value:"Creating and Manipulating documents",id:"creating-and-manipulating-documents",level:2},{value:"Updating documents",id:"updating-documents",level:2},{value:"Deleting documents",id:"deleting-documents",level:2}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"querying-data"},"Querying data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// show all dbs in current cluster\nshow dbs\n\n// select a database\nuse <databaseName>\n\n// show all collections inside database\nshow collections\n\n// execute a query in the current db\ndb.zips.find({"state": "NY"})\n\n// iterate through a cursor\nit\n// count the number of results for a query\ndb.zips.find(<query>).count()\n\n// return documents that match the given query formatted for ease of reading\ndb.zips.find(<query>).pretty()\n\n// get a random document\ndb.zips.findOne()\n')),(0,a.kt)("h3",{id:"queries"},"Queries"),(0,a.kt)("p",null,"A query looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JSON"},'{"state": "NY", "city": "ALBANY"}\n')),(0,a.kt)("p",null,"Here we search for all data with ",(0,a.kt)("inlineCode",{parentName:"p"},'state = "NY"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'city = "ALBANY"')),(0,a.kt)("h2",{id:"creating-and-manipulating-documents"},"Creating and Manipulating documents"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// insert a document\ndb.inspections.insert({\n    "_id" : ObjectId("56d61033a378eccde8a8354f"),\n    "id" : "10021-2015-ENFO",\n    ...\n})\n\n// Insert three documents\ndb.inspections.insert([ { "test": 1 }, { "test": 2 }, { "test": 3 } ])\n\n// Insert multiple documents specifying the _id values, and using the "ordered": false option.\ndb.inspections.insert([{ "_id": 1, "test": 1 },{ "_id": 1, "test": 2 },\n                       { "_id": 3, "test": 3 }],{ "ordered": false })\n\n// Insert multiple documents with _id: 1 with the default "ordered": true setting\n// nothing will be inserted if document with _id=1 already exists\ndb.inspection.insert([{ "_id": 1, "test": 1 },{ "_id": 3, "test": 3 }])\n\n')),(0,a.kt)("h2",{id:"updating-documents"},"Updating documents"),(0,a.kt)("p",null,"Operators: $inc, $set, $unset"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// Update a single document in the zips collection where the zip field is equal to "12534"\n// by setting the value of the "pop" field to 17630\ndb.zips.updateOne({ "zip": "12534" }, { "$set": { "pop": 17630 } })\n\n// Update all documents in the zips collection where the city field is equal to "HUDSON"\n// by adding 10 to the current value of the "pop" field\ndb.zips.updateMany({ "city": "HUDSON" }, { "$inc": { "pop": 10 } })\n\n// Update one document in the grades collection where the student_id is ``250``,\n// and the class_id field is 339 , by adding a document element to the "scores" array\ndb.grades.updateOne({ "student_id": 250, "class_id": 339 },\n                    { "$push": { "scores": { "type": "extra credit",\n                                             "score": 100 }\n                                }\n                     })\n')),(0,a.kt)("h2",{id:"deleting-documents"},"Deleting documents"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// Delete one document that has test field equal to 3\ndb.inspections.deleteOne({ "test": 3 })\n\n// Delete all the documents that have test field equal to 1\ndb.inspections.deleteMany({ "test": 1 })\n\n// Drop the inspection collection\ndb.inspection.drop()\n')))}u.isMDXComponent=!0}}]);