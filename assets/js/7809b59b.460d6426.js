"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8717],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return d}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=t.createContext({}),c=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),f=c(r),d=o,m=f["".concat(u,".").concat(d)]||f[d]||s[d]||l;return r?t.createElement(m,a(a({ref:n},p),{},{components:r})):t.createElement(m,a({ref:n},p))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=f;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=r[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9301:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var t=r(7462),o=r(3366),l=(r(7294),r(3905)),a=["components"],i={id:"nullConditionalOperator",title:"Null-conditional operator"},u=void 0,c={unversionedId:"C-Sharp/nullConditionalOperator",id:"C-Sharp/nullConditionalOperator",title:"Null-conditional operator",description:"- Tests the value of the left-hand operand for null before performing a member access (?.) or index (?[]) operation",source:"@site/docs/C-Sharp/null-conditional operator.md",sourceDirName:"C-Sharp",slug:"/C-Sharp/nullConditionalOperator",permalink:"/LearningCollection/C-Sharp/nullConditionalOperator",editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/C-Sharp/null-conditional operator.md",tags:[],version:"current",frontMatter:{id:"nullConditionalOperator",title:"Null-conditional operator"},sidebar:"mySidebar",previous:{title:"Null-coalescing operator",permalink:"/LearningCollection/C-Sharp/nullCoalescingOperator"},next:{title:"Properties vs Public variables",permalink:"/LearningCollection/C-Sharp/propsVsPublicVars"}},p=[],s={toc:p};function f(e){var n=e.components,r=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tests the value of the left-hand operand for null before performing a member access ",(0,l.kt)("inlineCode",{parentName:"li"},"(?.)")," or index ",(0,l.kt)("inlineCode",{parentName:"li"},"(?[])")," operation"),(0,l.kt)("li",{parentName:"ul"},"returns null if the left-hand operand evaluates to null")),(0,l.kt)("p",null,"Syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"int? length = customers?.Length; // null if customers is null\nint? count = customers?[0]?.Orders?.Count(); // null if customers, the first customer, or Orders is null\n")))}f.isMDXComponent=!0}}]);