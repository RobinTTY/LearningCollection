"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[2935],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>v});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,v=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(v,o(o({ref:t},p),{},{components:a})):n.createElement(v,o({ref:t},p))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3515:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={id:"introductionToJavascript",title:"Introduction to Javascript"},o=void 0,l={unversionedId:"web/javascript/courses/codeacademy-course/introductionToJavascript",id:"web/javascript/courses/codeacademy-course/introductionToJavascript",title:"Introduction to Javascript",description:"Keywords",source:"@site/docs/web/javascript/courses/codeacademy-course/README.md",sourceDirName:"web/javascript/courses/codeacademy-course",slug:"/web/javascript/courses/codeacademy-course/",permalink:"/LearningCollection/web/javascript/courses/codeacademy-course/",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/javascript/courses/codeacademy-course/README.md",tags:[],version:"current",frontMatter:{id:"introductionToJavascript",title:"Introduction to Javascript"},sidebar:"finance",previous:{title:"data-* and HTMLElement.dataset",permalink:"/LearningCollection/web/javascript/web-apis/dataAndDataset"},next:{title:"PennX - SD4x",permalink:"/LearningCollection/web/javascript/courses/edx-course/pennxSd4x"}},s={},c=[{value:"Keywords",id:"keywords",level:2},{value:"The Console",id:"the-console",level:2},{value:"Data Types",id:"data-types",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Built-in Objects",id:"built-in-objects",level:2},{value:"Variables",id:"variables",level:2},{value:"var",id:"var",level:3},{value:"let",id:"let",level:3},{value:"const",id:"const",level:3},{value:"The difference between <code>var</code> and <code>let</code>",id:"the-difference-between-var-and-let",level:3},{value:"String Interpolation",id:"string-interpolation",level:2},{value:"<code>typeof</code> operator",id:"typeof-operator",level:2},{value:"Truthy and Falsy",id:"truthy-and-falsy",level:2},{value:"Assignment via truthy/falsy values",id:"assignment-via-truthyfalsy-values",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"keywords"},"Keywords"),(0,r.kt)("p",null,"Keywords are words that are built into the JavaScript language, so the computer will recognize them and treats them specially."),(0,r.kt)("h2",{id:"the-console"},"The Console"),(0,r.kt)("p",null,"In JavaScript, the ",(0,r.kt)("inlineCode",{parentName:"p"},"console")," keyword refers to an object, a collection of data and actions, that we can use in our code."),(0,r.kt)("p",null,"One action, or method, that is built into the ",(0,r.kt)("inlineCode",{parentName:"p"},"console")," object is the ",(0,r.kt)("inlineCode",{parentName:"p"},".log()")," method."),(0,r.kt)("h2",{id:"data-types"},"Data Types"),(0,r.kt)("p",null,"Data types are the classifications we give to the different kinds of data that we use in programming. In JavaScript, there are seven fundamental data types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number (integers or floating point)"),(0,r.kt)("li",{parentName:"ul"},"String"),(0,r.kt)("li",{parentName:"ul"},"Boolean"),(0,r.kt)("li",{parentName:"ul"},"Null: intentional absence of a value"),(0,r.kt)("li",{parentName:"ul"},"Undefined: the absence of a value"),(0,r.kt)("li",{parentName:"ul"},"Symbol: unique identifiers, useful in more complex coding"),(0,r.kt)("li",{parentName:"ul"},"Object")),(0,r.kt)("p",null,"The first 6 types are considererd primitive data types."),(0,r.kt)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,r.kt)("p",null,"An operator is a character that performs a task in our code. JavaScript has several built-in in arithmetic operators, that allow us to perform mathematical calculations on numbers. These include the following operators and their corresponding symbols:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add (+)"),(0,r.kt)("li",{parentName:"ul"},"Substract (-)"),(0,r.kt)("li",{parentName:"ul"},"Multiplay (","*",")"),(0,r.kt)("li",{parentName:"ul"},"Divide (/)"),(0,r.kt)("li",{parentName:"ul"},"Remainder (%)")),(0,r.kt)("h2",{id:"built-in-objects"},"Built-in Objects"),(0,r.kt)("p",null,"In addition to console, there are other objects built into JavaScript. A list of them can be found ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"},"here"),"."),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("p",null,"In short, variables label and store data in memory. It is important to distinguish that variables are not values; they contain values and represent them with a name."),(0,r.kt)("h3",{id:"var"},"var"),(0,r.kt)("p",null,"There were a lot of changes introduced in the ES6 version of JavaScript in 2015. One of the biggest changes was two new keywords, ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),", to create, or declare, variables. Prior to the ES6, programmers could only use the ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," keyword to declare variables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var myName = "Arya";\nconsole.log(myName);\n// Output: Ary\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"var"),", short for variable, is a JavaScript keyword that creates, or declares, a new variable."),(0,r.kt)("h3",{id:"let"},"let"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," keyword was introduced in ES6. The ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," keyword signals that the variable can be reassigned a different value. we can declare a variable without assigning the variable a value. In such a case, the variable will be automatically initialized with a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"const"},"const"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," keyword was also introduced in ES6, and is short for the word constant. A ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," variable cannot be reassigned because it is constant. If you try to reassign a const variable, you\u2019ll get a ",(0,r.kt)("inlineCode",{parentName:"p"},"TypeError"),". You need to initialize a ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," variable with a value."),(0,r.kt)("h3",{id:"the-difference-between-var-and-let"},"The difference between ",(0,r.kt)("inlineCode",{parentName:"h3"},"var")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"let")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"let")," allows you to declare variables that are limited to the scope of a block statement, or expression on which it is used, unlike the ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," keyword, which declares a variable globally, or locally to an entire function regardless of block scope. The other difference between ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," is that the latter is initialized to a value only when a parser evaluates it."),(0,r.kt)("h2",{id:"string-interpolation"},"String Interpolation"),(0,r.kt)("p",null,"In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const myPet = "armadillo";\nconsole.log(`I own a pet ${myPet}.`);\n// Output: I own a pet armadillo.\n')),(0,r.kt)("p",null,"One of the biggest benefits to using template literals is the readability of the code."),(0,r.kt)("h2",{id:"typeof-operator"},(0,r.kt)("inlineCode",{parentName:"h2"},"typeof")," operator"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"typeof")," operator returns a string indicating the type of the unevaluated operand."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let newVariable = "Playing around with typeof.";\n\nconsole.log(typeof newVariable);\n// Output: string\n\nnewVariable = 1;\n\nconsole.log(typeof newVariable);\n// Output: number\n')),(0,r.kt)("p",null,"Note: The type of a variable is not fixed in JavaScript!"),(0,r.kt)("h2",{id:"truthy-and-falsy"},"Truthy and Falsy"),(0,r.kt)("p",null,"In JavaScript, a ",(0,r.kt)("em",{parentName:"p"},"truthy"),' value is a value that is considered true when encountered in a Boolean context. All values are truthy unless they are defined as falsy (i.e., except for false, 0, -0, 0n, "", null, undefined, and NaN).'),(0,r.kt)("p",null,"A falsy (sometimes written falsey) value is a value that is considered false when encountered in a Boolean context."),(0,r.kt)("p",null,"Complete list of falsy values: ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy"},"MDN")),(0,r.kt)("h3",{id:"assignment-via-truthyfalsy-values"},"Assignment via truthy/falsy values"),(0,r.kt)("p",null,"In a boolean condition, JavaScript assigns the truthy value to a variable if you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"||")," operator in your assignment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let defaultName = username || "Stranger";\n')))}u.isMDXComponent=!0}}]);