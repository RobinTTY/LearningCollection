"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8576],{38324:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"web/html/element-types","title":"Element Types","description":"All you see on the page in your browser viewer are HTML elements. And this is where the difference between HTML tags and HTML elements lies: elements are what the user sees on the browser page, while tags are what the developer writes when creating an HTML document.","source":"@site/docs/web/html/element-types.md","sourceDirName":"web/html","slug":"/web/html/element-types","permalink":"/LearningCollection/web/html/element-types","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/html/element-types.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"element-types","title":"Element Types","sidebar_position":2},"sidebar":"docs","previous":{"title":"Doctype","permalink":"/LearningCollection/web/html/doctype"},"next":{"title":"HTML attributes","permalink":"/LearningCollection/web/html/attributes"}}');var i=t(74848),s=t(28453);const r={id:"element-types",title:"Element Types",sidebar_position:2},o=void 0,a={},c=[{value:"Block-level Elements",id:"block-level-elements",level:2},{value:"Inline Elements",id:"inline-elements",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"All you see on the page in your browser viewer are HTML elements. And this is where the difference between HTML tags and HTML elements lies: elements are what the user sees on the browser page, while tags are what the developer writes when creating an HTML document."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"It is worth remembering that not all HTML tags are elements. For example, the DOCTYPE instruction, necessary for correct interpretation of code by a browser, and tags in the header of an HTML document are not elements."})}),"\n",(0,i.jsx)(n.p,{children:"There are two main types of page elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"block-level elements"}),"\n",(0,i.jsx)(n.li,{children:"inline elements"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Both of them have their own peculiarities."}),"\n",(0,i.jsx)(n.h2,{id:"block-level-elements",children:"Block-level Elements"}),"\n",(0,i.jsx)(n.p,{children:"Block-level elements are mostly used to create the structure of web pages or logically divide an HTML document into parts.\nExample of block-level elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<div>"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<h1>"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<p>"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For a full list see: ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements",children:"MDN"})]}),"\n",(0,i.jsx)(n.p,{children:"The following features are characteristic of block-level elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"They can contain both inline elements and other block-level elements"}),"\n",(0,i.jsx)(n.li,{children:"Browsers display them with a line break before and after the element"}),"\n",(0,i.jsx)(n.li,{children:"Block-level elements take up the full width available"}),"\n",(0,i.jsx)(n.li,{children:"The height is calculated automatically by the browser based on the contents"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Block level elements behave like that because they act like containers that keep all their content within"}),"\n",(0,i.jsx)(n.h2,{id:"inline-elements",children:"Inline Elements"}),"\n",(0,i.jsx)(n.p,{children:"Inline elements are elements of a document that constitute an integral part of a line. They emphasize a part of a text and give it a certain function or meaning. They usually contain one or more words."}),"\n",(0,i.jsx)(n.p,{children:"Example of inline elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<a>"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<span>"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<button>"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For a full list see: ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements",children:"MDN"})]}),"\n",(0,i.jsx)(n.p,{children:"The following features are characteristic of all inline elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["They can contain only data and other inline items (the only exception is the ",(0,i.jsx)(n.code,{children:"<a>"})," tag that can also contain block-level elements)"]}),"\n",(0,i.jsx)(n.li,{children:"A browser doesn't make a line break before and after a tag"}),"\n",(0,i.jsx)(n.li,{children:"They work only when they are enclosed in tags"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var l=t(96540);const i={},s=l.createContext(i);function r(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);