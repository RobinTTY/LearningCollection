"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[9621],{9913:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=n(4848),i=n(8453);const r={id:"system-text-json",title:"System.Text.Json",sidebar_position:2},o=void 0,a={id:"csharp/libraries/system-text-json",title:"System.Text.Json",description:"Provides high-performance, low-allocating, and standards-compliant capabilities to process JavaScript Object Notation (JSON), which includes serializing objects to JSON text and deserializing JSON text to objects, with UTF-8 support built-in.",source:"@site/docs/csharp/libraries/system-text-json.md",sourceDirName:"csharp/libraries",slug:"/csharp/libraries/system-text-json",permalink:"/LearningCollection/csharp/libraries/system-text-json",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/csharp/libraries/system-text-json.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"system-text-json",title:"System.Text.Json",sidebar_position:2},sidebar:"docs",previous:{title:"Unions",permalink:"/LearningCollection/csharp/libraries/hot-chocolate/types/unions"},next:{title:"Memory Stream vs FileStream",permalink:"/LearningCollection/csharp/comparisons/memVsFileStream"}},c={},l=[{value:"Attributes",id:"attributes",level:2},{value:"<code>[JsonConverter]</code>",id:"jsonconverter",level:3}];function d(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Provides high-performance, low-allocating, and standards-compliant capabilities to process JavaScript Object Notation (JSON), which includes serializing objects to JSON text and deserializing JSON text to objects, with UTF-8 support built-in."}),"\n",(0,s.jsx)(t.h2,{id:"attributes",children:"Attributes"}),"\n",(0,s.jsx)(t.h3,{id:"jsonconverter",children:(0,s.jsx)(t.code,{children:"[JsonConverter]"})}),"\n",(0,s.jsx)(t.p,{children:"When placed on a type, the specified converter will be used unless a compatible converter is added to the JsonSerializerOptions.Converters collection or there is another JsonConverterAttribute on a property of the same type."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"[JsonConverter(typeof(JsonStringEnumConverter))]\npublic enum RpgClass\n{\n  Knight = 1,\n  Mage = 2,\n  Cleric = 3\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In the example above, the ",(0,s.jsx)(t.code,{children:"JsonStringEnumConverter"})," will be used to serialize and deserialize the ",(0,s.jsx)(t.code,{children:"RpgClass"})," enum. The converter will convert the enum to and from a string so that the enum values are serialized as their names instead of their numeric values."]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);