"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[7942],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=s.createContext({}),m=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=m(e.components);return s.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(n),d=a,b=p["".concat(i,".").concat(d)]||p[d]||u[d]||o;return n?s.createElement(b,r(r({ref:t},c),{},{components:n})):s.createElement(b,r({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:a,r[1]=l;for(var m=2;m<o;m++)r[m]=n[m];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4080:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var s=n(7462),a=(n(7294),n(3905));const o={id:"assemblyClass",title:"Assembly",sidebar_position:1},r=void 0,l={unversionedId:"c-sharp/Advanced Concepts/Classes/assemblyClass",id:"c-sharp/Advanced Concepts/Classes/assemblyClass",title:"Assembly",description:"- Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application (in more simple terms: A chunk of (precompiled) code that can be executed by the .NET runtime environment. A .NET program consists of one or more assemblies)",source:"@site/docs/c-sharp/Advanced Concepts/Classes/AssemblyClass.md",sourceDirName:"c-sharp/Advanced Concepts/Classes",slug:"/c-sharp/Advanced Concepts/Classes/assemblyClass",permalink:"/LearningCollection/c-sharp/Advanced Concepts/Classes/assemblyClass",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/c-sharp/Advanced Concepts/Classes/AssemblyClass.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"assemblyClass",title:"Assembly",sidebar_position:1},sidebar:"finance",previous:{title:"Events",permalink:"/LearningCollection/c-sharp/Core Concepts/events"},next:{title:"ManualResetEvent",permalink:"/LearningCollection/c-sharp/Advanced Concepts/Classes/manResetEvent"}},i={},m=[{value:"Remarks",id:"remarks",level:2}],c={toc:m},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application (in more simple terms: A chunk of (precompiled) code that can be executed by the .NET runtime environment. A .NET program consists of one or more assemblies)"),(0,a.kt)("li",{parentName:"ul"},"The following code example shows how to obtain the currently executing assembly, create an instance of a type contained in that assembly, and invoke one of the type's methods with late binding. For this purpose, the code example defines a class named Example, with a method named SampleMethod",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The constructor of the class accepts an integer, which is used to compute the return value of the method"),(0,a.kt)("li",{parentName:"ul"},"The code example also demonstrates the use of the GetName method to obtain an AssemblyName object that can be used to parse the full name of the assembly"),(0,a.kt)("li",{parentName:"ul"},"The example displays the version number of the assembly, the CodeBase property, and the EntryPoint property")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'using System;\nusing System.Reflection;\nusing System.Security.Permissions;\n\n[assembly:AssemblyVersionAttribute("1.0.2000.0")]\n\npublic class Example\n{\n    private int factor;\n    public Example(int f)\n    {\n        factor = f;\n    }\n\n    public int SampleMethod(int x)\n    {\n        Console.WriteLine("\\nExample.SampleMethod({0}) executes.", x);\n        return x * factor;\n    }\n\n    public static void Main()\n    {\n        Assembly assem = typeof(Example).Assembly;\n\n        Console.WriteLine("Assembly Full Name:");\n        Console.WriteLine(assem.FullName);\n\n        // The AssemblyName type can be used to parse the full name.\n        AssemblyName assemName = assem.GetName();\n        Console.WriteLine("\\nName: {0}", assemName.Name);\n        Console.WriteLine("Version: {0}.{1}",\n            assemName.Version.Major, assemName.Version.Minor);\n\n        Console.WriteLine("\\nAssembly CodeBase:");\n        Console.WriteLine(assem.CodeBase);\n\n        // Create an object from the assembly, passing in the correct number\n        // and type of arguments for the constructor.\n        Object o = assem.CreateInstance("Example", false,\n            BindingFlags.ExactBinding,\n            null, new Object[] { 2 }, null, null);\n\n        // Make a late-bound call to an instance method of the object.\n        MethodInfo m = assem.GetType("Example").GetMethod("SampleMethod");\n        Object ret = m.Invoke(o, new Object[] { 42 });\n        Console.WriteLine("SampleMethod returned {0}.", ret);\n\n        Console.WriteLine("\\nAssembly entry point:");\n        Console.WriteLine(assem.EntryPoint);\n    }\n}\n\n/* This code example produces output similar to the following:\n\nAssembly Full Name:\nsource, Version=1.0.2000.0, Culture=neutral, PublicKeyToken=null\n\nName: source\nVersion: 1.0\n\nAssembly CodeBase:\nfile:///C:/sdtree/AssemblyClass/cs/source.exe\n\nExample.SampleMethod(42) executes.\nSampleMethod returned 84.\n\nAssembly entry point:\nVoid Main()\n */\n\n')),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use the Assembly class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types"),(0,a.kt)("li",{parentName:"ul"},"To load assemblies dynamically, the Assembly class provides the following static methods. Assemblies are loaded into the application domain where the load operation occurs.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'The recommended way to load assemblies is to use the Load method, which identifies the assembly to be loaded by its display name (for example, "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")'),(0,a.kt)("li",{parentName:"ul"},"The ReflectionOnlyLoad and ReflectionOnlyLoadFrom methods enable you to load an assembly for reflection, but not for execution. For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform"),(0,a.kt)("li",{parentName:"ul"},"The LoadFile and LoadFrom methods are provided for rare scenarios in which an assembly must be identified by path"))),(0,a.kt)("li",{parentName:"ul"},"To get an Assembly object for the currently executing assembly, use the GetExecutingAssembly method"),(0,a.kt)("li",{parentName:"ul"},"Many members of the Assembly class provide information about an assembly. For example:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The GetName method returns an AssemblyName object that provides access to the parts of the assembly display name"),(0,a.kt)("li",{parentName:"ul"},"The GetCustomAttributes method lists the attributes applied to the assembly"),(0,a.kt)("li",{parentName:"ul"},"The GetFiles method provides access to the files in the assembly manifest"),(0,a.kt)("li",{parentName:"ul"},"The GetManifestResourceNames method provides the names of the resources in the assembly manifest"))),(0,a.kt)("li",{parentName:"ul"},"The GetTypes method lists all the types in the assembly."),(0,a.kt)("li",{parentName:"ul"},"The GetExportedTypes method lists the types that are visible to callers outside the assembly."),(0,a.kt)("li",{parentName:"ul"},"The GetType method can be used to search for a particular type in the assembly."),(0,a.kt)("li",{parentName:"ul"},"The CreateInstance method can be used to search for and create instances of types in the assembly.")),(0,a.kt)("p",null,"Source: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly?view=netframework-4.7.2"},"Microsoft Docs")))}u.isMDXComponent=!0}}]);