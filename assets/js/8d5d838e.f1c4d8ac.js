"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[9914],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=o,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return t?a.createElement(h,r(r({ref:n},c),{},{components:t})):a.createElement(h,r({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[u]="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2894:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(7462),o=(t(7294),t(3905));const i={id:"describing-ui",title:"Describing the UI",sidebar_position:1},r=void 0,s={unversionedId:"Web/React/main-concepts/describing-ui",id:"Web/React/main-concepts/describing-ui",title:"Describing the UI",description:"UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, we\u2019ll learn to create, customize, and conditionally display React components.",source:"@site/docs/Web/React/main-concepts/describing-ui.md",sourceDirName:"Web/React/main-concepts",slug:"/Web/React/main-concepts/describing-ui",permalink:"/LearningCollection/Web/React/main-concepts/describing-ui",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Web/React/main-concepts/describing-ui.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"describing-ui",title:"Describing the UI",sidebar_position:1},sidebar:"finance",previous:{title:"Introduction",permalink:"/LearningCollection/Web/React/introduction"},next:{title:"Styling Components",permalink:"/LearningCollection/Web/React/main-concepts/stylingComponents"}},p={},l=[{value:"Components",id:"components",level:2},{value:"Components: UI building blocks",id:"components-ui-building-blocks",level:3},{value:"Defining a component",id:"defining-a-component",level:3},{value:"Using a component",id:"using-a-component",level:3},{value:"Components all the way down",id:"components-all-the-way-down",level:3},{value:"Writing Markup with JSX",id:"writing-markup-with-jsx",level:2},{value:"JSX: Putting markup into JavaScript",id:"jsx-putting-markup-into-javascript",level:3},{value:"The Rules of JSX",id:"the-rules-of-jsx",level:3},{value:"Return a single root element",id:"return-a-single-root-element",level:4},{value:"Close all the tags",id:"close-all-the-tags",level:4},{value:"camelCase for mostly everything",id:"camelcase-for-mostly-everything",level:4},{value:"JavaScript in JSX with Curly Braces",id:"javascript-in-jsx-with-curly-braces",level:2},{value:"Passing strings with quotes",id:"passing-strings-with-quotes",level:3},{value:"Using curly braces: A window into the JavaScript world",id:"using-curly-braces-a-window-into-the-javascript-world",level:3},{value:"Using \u201cdouble curlies\u201d: CSS and other objects in JSX",id:"using-double-curlies-css-and-other-objects-in-jsx",level:3},{value:"Passing Props to a Component",id:"passing-props-to-a-component",level:2},{value:"Familiar props",id:"familiar-props",level:3},{value:"Passing props to a component",id:"passing-props-to-a-component-1",level:3},{value:"Step 1: Pass props to the child component",id:"step-1-pass-props-to-the-child-component",level:4},{value:"Step 2: Read props inside the child component",id:"step-2-read-props-inside-the-child-component",level:4},{value:"Specifying a default value for a prop",id:"specifying-a-default-value-for-a-prop",level:3},{value:"Forwarding props with the JSX spread syntax",id:"forwarding-props-with-the-jsx-spread-syntax",level:3},{value:"Passing JSX as children",id:"passing-jsx-as-children",level:3},{value:"How props change over time",id:"how-props-change-over-time",level:3}],c={toc:l},u="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, we\u2019ll learn to create, customize, and conditionally display React components."),(0,o.kt)("h2",{id:"components"},"Components"),(0,o.kt)("p",null,"React applications are built from isolated pieces of UI called components. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a ",(0,o.kt)("inlineCode",{parentName:"p"},"Gallery")," component rendering three ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," components:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Profile() {\n  return (\n    <img\n      src="https://i.imgur.com/MK3eW3As.jpg"\n      alt="Katherine Johnson"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n')),(0,o.kt)("h3",{id:"components-ui-building-blocks"},"Components: UI building blocks"),(0,o.kt)("p",null,"On the Web, HTML lets us create rich structured documents with its built-in set of tags like ",(0,o.kt)("inlineCode",{parentName:"p"},"<h1>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<li>"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<article>\n  <h1>My First Component</h1>\n  <ol>\n    <li>Components: UI Building Blocks</li>\n    <li>Defining a Component</li>\n    <li>Using a Component</li>\n  </ol>\n</article>\n")),(0,o.kt)("p",null,"This markup represents this article ",(0,o.kt)("inlineCode",{parentName:"p"},"<article>"),", its heading ",(0,o.kt)("inlineCode",{parentName:"p"},"<h1>"),", and an (abbreviated) table of contents as an ordered list ",(0,o.kt)("inlineCode",{parentName:"p"},"<ol>"),". Markup like this, combined with CSS for style, and JavaScript for interactivity, lies behind every sidebar, avatar, modal, dropdown\u2014every piece of UI you see on the Web."),(0,o.kt)("p",null,"React lets you combine your markup, CSS, and JavaScript into custom \u201ccomponents\u201d, reusable UI elements for your app. The table of contents code you saw above could be turned into a ",(0,o.kt)("inlineCode",{parentName:"p"},"<TableOfContents />")," component you could render on every page. Under the hood, it still uses the same HTML tags like ",(0,o.kt)("inlineCode",{parentName:"p"},"<article>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<h1>"),", etc."),(0,o.kt)("p",null,"Just like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you\u2019re reading is made out of React components:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<PageLayout>\n  <NavigationHeader>\n    <SearchBar />\n    <Link to="/docs">Docs</Link>\n  </NavigationHeader>\n  <Sidebar />\n  <PageContent>\n    <TableOfContents />\n    <DocumentationText />\n  </PageContent>\n</PageLayout>\n')),(0,o.kt)("p",null,"As your project grows, you will notice that many of your designs can be composed by reusing components you already wrote, speeding up your development. Our table of contents above could be added to any screen with ",(0,o.kt)("inlineCode",{parentName:"p"},"<TableOfContents />!")," You can even jumpstart your project with the thousands of components shared by the React open source community like ",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/"},"Chakra UI")," and ",(0,o.kt)("a",{parentName:"p",href:"https://material-ui.com/"},"Material UI"),"."),(0,o.kt)("h3",{id:"defining-a-component"},"Defining a component"),(0,o.kt)("p",null,"A React component is a JavaScript function that you can sprinkle with markup. Here\u2019s what that looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function Profile() {\n  return (\n    <img\n      src="https://i.imgur.com/MK3eW3Am.jpg"\n      alt="Katherine Johnson"\n    />\n  )\n}\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"React components are regular JavaScript functions, but their names must start with a capital letter or they won\u2019t work!")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"export default")," prefix is a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/docs/web/javascript/reference/statements/export"},"standard JavaScript syntax")," (not specific to React). It lets you mark the main function in a file so that you can later import it from other files."),(0,o.kt)("p",null,"Return statements can be written all on one line, as in this component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'return <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />;\n')),(0,o.kt)("p",null,"But if your markup isn\u2019t all on the same line as the ",(0,o.kt)("inlineCode",{parentName:"p"},"return")," keyword, you must wrap it in a pair of parentheses:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'return (\n  <div>\n    <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />\n  </div>\n);\n')),(0,o.kt)("h3",{id:"using-a-component"},"Using a component"),(0,o.kt)("p",null,"Now that you\u2019ve defined your ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," component, you can nest it inside other components. For example, you can export a ",(0,o.kt)("inlineCode",{parentName:"p"},"Gallery")," component that uses multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," components:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Profile() {\n  return (\n    <img\n      src="https://i.imgur.com/MK3eW3As.jpg"\n      alt="Katherine Johnson"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n')),(0,o.kt)("p",null,"Because the ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," components are rendered inside ",(0,o.kt)("inlineCode",{parentName:"p"},"Gallery")," we can say that ",(0,o.kt)("inlineCode",{parentName:"p"},"Gallery")," is a parent component, rendering each ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," as a \u201cchild\u201d. This is part of the magic of React: you can define a component once, and then use it in as many places and as many times as you like."),(0,o.kt)("h3",{id:"components-all-the-way-down"},"Components all the way down"),(0,o.kt)("p",null,"Your React application begins at a \u201croot\u201d component. Usually, it is created automatically when you start a new project. If you use the framework ",(0,o.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js"),", the root component is defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"pages/index.js"),"."),(0,o.kt)("p",null,"Most React apps use components all the way down. This means that you won\u2019t only use components for reusable pieces like buttons, but also for larger pieces like sidebars, lists, and ultimately, complete pages! Components are a handy way to organize UI code and markup, even if some of them are only used once."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://react.dev/learn/start-a-new-react-project"},"React-based frameworks")," take this a step further. Instead of using an empty HTML file and letting React \u201ctake over\u201d managing the page with JavaScript, they also generate the HTML automatically from your React components. This allows your app to show some content before the JavaScript code loads."),(0,o.kt)("p",null,"Still, many websites only use React to ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page"},"add interactivity to existing HTML pages"),". They have many root components instead of a single one for the entire page. You can use as much\u2014or as little\u2014React as you need."),(0,o.kt)("h2",{id:"writing-markup-with-jsx"},"Writing Markup with JSX"),(0,o.kt)("p",null,"JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it."),(0,o.kt)("h3",{id:"jsx-putting-markup-into-javascript"},"JSX: Putting markup into JavaScript"),(0,o.kt)("p",null,"The Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript\u2014often in separate files! Content was marked up inside HTML while the page\u2019s logic lived separately in JavaScript."),(0,o.kt)("p",null,"But as the Web became more interactive, logic increasingly determined content. JavaScript was in charge of the HTML! This is why in React, rendering logic and markup live together in the same place\u2014components."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"JSX and React are two separate things. They\u2019re often used together, but you can ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#whats-a-jsx-transform"},"use them independently")," of each other. JSX is a syntax extension, while React is a JavaScript library.")),(0,o.kt)("h3",{id:"the-rules-of-jsx"},"The Rules of JSX"),(0,o.kt)("h4",{id:"return-a-single-root-element"},"Return a single root element"),(0,o.kt)("p",null,"To return multiple elements from a component, wrap them with a single parent tag. For example, we can use what is called a ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react/Fragment"},"Fragment"),". Fragments let you group things without leaving any trace in the browser HTML tree:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{1,11}","{1,11}":!0},'<>\n  <h1>Hedy Lamarr\'s Todos</h1>\n  <img \n    src="https://i.imgur.com/yXOvdOSs.jpg" \n    alt="Hedy Lamarr" \n    class="photo"\n  >\n  <ul>\n    ...\n  </ul>\n</>\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"JSX looks like HTML, but under the hood it is transformed into plain JavaScript objects. You can\u2019t return two objects from a function without wrapping them into an array. This explains why you also can\u2019t return two JSX tags without wrapping them into another tag or a Fragment.")),(0,o.kt)("h4",{id:"close-all-the-tags"},"Close all the tags"),(0,o.kt)("p",null,"JSX requires tags to be explicitly closed: self-closing tags like ",(0,o.kt)("inlineCode",{parentName:"p"},"<img>")," must become ",(0,o.kt)("inlineCode",{parentName:"p"},"<img />"),", and wrapping tags like ",(0,o.kt)("inlineCode",{parentName:"p"},"<li>oranges")," must be written as ",(0,o.kt)("inlineCode",{parentName:"p"},"<li>oranges</li>"),"."),(0,o.kt)("h4",{id:"camelcase-for-mostly-everything"},"camelCase for mostly everything"),(0,o.kt)("p",null,"JSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can\u2019t contain dashes or be reserved words like ",(0,o.kt)("inlineCode",{parentName:"p"},"class"),"."),(0,o.kt)("p",null,"This is why, in React, many HTML and SVG attributes are written in camelCase. For example, instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"stroke-width")," you use ",(0,o.kt)("inlineCode",{parentName:"p"},"strokeWidth"),". Since ",(0,o.kt)("inlineCode",{parentName:"p"},"class")," is a reserved word, in React you write ",(0,o.kt)("inlineCode",{parentName:"p"},"className")," instead, named after the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Element/className"},"corresponding DOM property"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{4}","{4}":!0},'<img \n  src="https://i.imgur.com/yXOvdOSs.jpg" \n  alt="Hedy Lamarr" \n  className="photo"\n/>\n')),(0,o.kt)("p",null,"You can find all these attributes in the ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react-dom/components/common"},"list of DOM component props"),"."),(0,o.kt)("h2",{id:"javascript-in-jsx-with-curly-braces"},"JavaScript in JSX with Curly Braces"),(0,o.kt)("p",null,"JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript."),(0,o.kt)("h3",{id:"passing-strings-with-quotes"},"Passing strings with quotes"),(0,o.kt)("p",null,"When you want to pass a string attribute to JSX, you put it in single or double quotes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function Avatar() {\n  return (\n    <img\n      className="avatar"\n      src="https://i.imgur.com/7vQD0fPs.jpg"\n      alt="Gregorio Y. Zara"\n    />\n  );\n}\n')),(0,o.kt)("p",null,"But what if you want to dynamically specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"alt")," text? You could use a value from JavaScript by replacing ",(0,o.kt)("inlineCode",{parentName:"p"},'"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"')," with ",(0,o.kt)("inlineCode",{parentName:"p"},"{")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"}"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export default function Avatar() {\n  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';\n  const description = 'Gregorio Y. Zara';\n  return (\n    <img\n      className=\"avatar\"\n      src={avatar}\n      alt={description}\n    />\n  );\n}\n")),(0,o.kt)("h3",{id:"using-curly-braces-a-window-into-the-javascript-world"},"Using curly braces: A window into the JavaScript world"),(0,o.kt)("p",null,"JSX is a special way of writing JavaScript. That means it\u2019s possible to use JavaScript inside it\u2014with curly braces ",(0,o.kt)("inlineCode",{parentName:"p"},"{ }"),". The example below first declares a name for the scientist, name, then embeds it with curly braces inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"<h1>"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export default function TodoList() {\n  const name = 'Gregorio Y. Zara';\n  return (\n    <h1>{name}'s To Do List</h1>\n  );\n}\n")),(0,o.kt)("p",null,"Any JavaScript expression will work between curly braces, including function calls like ",(0,o.kt)("inlineCode",{parentName:"p"},"formatDate()"),"."),(0,o.kt)("h3",{id:"using-double-curlies-css-and-other-objects-in-jsx"},"Using \u201cdouble curlies\u201d: CSS and other objects in JSX"),(0,o.kt)("p",null,"In addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like ",(0,o.kt)("inlineCode",{parentName:"p"},'{ name: "Hedy Lamarr", inventions: 5 }'),". Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: ",(0,o.kt)("inlineCode",{parentName:"p"},'person={{ name: "Hedy Lamarr", inventions: 5 }}'),"."),(0,o.kt)("p",null,"You may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," attribute:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export default function TodoList() {\n  return (\n    <ul style={{\n      backgroundColor: 'black',\n      color: 'pink'\n    }}>\n      <li>Improve the videophone</li>\n      <li>Prepare aeronautics lectures</li>\n      <li>Work on the alcohol-fuelled engine</li>\n    </ul>\n  );\n}\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Inline ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," properties are written in camelCase. For example, HTML ",(0,o.kt)("inlineCode",{parentName:"p"},'<ul style="background-color: black">')," would be written as ",(0,o.kt)("inlineCode",{parentName:"p"},"<ul style={{ backgroundColor: 'black' }}>")," in your component.")),(0,o.kt)("h2",{id:"passing-props-to-a-component"},"Passing Props to a Component"),(0,o.kt)("p",null,"React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions."),(0,o.kt)("h3",{id:"familiar-props"},"Familiar props"),(0,o.kt)("p",null,"Props are the information that you pass to a JSX tag. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"className"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"src"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"alt"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"width"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"height")," are some of the props you can pass to an ",(0,o.kt)("inlineCode",{parentName:"p"},"<img>"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Avatar() {\n  return (\n    <img\n      className="avatar"\n      src="https://i.imgur.com/1bX5QH6.jpg"\n      alt="Lin Lanying"\n      width={100}\n      height={100}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Avatar />\n  );\n}\n')),(0,o.kt)("p",null,"The props you can pass to an ",(0,o.kt)("inlineCode",{parentName:"p"},"<img>")," tag are predefined (ReactDOM conforms to ",(0,o.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/html52/semantics-embedded-content.html#the-img-element"},"the HTML standard"),"). But you can pass any props to your own components, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<Avatar>"),", to customize them."),(0,o.kt)("h3",{id:"passing-props-to-a-component-1"},"Passing props to a component"),(0,o.kt)("p",null,"In this code, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," component isn\u2019t passing any props to its child component, ",(0,o.kt)("inlineCode",{parentName:"p"},"Avatar"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export default function Profile() {\n  return (\n    <Avatar />\n  );\n}\n")),(0,o.kt)("p",null,"You can give ",(0,o.kt)("inlineCode",{parentName:"p"},"Avatar")," some props in two steps."),(0,o.kt)("h4",{id:"step-1-pass-props-to-the-child-component"},"Step 1: Pass props to the child component"),(0,o.kt)("p",null,"First, pass some props to ",(0,o.kt)("inlineCode",{parentName:"p"},"Avatar"),". For example, let\u2019s pass two props: ",(0,o.kt)("inlineCode",{parentName:"p"},"person")," (an object), and ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," (a number):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export default function Profile() {\n  return (\n    <Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    />\n  );\n}\n")),(0,o.kt)("h4",{id:"step-2-read-props-inside-the-child-component"},"Step 2: Read props inside the child component"),(0,o.kt)("p",null,"You can read these props by adding them to the function signature of ",(0,o.kt)("inlineCode",{parentName:"p"},"Avatar"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function Avatar({ person, size }) {\n  // person and size are available here\n}\n")),(0,o.kt)("p",null,"Add some logic to ",(0,o.kt)("inlineCode",{parentName:"p"},"Avatar")," that uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"person")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," props for rendering, and you\u2019re done. Now you can configure ",(0,o.kt)("inlineCode",{parentName:"p"},"Avatar")," to render in many different ways with different props."),(0,o.kt)("p",null,"You can think of props like \u201cknobs\u201d that you can adjust. They serve the same role as arguments serve for functions\u2014in fact, props are the only argument to your component! React component functions accept a single argument, a ",(0,o.kt)("inlineCode",{parentName:"p"},"props")," object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function Avatar(props) {\n  let person = props.person;\n  let size = props.size;\n  // ...\n}\n")),(0,o.kt)("p",null,"Usually you don\u2019t need the whole ",(0,o.kt)("inlineCode",{parentName:"p"},"props")," object itself, so you destructure it into individual props."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Don\u2019t miss the pair of ",(0,o.kt)("inlineCode",{parentName:"p"},"{")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"}")," curlies inside of ",(0,o.kt)("inlineCode",{parentName:"p"},"(")," and ",(0,o.kt)("inlineCode",{parentName:"p"},")")," when declaring props:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function Avatar({ person, size }) {\n  // ...\n}\n"))),(0,o.kt)("h3",{id:"specifying-a-default-value-for-a-prop"},"Specifying a default value for a prop"),(0,o.kt)("p",null,"If you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting ",(0,o.kt)("inlineCode",{parentName:"p"},"=")," and the default value right after the parameter:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function Avatar({ person, size = 100 }) {\n  // ...\n}\n")),(0,o.kt)("p",null,"Now, if ",(0,o.kt)("inlineCode",{parentName:"p"},"<Avatar person={...} />")," is rendered with no ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," prop, the ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," will be set to 100. The default value is only used if the ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," prop is missing or if you pass ",(0,o.kt)("inlineCode",{parentName:"p"},"size={undefined}"),". But if you pass ",(0,o.kt)("inlineCode",{parentName:"p"},"size={null}")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"size={0}"),", the default value will not be used."),(0,o.kt)("h3",{id:"forwarding-props-with-the-jsx-spread-syntax"},"Forwarding props with the JSX spread syntax"),(0,o.kt)("p",null,"Sometimes, passing props gets very repetitive:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Profile({ person, size, isSepia, thickBorder }) {\n  return (\n    <div className="card">\n      <Avatar\n        person={person}\n        size={size}\n        isSepia={isSepia}\n        thickBorder={thickBorder}\n      />\n    </div>\n  );\n}\n')),(0,o.kt)("p",null,"There\u2019s nothing wrong with repetitive code\u2014it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," does with ",(0,o.kt)("inlineCode",{parentName:"p"},"Avatar"),". Because they don\u2019t use any of their props directly, it can make sense to use a more concise \u201cspread\u201d syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Profile(props) {\n  return (\n    <div className="card">\n      <Avatar {...props} />\n    </div>\n  );\n}\n')),(0,o.kt)("p",null,"This forwards all of ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile"),"\u2019s props to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Avatar")," without listing each of their names. ",(0,o.kt)("strong",{parentName:"p"},"Use spread syntax with restraint.")," If you\u2019re using it in every other component, something is wrong. Often, it indicates that you should split your components and pass children as JSX. More on that next!"),(0,o.kt)("h3",{id:"passing-jsx-as-children"},"Passing JSX as children"),(0,o.kt)("p",null,"Sometimes you\u2019ll want to nest your own components the same way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<Card>\n  <Avatar />\n</Card>\n")),(0,o.kt)("p",null,"When you nest content inside a JSX tag, the parent component will receive that content in a prop called ",(0,o.kt)("inlineCode",{parentName:"p"},"children"),". For example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Card")," component below will receive a ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," prop set to ",(0,o.kt)("inlineCode",{parentName:"p"},"<Avatar />")," and render it in a wrapper div:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="app.js"',title:'"app.js"'},"import Avatar from './Avatar.js';\n\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{ \n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Avatar.js"',title:'"Avatar.js"'},"import { getImageUrl } from './utils.js';\n\nexport default function Avatar({ person, size }) {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="utils.js"',title:'"utils.js"'},"export function getImageUrl(person, size = 's') {\n  return (\n    'https://i.imgur.com/' +\n    person.imageId +\n    size +\n    '.jpg'\n  );\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Card")," component can wrap any nested content. It doesn\u2019t need to \u201cknow\u201d what\u2019s being rendered inside of it. You will see this flexible pattern in many places. You can think of a component with a ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," prop as having a \u201chole\u201d that can be \u201cfilled in\u201d by its parent components with arbitrary JSX. You will often use the ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," prop for visual wrappers: panels, grids, etc."),(0,o.kt)("h3",{id:"how-props-change-over-time"},"How props change over time"),(0,o.kt)("p",null,"A component may receive different props over time. Props reflect a component\u2019s data at any point in time, rather than only in the beginning. However, props are ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Immutable_object"},"immutable"),"\u2014a term from computer science meaning \u201cunchangeable\u201d. When a component needs to change its props (for example, in response to a user interaction or new data), it will have to \u201cask\u201d its parent component to pass it different props\u2014a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Don\u2019t try to \u201cchange props\u201d. When you need to respond to the user input (like changing the selected color), you will need to \u201cset state\u201d.")))}m.isMDXComponent=!0}}]);