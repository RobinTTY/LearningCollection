"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4619],{4382:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"web/typescript/advanced-concepts/discriminated-unions","title":"Discriminated Unions","description":"If you have a class with a literal member (e.g. string literal) then you can use that property to discriminate between union members.","source":"@site/docs/web/typescript/advanced-concepts/discriminated-unions.md","sourceDirName":"web/typescript/advanced-concepts","slug":"/web/typescript/advanced-concepts/discriminated-unions","permalink":"/LearningCollection/web/typescript/advanced-concepts/discriminated-unions","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/advanced-concepts/discriminated-unions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"discriminated-unions","title":"Discriminated Unions","sidebar_position":3},"sidebar":"docs","previous":{"title":"Type Guards","permalink":"/LearningCollection/web/typescript/advanced-concepts/type-guards"},"next":{"title":"Index Signatures","permalink":"/LearningCollection/web/typescript/advanced-concepts/index-signatures"}}');var s=t(74848),r=t(28453);const a={id:"discriminated-unions",title:"Discriminated Unions",sidebar_position:3},c=void 0,o={},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"If you have a class with a literal member (e.g. string literal) then you can use that property to discriminate between union members."}),"\n",(0,s.jsxs)(n.p,{children:["As an example consider the union of a ",(0,s.jsx)(n.code,{children:"Square"})," and ",(0,s.jsx)(n.code,{children:"Rectangle"}),", here we have a member ",(0,s.jsx)(n.code,{children:"kind"})," that exists on both union members and is of a particular literal type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'interface Square {\n  kind: "square";\n  size: number;\n}\n\ninterface Rectangle {\n  kind: "rectangle";\n  width: number;\n  height: number;\n}\n\ntype Shape = Square | Rectangle;\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you use a type guard style check (==, ===, !=, !==) or switch on the discriminant property (here ",(0,s.jsx)(n.code,{children:"kind"}),") TypeScript will realize that the object must be of the type that has that specific literal and do a type narrowing for you:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'function area(s: Shape) {\n  if (s.kind === "square") {\n    // Now TypeScript *knows* that `s` must be a square\n    return s.size * s.size;\n  } else {\n    // Wasn\'t a square? So TypeScript will figure out that it must be a Rectangle\n    return s.width * s.height;\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);