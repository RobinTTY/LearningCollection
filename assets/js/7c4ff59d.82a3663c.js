"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8751],{7979:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>a});var s=t(5893),o=t(1151);const i={id:"notesOnMongoDB",title:"Notes on MongoDB",sidebar_position:7},d=void 0,r={id:"databases/mongodb/m220n-mongodb-for-dotnet-developers/notesOnMongoDB",title:"Notes on MongoDB",description:"ObjectId",source:"@site/docs/databases/mongodb/m220n-mongodb-for-dotnet-developers/ObjectId, BsonId, BsonRepresentation and BsonElement.md",sourceDirName:"databases/mongodb/m220n-mongodb-for-dotnet-developers",slug:"/databases/mongodb/m220n-mongodb-for-dotnet-developers/notesOnMongoDB",permalink:"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/notesOnMongoDB",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/databases/mongodb/m220n-mongodb-for-dotnet-developers/ObjectId, BsonId, BsonRepresentation and BsonElement.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"notesOnMongoDB",title:"Notes on MongoDB",sidebar_position:7},sidebar:"docs",previous:{title:"Resiliency",permalink:"/LearningCollection/databases/mongodb/m220n-mongodb-for-dotnet-developers/resiliency"},next:{title:"Tags",permalink:"/LearningCollection/tools/git/tags"}},l={},a=[{value:"ObjectId",id:"objectid",level:2},{value:"The [BsonId] attribute",id:"the-bsonid-attribute",level:2},{value:"The [BsonRepresentation] attribute",id:"the-bsonrepresentation-attribute",level:2},{value:"The [BsonElement] attribute",id:"the-bsonelement-attribute",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"objectid",children:"ObjectId"}),"\n",(0,s.jsx)(n.p,{children:'If you have a column named Id, id or _id, in your strongly typed TDocument class (the item type in a collection), then a column named "_id" will be generated in Mongo. It will also create an index for that column. You get a duplicate key error exception if trying to insert an item with a key that already exists.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public ObjectId Id { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:'will use the type generator for ObjectId and it will look like _id: ObjectId("57ade20771e59f422cc652d9").'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public Guid _id { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:'will use the Guid generator to produce something like "_id" : BinData(3,"s2Td7qdghkywlfMSWMPzaA==").'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public int Id { get; set; }\npublic string id { get; set; }\npublic byte[] _id { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"will also be index columns using the defaults for each type if not specified."}),"\n",(0,s.jsx)(n.p,{children:"The Id property is required for mapping the Common Language Runtime (CLR) object to the MongoDB collection."}),"\n",(0,s.jsx)(n.h2,{id:"the-bsonid-attribute",children:"The [BsonId] attribute"}),"\n",(0,s.jsx)(n.p,{children:"Designates this property as the document's primary key.\nGives you the flexibility of naming that index any way you want."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"[BsonId] public Guid SmthElseOtherThanId { get; set; }\n[BsonId] public string StringId { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"will be indexes."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public Guid SmthElseOtherThanId { get; set; }\npublic string StringId { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"won't be indexes. MongoDB will still use _id internally."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public ObjectId SmthElseOtherThanId {get; set;}\n"})}),"\n",(0,s.jsx)(n.p,{children:"with no [BsonId] decoration also won't be an index column."}),"\n",(0,s.jsx)(n.h2,{id:"the-bsonrepresentation-attribute",children:"The [BsonRepresentation] attribute"}),"\n",(0,s.jsx)(n.p,{children:"Lets you juggle with the Mongo type vs the internal .Net type, if there's a conversion between them."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"[BsonId]\n[BsonRepresentation(BsonType.ObjectId)]\npublic ObjectId Id { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"is identical to"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"public ObjectId Id { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is different however:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"[BsonId]\n[BsonRepresentation(BsonType.ObjectId)]\npublic string Id { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"Mongo will auto generate object ids by itself, however you will be able to use strings in .net, filter queries etc., because there is a conversion between object id and string."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"[BsonId]\n[BsonRepresentation(BsonType.ObjectId)]\npublic byte[] Id { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"[BsonId]\n[BsonRepresentation(BsonType.ObjectId)]\npublic int Id { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"will fail with a ObjectId not a valid representation for a ByteArraySerializer / Int32Serializer message."}),"\n",(0,s.jsx)(n.p,{children:"But"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"[BsonId]\n[BsonRepresentation(BsonType.String)]\npublic int StringId { get; set; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"will be just fine."}),"\n",(0,s.jsx)(n.h2,{id:"the-bsonelement-attribute",children:"The [BsonElement] attribute"}),"\n",(0,s.jsxs)(n.p,{children:["If we want to use a different property name than what is used in the database we can use the ",(0,s.jsx)(n.code,{children:"[BsonElement]"})," attribute:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'public class MyClass\n{\n    [BsonElement("sp")]\n    public string SomeProperty { get; set; }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>d});var s=t(7294);const o={},i=s.createContext(o);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);