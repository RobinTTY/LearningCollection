"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[3536],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,y=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(y,a(a({ref:t},p),{},{components:n})):r.createElement(y,a({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7756:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={id:"intersections",title:"Intersection Types",sidebar_position:1},a=void 0,s={unversionedId:"web/typescript/advanced-concepts/intersections",id:"web/typescript/advanced-concepts/intersections",title:"Intersection Types",description:"interfaces allowed us to build up new types from other types by extending them. TypeScript provides another construct called intersection types that is mainly used to combine existing object types.",source:"@site/docs/web/typescript/advanced-concepts/intersections.md",sourceDirName:"web/typescript/advanced-concepts",slug:"/web/typescript/advanced-concepts/intersections",permalink:"/LearningCollection/web/typescript/advanced-concepts/intersections",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/advanced-concepts/intersections.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"intersections",title:"Intersection Types",sidebar_position:1},sidebar:"finance",previous:{title:"Type Assertions",permalink:"/LearningCollection/web/typescript/core-concepts/type-assertions"},next:{title:"Type Guards",permalink:"/LearningCollection/web/typescript/advanced-concepts/type-guards"}},c={},l=[{value:"Intersection of Unions",id:"intersection-of-unions",level:2},{value:"Interfaces vs. Intersections",id:"interfaces-vs-intersections",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"interfaces")," allowed us to build up new types from other types by extending them. TypeScript provides another construct called intersection types that is mainly used to ",(0,o.kt)("strong",{parentName:"p"},"combine existing object types"),"."),(0,o.kt)("p",null,"An intersection type is defined using the ",(0,o.kt)("inlineCode",{parentName:"p"},"&")," operator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Colorful {\n  color: string;\n}\ninterface Circle {\n  radius: number;\n}\n\ntype ColorfulCircle = Colorful & Circle;\n")),(0,o.kt)("p",null,"Here, we\u2019ve intersected ",(0,o.kt)("inlineCode",{parentName:"p"},"Colorful")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Circle")," to produce a new type that has all the members of ",(0,o.kt)("inlineCode",{parentName:"p"},"Colorful")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Circle"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function draw(circle: Colorful & Circle) {\n  console.log(`Color was ${circle.color}`);\n  console.log(`Radius was ${circle.radius}`);\n}\n\n// okay\ndraw({ color: \"blue\", radius: 42 });\n\n// Argument of type '{ color: string; raidus: number; }' is not\n// assignable to parameter of type 'Colorful & Circle'.\ndraw({ color: \"red\", raidus: 42 });\n")),(0,o.kt)("h2",{id:"intersection-of-unions"},"Intersection of Unions"),(0,o.kt)("p",null,"We can also intersect unions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type Combinable = string | number;\ntype Numeric = number | boolean;\n\n// Universal is of type number since that is the only possible intersection of the two unions\ntype Universal = Combinable & Numeric;\n")),(0,o.kt)("h2",{id:"interfaces-vs-intersections"},"Interfaces vs. Intersections"),(0,o.kt)("p",null,"With interfaces, we could use an ",(0,o.kt)("inlineCode",{parentName:"p"},"extends")," clause to extend from other types, and we were able to do something similar with intersections and name the result with a type alias. The principle ",(0,o.kt)("strong",{parentName:"p"},"difference between the two is how conflicts are handled"),", and that difference is typically one of the main reasons why you\u2019d pick one over the other between an interface and a type alias of an intersection type."))}d.isMDXComponent=!0}}]);