"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[8295],{97940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"web/lit/intro","title":"Introduction","description":"Lit is a simple library for building fast, lightweight web components. At Lit\'s core is a boilerplate-killing component base class that provides reactive state, scoped styles, and a declarative template system that\'s tiny, fast and expressive.","source":"@site/docs/web/lit/introduction.md","sourceDirName":"web/lit","slug":"/web/lit/intro","permalink":"/LearningCollection/web/lit/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/lit/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"intro","title":"Introduction","sidebar_position":1},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/LearningCollection/web/react/related-libraries/mantine/intro"},"next":{"title":"Components","permalink":"/LearningCollection/web/lit/components"}}');var s=n(74848),o=n(28453);const a={id:"intro",title:"Introduction",sidebar_position:1},r=void 0,l={},c=[{value:"Use Cases",id:"use-cases",level:2},{value:"Important Concepts",id:"important-concepts",level:2},{value:"Advantages",id:"advantages",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Lit is a simple library for building fast, lightweight web components. At Lit's core is a boilerplate-killing component base class that provides reactive state, scoped styles, and a declarative template system that's tiny, fast and expressive."}),"\n",(0,s.jsx)(t.p,{children:"Lit components are web components, so they act like regular HTML elements. You can add them to a page with simple HTML tags, like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:"<my-element></my-element>\n"})}),"\n",(0,s.jsx)(t.p,{children:"Each Lit component is a self-contained unit of UI, assembled from smaller building blocks: standard HTML elements and other web components. In turn, each Lit component is itself a building block that can be used\u2013within an HTML document, another web component, or a framework component\u2013to build larger and more complex interfaces."}),"\n",(0,s.jsx)(t.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsx)(t.p,{children:"You can build just about any kind of web UI with Lit. Web components have the superpower of interoperability: natively supported by browsers, web components can be used in any HTML environment, with any framework or none at all."}),"\n",(0,s.jsxs)(t.p,{children:["This makes Lit an ideal choice for developing ",(0,s.jsx)(t.strong,{children:"shareable components or design systems"}),". Lit components can be used across multiple apps and sites, even if those apps and sites are built on a variety of front-end stacks. Site developers using Lit components don\u2019t need to write or even see any Lit code; they can just use the components the same way they do built-in HTML elements."]}),"\n",(0,s.jsxs)(t.p,{children:["Of course, you can also build ",(0,s.jsx)(t.strong,{children:"highly interactive, feature-rich apps"})," out of Lit components, just as you would with a framework like React or Vue. Lit\u2019s capabilities and developer experience are comparable to these popular alternatives, but Lit minimizes lock-in, maximizes flexibility and promotes maintainability by embracing the browser\u2019s native component model."]}),"\n",(0,s.jsx)(t.h2,{id:"important-concepts",children:"Important Concepts"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Lit's main feature is the ",(0,s.jsx)(t.code,{children:"LitElement"})," base class, a convenient and versatile extension of the native ",(0,s.jsx)(t.code,{children:"HTMLElement"}),". You extend from it to define your own components."]}),"\n",(0,s.jsxs)(t.li,{children:["Lit\u2019s ",(0,s.jsx)(t.a,{href:"https://lit.dev/docs/templates/overview/",children:"expressive, declarative templates"})," (utilizing JavaScript tagged template literals) make it easy to describe how a component should be rendered."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://lit.dev/docs/components/properties/",children:"Reactive properties"})," represent a component\u2019s public API and/or internal state; your component automatically re-renders whenever a reactive property changes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://lit.dev/docs/components/styles",children:"Styles"})," are scoped by default, keeping your CSS selectors simple and ensuring that your component\u2019s styling won\u2019t pollute (or be polluted by) the surrounding context."]}),"\n",(0,s.jsx)(t.li,{children:"Lit works great in vanilla JavaScript, or you can use TypeScript for even better ergonomics by using decorators and type declarations."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Lit doesn\u2019t require compilation or building during development, so it can be used virtually tool-free if you prefer. First-class ",(0,s.jsx)(t.a,{href:"https://lit.dev/docs/tools/development/#ide-plugins",children:"IDE support"})," (code-completion, linting, etc.) and ",(0,s.jsx)(t.a,{href:"https://lit.dev/docs/tools/production/",children:"tooling for production"})," (localization, template minification, etc.) are readily available."]}),"\n",(0,s.jsx)(t.h2,{id:"advantages",children:"Advantages"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Simple:"})," Building on top of the Web Components standards, Lit adds just what you need to be happy and productive: reactivity, declarative templates and a handful of thoughtful features to reduce boilerplate and make your job easier."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Fast:"})," Updates are fast, because Lit keeps track of your UI\u2019s dynamic parts and updates only those when the underlying state changes\u2013no need to rebuild a whole virtual tree and diff it with the current state of the DOM."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Leightweight:"})," Weighing in at around 5 KB (minified and compressed), Lit helps keep bundle sizes small and loading times short."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(96540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);