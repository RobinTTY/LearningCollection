"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[7980],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),b=o,h=p["".concat(l,".").concat(b)]||p[b]||d[b]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},1218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={id:"useCallback",title:"useCallback",sidebar_position:2},i=void 0,c={unversionedId:"web/react/hooks/advanced-hooks/useCallback",id:"web/react/hooks/advanced-hooks/useCallback",title:"useCallback",description:"The useCallback hook basically allows us to store a function across component executions. This allows us to avoid the re-creation of the function every time a component is re-executed. The return value of useCallback is a memoized callback (with it we can reuse the same function across executions).",source:"@site/docs/web/react/hooks/advanced-hooks/useCallback.md",sourceDirName:"web/react/hooks/advanced-hooks",slug:"/web/react/hooks/advanced-hooks/useCallback",permalink:"/LearningCollection/web/react/hooks/advanced-hooks/useCallback",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/react/hooks/advanced-hooks/useCallback.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"useCallback",title:"useCallback",sidebar_position:2},sidebar:"finance",previous:{title:"useImperativeHandle",permalink:"/LearningCollection/web/react/hooks/advanced-hooks/useImperativeHandle"},next:{title:"useMemo",permalink:"/LearningCollection/web/react/hooks/advanced-hooks/useMemo"}},l={},s=[{value:"Syntax",id:"syntax",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useCallback")," hook basically allows us to store a function across component executions. This allows us to avoid the re-creation of the function every time a component is re-executed. The return value of ",(0,o.kt)("inlineCode",{parentName:"p"},"useCallback")," is a ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Memoization"},"memoized")," callback (with it we can reuse the same function across executions)."),(0,o.kt)("h2",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// we wrap the function we want to memoize inside useCallback\nconst memoizedCallback = useCallback(() => {\n  doSomething(a, b);\n}, [a, b]);\n")),(0,o.kt)("p",null,"A new function instance will only be generated if any value of the variables inside the dependency array changes between re-renders. If nothing changes, ",(0,o.kt)("inlineCode",{parentName:"p"},"useCallback")," will just return the cached version of the function instance."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The array of dependencies is not passed as arguments to the callback. Conceptually, though, that\u2019s what they represent: every value referenced inside the callback should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.")))}d.isMDXComponent=!0}}]);