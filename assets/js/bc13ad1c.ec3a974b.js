"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4919],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),g=o,m=d["".concat(l,".").concat(g)]||d[g]||p[g]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9395:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={id:"usingTheDriver",title:"Using the Driver",sidebar_position:3},a=void 0,s={unversionedId:"Databases/MongoDB/M220N MongoDB for .NET Developers/usingTheDriver",id:"Databases/MongoDB/M220N MongoDB for .NET Developers/usingTheDriver",title:"Using the Driver",description:"mflix project structure",source:"@site/docs/Databases/MongoDB/M220N MongoDB for .NET Developers/Using the Driver.md",sourceDirName:"Databases/MongoDB/M220N MongoDB for .NET Developers",slug:"/Databases/MongoDB/M220N MongoDB for .NET Developers/usingTheDriver",permalink:"/LearningCollection/Databases/MongoDB/M220N MongoDB for .NET Developers/usingTheDriver",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Databases/MongoDB/M220N MongoDB for .NET Developers/Using the Driver.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"usingTheDriver",title:"Using the Driver",sidebar_position:3},sidebar:"mySidebar",previous:{title:"Getting Started",permalink:"/LearningCollection/Databases/MongoDB/M220N MongoDB for .NET Developers/gettingStarted"},next:{title:"User-Facing Backend",permalink:"/LearningCollection/Databases/MongoDB/M220N MongoDB for .NET Developers/userFacingBackend"}},l={},c=[{value:"mflix project structure",id:"mflix-project-structure",level:2},{value:"Approaches to working with data",id:"approaches-to-working-with-data",level:2},{value:"Async Programming Principles",id:"async-programming-principles",level:2},{value:"Synchronous",id:"synchronous",level:3},{value:"Asynchronous",id:"asynchronous",level:3},{value:"How to use the asynchronous model",id:"how-to-use-the-asynchronous-model",level:2},{value:"Synchronous",id:"synchronous-1",level:3},{value:"Asynchronous",id:"asynchronous-1",level:3},{value:"Asynchronous Repository Method",id:"asynchronous-repository-method",level:3},{value:"Using Projections with the driver",id:"using-projections-with-the-driver",level:2},{value:"Advanced Read Examples",id:"advanced-read-examples",level:2}],u={toc:c};function p(e){let{components:n,...i}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"mflix-project-structure"},"mflix project structure"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"project structure",src:t(1256).Z,width:"1359",height:"1440"})),(0,o.kt)("h2",{id:"approaches-to-working-with-data"},"Approaches to working with data"),(0,o.kt)("p",null,"The MongoDB driver supports many different approaches to working with your data. For instance you can read data in 4 different ways using the driver:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'// Using MQL as a string -> NOT TYPE SAFE\nvar filter = "{ price: { $gt: 400 } }";\nvar expensiveGuitars = guitarsCollection.Find(filter);\n\n// Using BsonDocument object -> NOT TYPE SAFE\nvar filter = new BsonDocument("price", new BsonDocument("$gt", 400));\nvar expensiveGuitars = guitarsCollection.Find(filter);\n\n// Using the Builders class -> Only field names NOT type safe\nvar builder = Builders<BsonDocument>.Filter;\nvar filter = builder.Gt("price", 400) & builder.Lt("price", 600);\nvar midrangeGuitars = guitarsCollection.Find(filter);\n\n// Using Mapping Classes and LINQ -> TPYE SAFE\nclass Guitar\n{\n    [BsonID]\n    public int Id { get; set; }\n    public string Make { get; set; }\n    public string Model { get; set; }\n    public double Price { get; set; }\n}\n\nvar guitars = new List<Guitar>();\nvar expensiveGuitars = guitars.Where(g => g.Price > 400).ToList();\n')),(0,o.kt)("h2",{id:"async-programming-principles"},"Async Programming Principles"),(0,o.kt)("h3",{id:"synchronous"},"Synchronous"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Request arrives"),(0,o.kt)("li",{parentName:"ul"},"Thread from Thread pool is assigned"),(0,o.kt)("li",{parentName:"ul"},"Thread makes request to external resource and waits for response"),(0,o.kt)("li",{parentName:"ul"},"Thread can not handle any other requests until response is received")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Synchronous",src:t(6183).Z,width:"1280",height:"720"})),(0,o.kt)("h3",{id:"asynchronous"},"Asynchronous"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Request arrives"),(0,o.kt)("li",{parentName:"ul"},"Thread from Thread pool is assigned"),(0,o.kt)("li",{parentName:"ul"},"Thread makes request to external resource and returns immediately to the thread pool"),(0,o.kt)("li",{parentName:"ul"},"When the external ressource returns the response, ASP.NET grabs any available thread to handle the call")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Asynchronous",src:t(580).Z,width:"1280",height:"720"})),(0,o.kt)("h2",{id:"how-to-use-the-asynchronous-model"},"How to use the asynchronous model"),(0,o.kt)("h3",{id:"synchronous-1"},"Synchronous"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"public ActionResult GetMovie(string movieId) { ... }\n")),(0,o.kt)("h3",{id:"asynchronous-1"},"Asynchronous"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"public async Task<ActionResult> GetMovieAsync(string movieId, CancellationToken cancellationToken = default) { ... }\n")),(0,o.kt)("h3",{id:"asynchronous-repository-method"},"Asynchronous Repository Method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"public async Task<Movie> FetchMovieAsync(string movieId, CancellationToken cancellationToken = default)\n{\n    return await _movies.Collection\n        .Find.(Builders<Movie>.Filter.Empty)\n        .FirstOrDefaultAsync(cancellationToken);\n}\n")),(0,o.kt)("h2",{id:"using-projections-with-the-driver"},"Using Projections with the driver"),(0,o.kt)("p",null,"To limit the amount of data that MongoDB sends to applications, you can include a projection document to specify or restrict fields to return. With the C# driver we do it like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"var projectionFilter = Builders<Movie>.Projection\n    .Include(m => m.Title)\n    .Include(m => m.Year)\n    .Include(m => m.Cast)\n    .Include(m => m.Id)\n")),(0,o.kt)("h2",{id:"advanced-read-examples"},"Advanced Read Examples"),(0,o.kt)("p",null,"Sorting first, limiting the results, and skipping so we get different results for each page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"var sortByYearDescending = Builders<Movie>.Sort.Ascending(m => m.Year);\nvar movies = await _moviesCollection.Find<Movie>(Builders<Movie>.Filter.Empty)\n    .Sort(sortByYearDescending)\n    .Limit(moviesPerPage)\n    .Skip(pageNumber * moviesPerPage)\n    .ToListAsync();\n")),(0,o.kt)("p",null,"Search for any match between two arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"public async Task<IReadOnlyList<MovieByCountryProjection>> GetMoviesByCountryAsync(\n    CancellationToken cancellationToken = default,\n    params string[] countries\n    )\n{\n    var project = Builders<Movie>.Projection.Include(movie => movie.Title);\n\n    return await _moviesCollection\n        .Find(Builders<Movie>.Filter.AnyIn(movie => movie.Countries, countries))\n        .SortByDescending(m => m.Title)\n        .Project<MovieByCountryProjection>(project)\n        .ToListAsync(cancellationToken);\n}\n")))}p.isMDXComponent=!0},1256:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/2021-06-14-51faf9252f9d104f6b3d7e074c1efad9.png"},580:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/asynchronous-e675343820c33fb2eb9be9de00efb08b.gif"},6183:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/synchronous-f973ecbcf513c34771b2028fc5c056eb.gif"}}]);