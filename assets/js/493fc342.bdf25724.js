"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[9693],{5520:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var t=o(4848),s=o(8453);const i={id:"stylingComponents",title:"Styling Components",sidebar_position:3},l=void 0,r={id:"web/react/core-concepts/stylingComponents",title:"Styling Components",description:"TODO: break out into multiple topics if necessary",source:"@site/docs/web/react/core-concepts/Styling Components.md",sourceDirName:"web/react/core-concepts",slug:"/web/react/core-concepts/stylingComponents",permalink:"/LearningCollection/web/react/core-concepts/stylingComponents",draft:!1,unlisted:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/react/core-concepts/Styling Components.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"stylingComponents",title:"Styling Components",sidebar_position:3},sidebar:"docs",previous:{title:"Keeping Components Pure",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/keeping-components-pure"},next:{title:"Functional vs Class Components",permalink:"/LearningCollection/web/react/core-concepts/functionalVsClassComponents"}},a={},c=[{value:"Dynamic styling",id:"dynamic-styling",level:2},{value:"Isolating styles to a component using Styled Components",id:"isolating-styles-to-a-component-using-styled-components",level:2},{value:"Using dynamic styles",id:"using-dynamic-styles",level:3},{value:"Isolating styles to a component using CSS Modules",id:"isolating-styles-to-a-component-using-css-modules",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.admonition,{type:"danger",children:(0,t.jsx)(e.p,{children:"TODO: break out into multiple topics if necessary"})}),"\n",(0,t.jsx)(e.h2,{id:"dynamic-styling",children:"Dynamic styling"}),"\n",(0,t.jsx)(e.p,{children:"We can dynamically apply styles to components using the className property:"}),"\n",(0,t.jsxs)(e.p,{children:["Styles in ",(0,t.jsx)(e.code,{children:"CourseInput.css"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-css",children:".form-control.invalid input {\n  border-color: red;\n  background: #ffd7d7;\n}\n\n.form-control.invalid label {\n  color: red;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Applying it inside the JSX through the className property:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'const CourseInput = (props) => {\n  ...\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={`form-control ${!isValid ? "invalid" : ""}`}>\n        <label>Course Goal</label>\n        <input type="text" onChange={goalInputChangeHandler} />\n      </div>\n      <Button type="submit">Add Goal</Button>\n    </form>\n  );\n};\n'})}),"\n",(0,t.jsx)(e.h2,{id:"isolating-styles-to-a-component-using-styled-components",children:"Isolating styles to a component using Styled Components"}),"\n",(0,t.jsxs)(e.p,{children:["The library ",(0,t.jsx)(e.a,{href:"https://github.com/styled-components/styled-components",children:"Styled Components"})," allows you to scope styles to a component. Instead of using a css file like this:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-css",children:".button {\n  font: inherit;\n  padding: 0.5rem 1.5rem;\n  border: 1px solid #8b005d;\n  color: white;\n  background: #8b005d;\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.26);\n  cursor: pointer;\n}\n\n.button:focus {\n  outline: none;\n}\n\n.button:hover,\n.button:active {\n  background: #ac0e77;\n  border-color: #ac0e77;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.26);\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"You just write you CSS directly in the js file:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import styled from "styled-components";\n\n// tagged template literal (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n// for details on how this works see: https://styled-components.com/docs\nconst Button = styled.button`\n  font: inherit;\n  padding: 0.5rem 1.5rem;\n  border: 1px solid #8b005d;\n  color: white;\n  background: #8b005d;\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.26);\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:hover,\n  &:active {\n    background: #ac0e77;\n    border-color: #ac0e77;\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.26);\n  }\n`;\n\n// old component syntax\n// const Button = props => {\n//   return (\n//     <button type={props.type} className="button" onClick={props.onClick}>\n//       {props.children}\n//     </button>\n//   );\n// };\n\nexport default Button;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"using-dynamic-styles",children:"Using dynamic styles"}),"\n",(0,t.jsx)(e.p,{children:'We can also dynamically apply styles based upon props on the elements with the "Styled Components" library. This is done like this:'}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'const FormControl = styled.div`\n  margin: 0.5rem 0;\n\n  & label {\n    font-weight: bold;\n    display: block;\n    margin-bottom: 0.5rem;\n    color: ${(props) => (props.invalid ? "red" : "black")};\n  }\n\n  & input {\n    display: block;\n    width: 100%;\n    border: 1px solid ${(props) => (props.invalid ? "red" : "#ccc")};\n    background: ${(props) => (props.invalid ? "#ffd7d7" : "transparent")};\n    font: inherit;\n    line-height: 1.5rem;\n    padding: 0 0.25rem;\n  }\n\n  & input:focus {\n    outline: none;\n    background: #fad0ec;\n    border-color: #8b005d;\n  }\n\n  // We don\'t need these anymore since we dynamically apply the styles above\n  // &.invalid input {\n  //   border-color: red;\n  //   background: #ffd7d7;\n  // }\n\n  // &.invalid label {\n  //   color: red;\n  // }\n`;\n\n// here we set the invalid prop\nconst CourseInput = (props) => {\n  ...\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <FormControl invalid={!isValid}>\n        <label>Course Goal</label>\n        <input type="text" onChange={goalInputChangeHandler} />\n      </FormControl>\n      <Button type="submit">Add Goal</Button>\n    </form>\n  );\n};\n'})}),"\n",(0,t.jsx)(e.h2,{id:"isolating-styles-to-a-component-using-css-modules",children:"Isolating styles to a component using CSS Modules"}),"\n",(0,t.jsxs)(e.p,{children:["Another way to scope styles to a component is to use ",(0,t.jsx)(e.a,{href:"https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/",children:"CSS Modules"}),". In this approach we keep our CSS in a separate file and import it into our JSX file in a special way:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'// We name our file with the .module extension\nimport styles from "./Button.module.css";\n\n// then we can use the style in our component\nconst Button = (props) => {\n  return (\n    <button type={props.type} className={styles.button} onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:"In the DOM the component now looks like this:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-html",children:'<button type="submit" class="Button_button__plK1F">Add Goal</button>\n'})}),"\n",(0,t.jsxs)(e.p,{children:["The style is applied through the class ",(0,t.jsx)(e.code,{children:"Button_button__plK1F"}),". The naming consists of ",(0,t.jsx)(e.code,{children:"<component-name>_<style-name>__<unique-hash>"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:['If you have styles in your CSS with names like "form-control" where a dash is in the name, you need to access them like this: ',(0,t.jsx)(e.code,{children:'styles["form-control"]'}),"."]}),"\n",(0,t.jsx)(e.p,{children:"Adding a conditional style can be done like this:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'return (\n  <form onSubmit={formSubmitHandler}>\n    <div\n      className={`${styles["form-control"]} ${!isValid ? styles.invalid : ""}`}\n    >\n      <label>Course Goal</label>\n      <input type="text" onChange={goalInputChangeHandler} />\n    </div>\n    <Button type="submit">Add Goal</Button>\n  </form>\n);\n'})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>l,x:()=>r});var t=o(6540);const s={},i=t.createContext(s);function l(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);