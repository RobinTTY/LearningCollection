"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[393],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=d(n),p=a,k=m["".concat(c,".").concat(p)]||m[p]||u[p]||o;return n?r.createElement(k,l(l({ref:t},s),{},{components:n})):r.createElement(k,l({ref:t},s))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},780:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return s},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={id:"adminBackend",title:"Admin Backend"},c=void 0,d={unversionedId:"Databases/MongoDB/M220N MongoDB for .NET Developers/adminBackend",id:"Databases/MongoDB/M220N MongoDB for .NET Developers/adminBackend",isDocsHomePage:!1,title:"Admin Backend",description:"Read Concerns",source:"@site/docs/Databases/MongoDB/M220N MongoDB for .NET Developers/Admin Backend.md",sourceDirName:"Databases/MongoDB/M220N MongoDB for .NET Developers",slug:"/Databases/MongoDB/M220N MongoDB for .NET Developers/adminBackend",permalink:"/LearningCollection/Databases/MongoDB/M220N MongoDB for .NET Developers/adminBackend",editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Databases/MongoDB/M220N MongoDB for .NET Developers/Admin Backend.md",version:"current",frontMatter:{id:"adminBackend",title:"Admin Backend"},sidebar:"mySidebar",previous:{title:"M001 - MongoDB Basics",permalink:"/LearningCollection/Databases/MongoDB/M001 MongoDB Basics/mongoDbBasics"},next:{title:"Getting Started",permalink:"/LearningCollection/Databases/MongoDB/M220N MongoDB for .NET Developers/gettingStarted"}},s=[{value:"Read Concerns",id:"read-concerns",children:[{value:"ReadConcern local",id:"readconcern-local",children:[]},{value:"ReadConcern majority",id:"readconcern-majority",children:[]},{value:"Other concern levels",id:"other-concern-levels",children:[]}]},{value:"Ticket: User Report (Using group method)",id:"ticket-user-report-using-group-method",children:[]},{value:"Bulk Writes",id:"bulk-writes",children:[{value:"Ordered Bulk Write",id:"ordered-bulk-write",children:[]},{value:"Unordered Bulk Write",id:"unordered-bulk-write",children:[]}]},{value:"Using BulkWriteAsync to update many documents in a specific way",id:"using-bulkwriteasync-to-update-many-documents-in-a-specific-way",children:[{value:"Example",id:"example",children:[]}]}],u={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"read-concerns"},"Read Concerns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'Represent different levels of "read isolation"',(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},'if data can be read by clients before it has been replicated to a majority of nodes it is considered a low level of "read isolation"'))),(0,o.kt)("li",{parentName:"ul"},"Can be used to specify a consistent view of the database")),(0,o.kt)("h3",{id:"readconcern-local"},"ReadConcern local"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The default read concern level"),(0,o.kt)("li",{parentName:"ul"},"Does not check that data has been replicated")),(0,o.kt)("h3",{id:"readconcern-majority"},"ReadConcern majority"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Allows more durable reads"),(0,o.kt)("li",{parentName:"ul"},"Only returns data that has been replicated to a majority of nodes (data might be more stale but more durable)"),(0,o.kt)("li",{parentName:"ul"},"Used for mission critical data")),(0,o.kt)("h3",{id:"other-concern-levels"},"Other concern levels"),(0,o.kt)("p",null,"There are more concern levels available. See ",(0,o.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/read-concern/"},"MongoDB Documentation"),"."),(0,o.kt)("h2",{id:"ticket-user-report-using-group-method"},"Ticket: User Report (Using group method)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Task:")," Build a pipeline that returns the 20 most frequent commenters on the MFlix site. You can do this by counting the number of occurrences of a user's email in the ",(0,o.kt)("inlineCode",{parentName:"p"},"comments")," collection. In addition, set the ReadConcern on the ","_","commentsCollection to ensure the most accurate reads occur."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C#"},"var result = await _commentsCollection\n  .WithReadConcern(ReadConcern.Majority)\n  .Aggregate()\n  .Group(x => x.Email, value => new ReportProjection { Id = value.Key, Count = value.Count() })\n  .Sort(Builders<ReportProjection>.Sort.Descending(c => c.Count))\n  .Limit(20)\n  .ToListAsync();\n\nreturn new TopCommentsProjection(result);\n")),(0,o.kt)("h2",{id:"bulk-writes"},"Bulk Writes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Bulk writes allow database clients to send multiple writes"),(0,o.kt)("li",{parentName:"ul"},"Can either be ordered or unordered"),(0,o.kt)("li",{parentName:"ul"},"More performant than executing a write operation for each document")),(0,o.kt)("h3",{id:"ordered-bulk-write"},"Ordered Bulk Write"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The default setting for bulk writes in MongoDB"),(0,o.kt)("li",{parentName:"ul"},"Executes writes sequentially",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Will end execution after first write failure"))),(0,o.kt)("li",{parentName:"ul"},"Replica will execute writes in the order they were sent")),(0,o.kt)("h3",{id:"unordered-bulk-write"},"Unordered Bulk Write"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Has to be specified with the flag { ordered: false }"),(0,o.kt)("li",{parentName:"ul"},"Executes writes in parallel")),(0,o.kt)("h2",{id:"using-bulkwriteasync-to-update-many-documents-in-a-specific-way"},"Using BulkWriteAsync to update many documents in a specific way"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"BulkWriteAsync")," method takes an ",(0,o.kt)("inlineCode",{parentName:"p"},"IEnumerable")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"WriteModel")," abstract class as input. There are several derived classes of ",(0,o.kt)("inlineCode",{parentName:"p"},"WriteModel"),", which allow you to perform different operations:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},"C# Driver"),(0,o.kt)("th",{parentName:"tr",align:"center"},"MongoDB Shell equivalent"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Operation"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"InsertOneModel"),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/"},"insertOne")),(0,o.kt)("td",{parentName:"tr",align:"center"},"Inserts the document")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"UpdateOneModel"),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/"},"updateOne")),(0,o.kt)("td",{parentName:"tr",align:"center"},"Updates one document that matches the filter definition")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"UpdateManyModel"),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/"},"updateMany")),(0,o.kt)("td",{parentName:"tr",align:"center"},"Updates all the documents that match the filter definition")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"ReplaceOneModel"),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://docs.mongodb.com/manual/reference/method/db.collection.replaceOne/"},"replaceOne")),(0,o.kt)("td",{parentName:"tr",align:"center"},"Replaces one document that matches the filter definition with the document provided")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"DeleteOneModel"),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/"},"deleteOne")),(0,o.kt)("td",{parentName:"tr",align:"center"},"Deletes one document that matches the filter definition")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"DeleteManyModel"),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://docs.mongodb.com/manual/reference/method/db.collection.deleteMany/"},"deleteMany")),(0,o.kt)("td",{parentName:"tr",align:"center"},"Deletes all the documents that match the filter definition")))),(0,o.kt)("p",null,"These operations can be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"BulkWriteAsync")," method and will be executed. They are equivalent to the MongoDB ",(0,o.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite"},"db.collection.bulkWrite()")," shell method."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C#"},"var requests = new List<ReplaceOneModel<Movie>>();\ndatePipelineResults.ForEach(transformedMovie => requests.Add(new ReplaceOneModel<Movie>(Builders<Movie>.Filter.Where(movie => movie.Id == transformedMovie.Id), transformedMovie)));\nvar bulkWriteDatesResult = await _moviesCollection.BulkWriteAsync(requests);\n")))}m.isMDXComponent=!0}}]);