"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[4462],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(r),f=a,h=m["".concat(s,".").concat(f)]||m[f]||p[f]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7317:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"semaphoreVsMutex",title:"Semaphore vs Mutex"},s=void 0,u={unversionedId:"General Concepts/semaphoreVsMutex",id:"General Concepts/semaphoreVsMutex",title:"Semaphore vs Mutex",description:"Mutex",source:"@site/docs/General Concepts/Semaphore vs Mutex.md",sourceDirName:"General Concepts",slug:"/General Concepts/semaphoreVsMutex",permalink:"/LearningCollection/General Concepts/semaphoreVsMutex",editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/General Concepts/Semaphore vs Mutex.md",tags:[],version:"current",frontMatter:{id:"semaphoreVsMutex",title:"Semaphore vs Mutex"},sidebar:"mySidebar",previous:{title:"Remote Procedure Call (RPC)",permalink:"/LearningCollection/General Concepts/rpc"},next:{title:"Stack vs Heap",permalink:"/LearningCollection/General Concepts/stackVsHeap"}},c=[{value:"Mutex",id:"mutex",children:[{value:"Mutual Exclusion Semaphores",id:"mutual-exclusion-semaphores",children:[],level:3}],level:2},{value:"Semaphore",id:"semaphore",children:[{value:"Binary Semaphore",id:"binary-semaphore",children:[],level:3}],level:2},{value:"Difference",id:"difference",children:[],level:2}],p={toc:c};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"mutex"},"Mutex"),(0,o.kt)("p",null,"A synchronization primitive that can also be used for interprocess synchronization."),(0,o.kt)("h3",{id:"mutual-exclusion-semaphores"},"Mutual Exclusion Semaphores"),(0,o.kt)("p",null,"Mutual Exclusion semaphores are used to protect shared resources (data structure, file, etc..)."),(0,o.kt)("p",null,'A Mutex semaphore is "owned" by the task that takes it. If Task B attempts to semGive a mutex currently held by Task A, Task B\'s call will return an error and fail.'),(0,o.kt)("p",null,"Mutexes always use the following sequence:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"SemTake"),(0,o.kt)("li",{parentName:"ul"},"Critical Section"),(0,o.kt)("li",{parentName:"ul"},"SemGive")),(0,o.kt)("h2",{id:"semaphore"},"Semaphore"),(0,o.kt)("p",null,"Limits the number of threads that can access a resource or pool of resources concurrently."),(0,o.kt)("h3",{id:"binary-semaphore"},"Binary Semaphore"),(0,o.kt)("p",null,"Binary Semaphore address a totally different question:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Task B is pended waiting for something to happen (a sensor being tripped for example)."),(0,o.kt)("li",{parentName:"ul"},"Sensor Trips and an Interrupt Service Routine runs. It needs to notify a task of the trip."),(0,o.kt)("li",{parentName:"ul"},"Task B should run and take appropriate actions for the sensor trip. Then go back to waiting.")),(0,o.kt)("p",null,"Note that with a binary semaphore, it is OK for B to take the semaphore and A to give it.\nAgain, a binary semaphore is NOT protecting a resource from access. The act of Giving and Taking a semaphore are fundamentally decoupled.\nIt typically makes little sense for the same task to so a give and a take on the same binary semaphore."),(0,o.kt)("h2",{id:"difference"},"Difference"),(0,o.kt)("p",null,'Mutex is for exclusive access to a resource. A Binary semaphore should be used for Synchronization (i.e. "Hey Someone! This occurred!").'))}m.isMDXComponent=!0}}]);