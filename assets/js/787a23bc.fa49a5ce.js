"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[1396],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=s(t),v=i,m=p["".concat(l,".").concat(v)]||p[v]||u[v]||o;return t?r.createElement(m,a(a({ref:n},c),{},{components:t})):r.createElement(m,a({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=v;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d[p]="string"==typeof e?e:i,a[1]=d;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},3550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const o={id:"events",title:"Events",sidebar_position:6},a=void 0,d={unversionedId:"c-sharp/Core Concepts/events",id:"c-sharp/Core Concepts/events",title:"Events",description:"- A mechanism for communication between objects",source:"@site/docs/c-sharp/Core Concepts/events.md",sourceDirName:"c-sharp/Core Concepts",slug:"/c-sharp/Core Concepts/events",permalink:"/LearningCollection/c-sharp/Core Concepts/events",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/c-sharp/Core Concepts/events.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"events",title:"Events",sidebar_position:6},sidebar:"finance",previous:{title:"Closures",permalink:"/LearningCollection/c-sharp/Core Concepts/closures"},next:{title:"Assembly",permalink:"/LearningCollection/c-sharp/Advanced Concepts/Classes/assemblyClass"}},l={},s=[{value:"Terms",id:"terms",level:2},{value:"Delegates",id:"delegates",level:2},{value:"What do we need to do?",id:"what-do-we-need-to-do",level:2},{value:"Example",id:"example",level:2},{value:"Example 2: Simplification",id:"example-2-simplification",level:2},{value:"Source",id:"source",level:2}],c={toc:s},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A mechanism for communication between objects"),(0,i.kt)("li",{parentName:"ul"},"Used in building ",(0,i.kt)("em",{parentName:"li"},"Loosely Coupled Applications")),(0,i.kt)("li",{parentName:"ul"},"Helps extending applications")),(0,i.kt)("h2",{id:"terms"},"Terms"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Event sender: called ",(0,i.kt)("strong",{parentName:"li"},"publisher")," or event sender"),(0,i.kt)("li",{parentName:"ul"},"Event receiver: called ",(0,i.kt)("strong",{parentName:"li"},"subscriber")," or event receiver")),(0,i.kt)("h2",{id:"delegates"},"Delegates"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Agreement/Contract between Publisher and Subscriber"),(0,i.kt)("li",{parentName:"ul"},"Determines the signature of the event handler method in the subscriber")),(0,i.kt)("h2",{id:"what-do-we-need-to-do"},"What do we need to do?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Define a delegate"),(0,i.kt)("li",{parentName:"ol"},"Define an event based on that delegate"),(0,i.kt)("li",{parentName:"ol"},"Raise the event")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'class Program\n{\n    static void Main(string[] args)\n    {\n        var video = new Video() { Title = "Video 1" };\n        var videoEncoder = new VideoEncoder();  // publisher\n        var mailService = new MailService();    // subscriber\n\n        // subscribe: register event handler (add reference to handler method)\n        videoEncoder.VideoEncoded += mailService.OnVideoEncoded;\n        videoEncoder.Encode(video);\n    }\n}\n\n// Publisher\npublic class VideoEncoder\n{\n    // The delegate which defines how the handling method has to look\n    public delegate void VideoEncodedEventHandler(object source, VideoEventArgs args);\n    // The event which gets raised\n    public event VideoEncodedEventHandler VideoEncoded;\n\n    public void Encode(Video video)\n    {\n        // do some work\n        ...\n        // raise the event\n        OnVideoEncoded(video);\n    }\n\n    // it is convention to make these handlers protected virtual and void\n    protected virtual void OnVideoEncoded(Video video)\n    {\n        // check if there are any subscribers\n        if (VideoEncoded != null)\n        {\n            VideoEncoded(this, new VideoEventArgs(){ Video = video });\n        }\n    }\n}\n\npublic class VideoEventArgs : EventArgs\n{\n    public Video Video { get; set; }\n}\n\n// Subscriber\npublic class MailService{\n    // Event Handler: called by publisher when the event is raised\n    public void OnVideEncoded(object source, VideoEventArgs e)\n    {\n        // do some work: e.g. send an email\n        ...\n        // use event args\n        Console.WriteLine(e.Video.Title);\n    }\n}\n')),(0,i.kt)("h2",{id:"example-2-simplification"},"Example 2: Simplification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'class Program\n{\n    static void Main(string[] args)\n    {\n        var video = new Video() { Title = "Video 1" };\n        var videoEncoder = new VideoEncoder();  // publisher\n        var mailService = new MailService();    // subscriber\n\n        // subscribe: register event handler (add reference to handler method)\n        videoEncoder.VideoEncoded += mailService.OnVideoEncoded;\n        videoEncoder.Encode(video);\n    }\n}\n\n// Publisher\npublic class VideoEncoder\n{\n    // !!The event which gets raised (NOW WITH EventHandler)!!\n    public event EventHandler<VideoEventArgs> VideoEncoded;\n\n    public void Encode(Video video)\n    {\n        // do some work\n        ...\n        // raise the event\n        OnVideoEncoded(video);\n    }\n\n    // it is convention to make these handlers protected virtual and void\n    protected virtual void OnVideoEncoded(Video video)\n    {\n        // check if there are any subscribers\n        if (VideoEncoded != null)\n        {\n            VideoEncoded(this, new VideoEventArgs(){ Video = video });\n        }\n    }\n}\n\npublic class VideoEventArgs : EventArgs\n{\n    public Video Video { get; set; }\n}\n\n// Subscriber\npublic class MailService{\n    // Event Handler: called by publisher when the event is raised\n    public void OnVideEncoded(object source, VideoEventArgs e)\n    {\n        // do some work: e.g. send an email\n        ...\n        // use event args\n        Console.WriteLine(e.Video.Title);\n    }\n}\n')),(0,i.kt)("h2",{id:"source"},"Source"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=jQgwEsJISy0"},"C# Events and Delegates Made Simple | Mosh")))}u.isMDXComponent=!0}}]);