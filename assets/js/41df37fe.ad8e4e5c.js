"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[2441],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=l,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:l,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9589:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(7462),l=(n(7294),n(3905));const r={id:"querying-tables",title:"Querying Tables",sidebar_position:3},o=void 0,i={unversionedId:"Databases/sql/core-concepts/querying-tables",id:"Databases/sql/core-concepts/querying-tables",title:"Querying Tables",description:"SELECT statement",source:"@site/docs/Databases/sql/core-concepts/querying-tables.md",sourceDirName:"Databases/sql/core-concepts",slug:"/Databases/sql/core-concepts/querying-tables",permalink:"/LearningCollection/Databases/sql/core-concepts/querying-tables",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Databases/sql/core-concepts/querying-tables.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"querying-tables",title:"Querying Tables",sidebar_position:3},sidebar:"finance",previous:{title:"Database Schema",permalink:"/LearningCollection/Databases/sql/core-concepts/database-schema"},next:{title:"Altering Tables",permalink:"/LearningCollection/Databases/sql/core-concepts/altering-tables"}},s={},c=[{value:"<code>SELECT</code> statement",id:"select-statement",level:2},{value:"Selecting a single field",id:"selecting-a-single-field",level:3},{value:"Selecting multiple fields",id:"selecting-multiple-fields",level:3},{value:"Selecting all fields",id:"selecting-all-fields",level:3},{value:"<code>AS</code> keyword",id:"as-keyword",level:3},{value:"<code>COUNT</code> function",id:"count-function",level:2},{value:"<code>WHERE</code> clause",id:"where-clause",level:2},{value:"Checking for NULL values",id:"checking-for-null-values",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"select-statement"},(0,l.kt)("inlineCode",{parentName:"h2"},"SELECT")," statement"),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT"),' statement is the most common operation in SQL - often called a "query". ',(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," retrieves data from one or more tables. Standard ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," statements do not alter the state of the database."),(0,l.kt)("h3",{id:"selecting-a-single-field"},"Selecting a single field"),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," statement begins with the keyword ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," followed by the fields you want to retrieve:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id from users;\n")),(0,l.kt)("p",null,"After specifying fields, you need to indicate which table you want to pull the records from using the ",(0,l.kt)("inlineCode",{parentName:"p"},"from")," statement followed by the name of the table."),(0,l.kt)("h3",{id:"selecting-multiple-fields"},"Selecting multiple fields"),(0,l.kt)("p",null,"To select multiple fields, we separate them with a comma:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, name from users;\n")),(0,l.kt)("h3",{id:"selecting-all-fields"},"Selecting all fields"),(0,l.kt)("p",null,"To select all fields, we use the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," wildcard:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from users;\n")),(0,l.kt)("h3",{id:"as-keyword"},(0,l.kt)("inlineCode",{parentName:"h3"},"AS")," keyword"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"AS"),' keyword allows us to "alias" a piece of data in our query. The alias only exists for the duration of the query.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT employee_id AS id, employee_name AS name\nFROM employees;\n")),(0,l.kt)("h2",{id:"count-function"},(0,l.kt)("inlineCode",{parentName:"h2"},"COUNT")," function"),(0,l.kt)("p",null,"We can use a ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," statement to get a count of the records within a table. This can be very useful when we need to know how many records there are, but we don't particularly care what's in them."),(0,l.kt)("p",null,"Here's an example in SQLite:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count(*) from employees;\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," in this case refers to a column name. We don't care about the count of a specific column - we want to know the number of total records so we can use the wildcard ",(0,l.kt)("inlineCode",{parentName:"p"},"(*)"),"."),(0,l.kt)("h2",{id:"where-clause"},(0,l.kt)("inlineCode",{parentName:"h2"},"WHERE")," clause"),(0,l.kt)("p",null,"We often want to look at specific user data within that table without retrieving all the other records in the table. SQL accepts a ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause within a query that allows us to filter the data based on a condition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT email FROM users WHERE name = 'John';\n")),(0,l.kt)("p",null,"This will return all the emails of users named John."),(0,l.kt)("h3",{id:"checking-for-null-values"},"Checking for NULL values"),(0,l.kt)("p",null,"You can use a ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to filter values by whether or not they're ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,l.kt)("p",null,"To get values that are ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM users WHERE first_name IS NULL;\n")),(0,l.kt)("p",null,"To get values that are ",(0,l.kt)("strong",{parentName:"p"},"not")," ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM users WHERE first_name IS NOT NULL;\n")))}d.isMDXComponent=!0}}]);