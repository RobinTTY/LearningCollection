"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[471],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={id:"javascript-in-jsx",title:"JavaScript in JSX",sidebar_position:3},o=void 0,s={unversionedId:"web/react/core-concepts/describing-ui/javascript-in-jsx",id:"web/react/core-concepts/describing-ui/javascript-in-jsx",title:"JavaScript in JSX",description:"JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.",source:"@site/docs/web/react/core-concepts/describing-ui/javascript-in-jsx.md",sourceDirName:"web/react/core-concepts/describing-ui",slug:"/web/react/core-concepts/describing-ui/javascript-in-jsx",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/javascript-in-jsx",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/react/core-concepts/describing-ui/javascript-in-jsx.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"javascript-in-jsx",title:"JavaScript in JSX",sidebar_position:3},sidebar:"docs",previous:{title:"Writing Markup with JSX",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/writing-markup-with-jsx"},next:{title:"Passing Props",permalink:"/LearningCollection/web/react/core-concepts/describing-ui/passing-props"}},c={},l=[{value:"Passing strings with quotes",id:"passing-strings-with-quotes",level:2},{value:"Using curly braces: A window into the JavaScript world",id:"using-curly-braces-a-window-into-the-javascript-world",level:2},{value:"Using \u201cdouble curlies\u201d: CSS and other objects in JSX",id:"using-double-curlies-css-and-other-objects-in-jsx",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript."),(0,i.kt)("h2",{id:"passing-strings-with-quotes"},"Passing strings with quotes"),(0,i.kt)("p",null,"When you want to pass a string attribute to JSX, you put it in single or double quotes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function Avatar() {\n  return (\n    <img\n      className="avatar"\n      src="https://i.imgur.com/7vQD0fPs.jpg"\n      alt="Gregorio Y. Zara"\n    />\n  );\n}\n')),(0,i.kt)("p",null,"But what if you want to dynamically specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"alt")," text? You could use a value from JavaScript by replacing ",(0,i.kt)("inlineCode",{parentName:"p"},'"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"')," with ",(0,i.kt)("inlineCode",{parentName:"p"},"{")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"}"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function Avatar() {\n  const avatar = "https://i.imgur.com/7vQD0fPs.jpg";\n  const description = "Gregorio Y. Zara";\n  return <img className="avatar" src={avatar} alt={description} />;\n}\n')),(0,i.kt)("h2",{id:"using-curly-braces-a-window-into-the-javascript-world"},"Using curly braces: A window into the JavaScript world"),(0,i.kt)("p",null,"JSX is a special way of writing JavaScript. That means it\u2019s possible to use JavaScript inside it\u2014with curly braces ",(0,i.kt)("inlineCode",{parentName:"p"},"{ }"),". The example below first declares a name for the scientist, name, then embeds it with curly braces inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"<h1>"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function TodoList() {\n  const name = "Gregorio Y. Zara";\n  return <h1>{name}\'s To Do List</h1>;\n}\n')),(0,i.kt)("p",null,"Any JavaScript expression will work between curly braces, including function calls like ",(0,i.kt)("inlineCode",{parentName:"p"},"formatDate()"),"."),(0,i.kt)("h2",{id:"using-double-curlies-css-and-other-objects-in-jsx"},"Using \u201cdouble curlies\u201d: CSS and other objects in JSX"),(0,i.kt)("p",null,"In addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like ",(0,i.kt)("inlineCode",{parentName:"p"},'{ name: "Hedy Lamarr", inventions: 5 }'),". Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: ",(0,i.kt)("inlineCode",{parentName:"p"},'person={{ name: "Hedy Lamarr", inventions: 5 }}'),"."),(0,i.kt)("p",null,"You may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to the ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," attribute:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function TodoList() {\n  return (\n    <ul\n      style={{\n        backgroundColor: "black",\n        color: "pink",\n      }}\n    >\n      <li>Improve the videophone</li>\n      <li>Prepare aeronautics lectures</li>\n      <li>Work on the alcohol-fuelled engine</li>\n    </ul>\n  );\n}\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Inline ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," properties are written in camelCase. For example, HTML ",(0,i.kt)("inlineCode",{parentName:"p"},'<ul style="background-color: black">')," would be written as ",(0,i.kt)("inlineCode",{parentName:"p"},"<ul style={{ backgroundColor: 'black' }}>")," in your component.")))}d.isMDXComponent=!0}}]);