"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[5636],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),f=l(n),y=o,d=f["".concat(s,".").concat(y)]||f[y]||u[y]||i;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={id:"functions",title:"Functions",sidebar_position:3},a=void 0,c={unversionedId:"Web/typescript/core-concepts/functions",id:"Web/typescript/core-concepts/functions",title:"Functions",description:"Functions are the basic building block of any application, whether they\u2019re local functions, imported from another module, or methods on a class. They\u2019re also values, and just like other values, TypeScript has many ways to describe how functions can be called.",source:"@site/docs/Web/typescript/core-concepts/functions.md",sourceDirName:"Web/typescript/core-concepts",slug:"/Web/typescript/core-concepts/functions",permalink:"/LearningCollection/Web/typescript/core-concepts/functions",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/Web/typescript/core-concepts/functions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"functions",title:"Functions",sidebar_position:3},sidebar:"finance",previous:{title:"Enums",permalink:"/LearningCollection/Web/typescript/core-concepts/enums"},next:{title:"Compiler Configuration",permalink:"/LearningCollection/Web/typescript/compiler-configuration"}},s={},l=[{value:"Function Type Expressions",id:"function-type-expressions",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Functions are the basic building block of any application, whether they\u2019re local functions, imported from another module, or methods on a class. They\u2019re also values, and just like other values, TypeScript has many ways to describe how functions can be called."),(0,o.kt)("h2",{id:"function-type-expressions"},"Function Type Expressions"),(0,o.kt)("p",null,"The simplest way to describe a function is with a function type expression. These types are syntactically similar to arrow functions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function greeter(fn: (a: string) => void) {\n  fn("Hello, World");\n}\n\nfunction printToConsole(s: string) {\n  console.log(s);\n}\n\ngreeter(printToConsole);\n')),(0,o.kt)("p",null,"The syntax ",(0,o.kt)("inlineCode",{parentName:"p"},"(a: string) => void")," means \u201ca function with one parameter, named ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),", of type string, that doesn\u2019t have a return value\u201d. Just like with function declarations, if a parameter type isn\u2019t specified, it\u2019s implicitly ",(0,o.kt)("inlineCode",{parentName:"p"},"any"),"."),(0,o.kt)("p",null,"Of course, we can use a type alias to name a function type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type GreetFunction = (a: string) => void;\nfunction greeter(fn: GreetFunction) {\n  // ...\n}\n")))}u.isMDXComponent=!0}}]);