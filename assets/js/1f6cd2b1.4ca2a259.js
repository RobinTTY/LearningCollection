"use strict";(self.webpackChunklearning_knowledge_base=self.webpackChunklearning_knowledge_base||[]).push([[9815],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(n),y=a,g=u["".concat(s,".").concat(y)]||u[y]||d[y]||o;return n?r.createElement(g,i(i({ref:t},l),{},{components:n})):r.createElement(g,i({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=y;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={id:"type-guards",title:"Type Guards",sidebar_position:2},i=void 0,p={unversionedId:"web/typescript/advanced-concepts/type-guards",id:"web/typescript/advanced-concepts/type-guards",title:"Type Guards",description:"Type Guards allow you to narrow down the type of an object within a conditional block.",source:"@site/docs/web/typescript/advanced-concepts/type-guards.md",sourceDirName:"web/typescript/advanced-concepts",slug:"/web/typescript/advanced-concepts/type-guards",permalink:"/LearningCollection/web/typescript/advanced-concepts/type-guards",draft:!1,editUrl:"https://github.com/RobinTTY/LearningCollection/tree/master/website/docs/web/typescript/advanced-concepts/type-guards.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"type-guards",title:"Type Guards",sidebar_position:2},sidebar:"finance",previous:{title:"Intersection Types",permalink:"/LearningCollection/web/typescript/advanced-concepts/intersections"},next:{title:"Discriminated Unions",permalink:"/LearningCollection/web/typescript/advanced-concepts/discriminated-unions"}},s={},c=[{value:"<code>typeof</code> type guards",id:"typeof-type-guards",level:2},{value:"Usage",id:"usage",level:3},{value:"<code>instanceof</code> type guards",id:"instanceof-type-guards",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Examples",id:"examples",level:3},{value:"<code>in</code> type guards",id:"in-type-guards",level:2},{value:"Usage",id:"usage-2",level:3}],l={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Type Guards allow you to narrow down the type of an object within a conditional block."),(0,a.kt)("h2",{id:"typeof-type-guards"},(0,a.kt)("inlineCode",{parentName:"h2"},"typeof")," type guards"),(0,a.kt)("p",null,"As we\u2019ve seen, JavaScript supports a ",(0,a.kt)("inlineCode",{parentName:"p"},"typeof"),' operator which can give very basic information about the type of values we have at runtime. TypeScript expects this to return a certain set of strings ("string", "number", etc.). In TypeScript, checking against the value returned by ',(0,a.kt)("inlineCode",{parentName:"p"},"typeof")," is a type guard. ",(0,a.kt)("inlineCode",{parentName:"p"},"typeof")," is used for Typescript built-in types."),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'var str = "Hello World";\nconsole.log(typeof str); //string\n')),(0,a.kt)("h2",{id:"instanceof-type-guards"},(0,a.kt)("inlineCode",{parentName:"h2"},"instanceof")," type guards"),(0,a.kt)("p",null,"JavaScript has an operator for checking whether or not a value is an \u201cinstance\u201d of another value. More specifically, in JavaScript ",(0,a.kt)("inlineCode",{parentName:"p"},"x instanceof Foo")," checks whether the prototype chain of ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," contains ",(0,a.kt)("inlineCode",{parentName:"p"},"Foo.prototype"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"instanceof"),' is used for custom types and "complex" built-in types (e.g. RegExp, Array, Object).'),(0,a.kt)("h3",{id:"usage-1"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2}","{2}":!0},"function logValue(x: Date | string) {\n  if (x instanceof Date) {\n    console.log(x.toUTCString());\n  } else {\n    console.log(x.toUpperCase());\n  }\n}\n")),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/regularexpression/ instanceof RegExp; // true\ntypeof /regularexpression/; // object\n\n[] instanceof Array; // true\ntypeof []; //object\n\n{} instanceof Object; // true\ntypeof {}; // object\n")),(0,a.kt)("h2",{id:"in-type-guards"},(0,a.kt)("inlineCode",{parentName:"h2"},"in")," type guards"),(0,a.kt)("p",null,"JavaScript has an operator for determining if an object has a property with a name: the ",(0,a.kt)("inlineCode",{parentName:"p"},"in")," operator. TypeScript takes this into account as a way to narrow down potential types."),(0,a.kt)("h3",{id:"usage-2"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'interface A {\n  x: number;\n}\ninterface B {\n  y: string;\n}\n\nfunction doStuff(q: A | B) {\n  if ("x" in q) {\n    // q: A\n  } else {\n    // q: B\n  }\n}\n')))}d.isMDXComponent=!0}}]);